!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
'A	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map 'A :GetSuperMarkT a<CR>$/;"	m
'B	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map 'B :GetSuperMarkT b<CR>$/;"	m
'C	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map 'C :GetSuperMarkT c<CR>$/;"	m
'D	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map 'D :GetSuperMarkT d<CR>$/;"	m
'E	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map 'E :GetSuperMarkT e<CR>$/;"	m
'F	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map 'F :GetSuperMarkT f<CR>$/;"	m
'G	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map 'G :GetSuperMarkT g<CR>$/;"	m
'H	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map 'H :GetSuperMarkT h<CR>$/;"	m
'N	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map 'N :GetSuperMarkT n<CR>$/;"	m
'Q	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map 'Q :GetSuperMarkT q<CR>$/;"	m
'R	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map 'R :GetSuperMarkT r<CR>$/;"	m
'S	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map 'S :GetSuperMarkT s<CR>$/;"	m
'T	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map 'T :GetSuperMarkT t<CR>$/;"	m
'V	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map 'V :GetSuperMarkT v<CR>$/;"	m
'W	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map 'W :GetSuperMarkT w<CR>$/;"	m
'X	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map 'X :GetSuperMarkT x<CR>$/;"	m
'Y	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map 'Y :GetSuperMarkT y<CR>$/;"	m
'Z	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map 'Z :GetSuperMarkT z<CR>$/;"	m
'a	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map 'a :GetSuperMarkB a<CR>$/;"	m
'b	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map 'b :GetSuperMarkB b<CR>$/;"	m
'c	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map 'c :GetSuperMarkB c<CR>$/;"	m
'd	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map 'd :GetSuperMarkB d<CR>$/;"	m
'e	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map 'e :GetSuperMarkB e<CR>$/;"	m
'f	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map 'f :GetSuperMarkB f<CR>$/;"	m
'g	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map 'g :GetSuperMarkB g<CR>$/;"	m
'h	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map 'h :GetSuperMarkB h<CR>$/;"	m
'n	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map 'n :GetSuperMarkB n<CR>$/;"	m
'q	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map 'q :GetSuperMarkB q<CR>$/;"	m
'r	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map 'r :GetSuperMarkB r<CR>$/;"	m
's	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map 's :GetSuperMarkB s<CR>$/;"	m
't	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map 't :GetSuperMarkB t<CR>$/;"	m
'v	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map 'v :GetSuperMarkB v<CR>$/;"	m
'w	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map 'w :GetSuperMarkB w<CR>$/;"	m
'x	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map 'x :GetSuperMarkB x<CR>$/;"	m
'y	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map 'y :GetSuperMarkB y<CR>$/;"	m
'z	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map 'z :GetSuperMarkB z<CR>$/;"	m
,s	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^nmap ,s :call SwitchSourceHeader()<CR> $/;"	m
0jzt	C:\programs\gvim\vimfiles\syntax\.colorss.vim	/^normal 0jzt$/;"	m
<2-LeftMouse>	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nnoremap <buffer> <silent> <2-LeftMouse>   \\|:call <SID>DoFoldOrOpenEntry('', 'e')<CR>$/;"	m
<2-RightMouse>	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nmap     <buffer> <silent> <2-RightMouse> <space>$/;"	m
<3-LeftMouse>	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nnoremap <buffer> <silent> <3-LeftMouse>  <Nop>$/;"	m
<3-RightMouse>	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nmap     <buffer> <silent> <3-RightMouse> <space>$/;"	m
<4-RightMouse>	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nmap     <buffer> <silent> <4-RightMouse> <space>$/;"	m
<A-d>	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\registers.vim	/^imap <A-d> <Esc>o<Esc>"rp==f"a$/;"	m
<A-d>	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\registers.vim	/^map <A-d> o<Esc>"rp==f"a$/;"	m
<A-p>	C:\programs\gvim\vimfiles\plugin\fwk_ext_handler.vim	/^map <A-p> :call ExecuteSelfFile()<CR>$/;"	m
<C-2-LeftMouse>	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nmap     <buffer> <silent> <C-2-LeftMouse> <C-Return>$/;"	m
<C-Down>	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nnoremap <buffer> <silent> <C-Down> \\|:silent call <SID>MoveDown()<CR>$/;"	m
<C-F2>	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\maps_regex.vim	/^map <C-F2> :match Search \/\/<CR>$/;"	m
<C-G>S	C:\programs\gvim\vimfiles\plugin\surround.vim	/^    imap        <C-G>S <Plug>ISurround$/;"	m
<C-G>s	C:\programs\gvim\vimfiles\plugin\surround.vim	/^    imap        <C-G>s <Plug>Isurround$/;"	m
<C-LeftMouse>	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nnoremap <buffer> <silent> <C-LeftMouse>   <LeftMouse>$/;"	m
<C-Return>	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nnoremap <buffer> <silent> <C-Return> \\|:call <SID>DoFoldOrOpenEntry('silent! only', 'e')<CR>$/;"	m
<C-S>	C:\programs\gvim\vimfiles\plugin\surround.vim	/^        imap     <C-S> <Plug>Isurround$/;"	m
<C-Up>	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nnoremap <buffer> <silent> <C-Up>   \\|:silent call <SID>MoveUp()<CR>$/;"	m
<C-^>	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nnoremap <buffer> <silent> <C-^> <Nop>$/;"	m
<F12>	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nmap <silent> <F12> <Plug>ToggleProject$/;"	m
<F1>	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nnoremap <buffer> <F1> :let g:proj_doinghelp = 1<CR><F1>$/;"	m
<F2>	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\maps_regex.vim	/^map <F2> :call CallFindPattern()<CR>$/;"	m
<F4>	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nnoremap <buffer> <silent>           <F4> :call FWK_Project_Addon_refresh_path()<CR>$/;"	m
<F5>	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nnoremap <buffer> <silent>           <F5> :call <SID>RefreshEntriesFromDir(1)<CR>$/;"	m
<Leader>df	C:\programs\gvim\vimfiles\plugin\scmdiff.vim	/^map <silent> <Leader>df :call <SID>scmToggle()<CR>$/;"	m
<Leader>rwp	C:\programs\gvim\vimfiles\plugin\cecutil.vim	/^ map <unique> <Leader>rwp <Plug>RestoreWinPosn$/;"	m
<Leader>swp	C:\programs\gvim\vimfiles\plugin\cecutil.vim	/^ map <unique> <Leader>swp <Plug>SaveWinPosn$/;"	m
<LocalLeader>%	C:\programs\gvim\vimfiles\ftplugin\xml.vim	/^nnoremap <buffer> <LocalLeader>% :call <SID>TagMatch1()<Cr>$/;"	m
<LocalLeader>%	C:\programs\gvim\vimfiles\ftplugin\xml.vim	/^vnoremap <buffer> <LocalLeader>% <Esc>:call <SID>VisualTag()<Cr>$/;"	m
<LocalLeader>.	C:\programs\gvim\vimfiles\ftplugin\xml.vim	/^    inoremap <buffer> <LocalLeader>. >$/;"	m
<LocalLeader>0	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nnoremap <buffer>          <LocalLeader>0 \\|:call <SID>ListSpawn("")<CR>$/;"	m
<LocalLeader>5	C:\programs\gvim\vimfiles\ftplugin\xml.vim	/^nnoremap <buffer> <LocalLeader>5 :call <SID>TagMatch1()<Cr>$/;"	m
<LocalLeader>5	C:\programs\gvim\vimfiles\ftplugin\xml.vim	/^vnoremap <buffer> <LocalLeader>5 <Esc>:call <SID>VisualTag()<Cr>$/;"	m
<LocalLeader><Down>	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nmap     <buffer> <silent> <LocalLeader><Down> <C-Down>$/;"	m
<LocalLeader><LocalLeader>	C:\programs\gvim\vimfiles\ftplugin\xml.vim	/^inoremap <buffer> <LocalLeader><LocalLeader> <Esc>:call <SID>EditFromJump()<Cr>$/;"	m
<LocalLeader><LocalLeader>	C:\programs\gvim\vimfiles\ftplugin\xml.vim	/^nnoremap <buffer> <LocalLeader><LocalLeader> :call <SID>EditFromJump()<Cr>$/;"	m
<LocalLeader><Up>	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nmap     <buffer> <silent> <LocalLeader><Up> <C-Up>$/;"	m
<LocalLeader>>	C:\programs\gvim\vimfiles\ftplugin\xml.vim	/^    inoremap <buffer> <LocalLeader>> >$/;"	m
<LocalLeader>C	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>C :call <SID>CreateEntriesFromDir(1)<CR>$/;"	m
<LocalLeader>E	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>E :call <SID>OpenEntry(line('.'), '', 'e', 1)<CR>$/;"	m
<LocalLeader>F0	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nnoremap <buffer>          <LocalLeader>F0 \\|:call <SID>ListSpawn("_fold")<CR>$/;"	m
<LocalLeader>G	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>G \\|:call <SID>GrepAll(1, line('.'), "")<CR>$/;"	m
<LocalLeader>I	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>I :echo Project_GetFname(line('.'))<CR>$/;"	m
<LocalLeader>L	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>L \\|:call <SID>LoadAll(1, line('.'))<CR>$/;"	m
<LocalLeader>R	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>R :call <SID>RefreshEntriesFromDir(1)<CR>$/;"	m
<LocalLeader>S	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>S \\|:call <SID>LoadAllSplit(0, line('.'))<CR>$/;"	m
<LocalLeader>T	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>T \\|:call <SID>DoFoldOrOpenEntry('', 'tabe')<CR>$/;"	m
<LocalLeader>W	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>W \\|:call <SID>WipeAll(1, line('.'))<CR>$/;"	m
<LocalLeader>c	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>c :call <SID>CreateEntriesFromDir(0)<CR>$/;"	m
<LocalLeader>e	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>e :call <SID>OpenEntry(line('.'), '', '', 0)<CR>$/;"	m
<LocalLeader>f0	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nnoremap <buffer>          <LocalLeader>f0 \\|:call <SID>ListSpawn("_fold")<CR>$/;"	m
<LocalLeader>g	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>g \\|:call <SID>GrepAll(0, line('.'), "")<CR>$/;"	m
<LocalLeader>i	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>i :echo <SID>RecursivelyConstructDirectives(line('.'))<CR>$/;"	m
<LocalLeader>l	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>l \\|:call <SID>LoadAll(0, line('.'))<CR>$/;"	m
<LocalLeader>o	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nmap     <buffer> <silent> <LocalLeader>o <C-Return>$/;"	m
<LocalLeader>q	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nmap     <buffer> <silent> <LocalLeader>q <CR>`<Left>$/;"	m
<LocalLeader>r	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>r :call <SID>RefreshEntriesFromDir(0)<CR>$/;"	m
<LocalLeader>s	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nmap     <buffer> <silent> <LocalLeader>s <S-Return>$/;"	m
<LocalLeader>v	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nmap     <buffer> <silent> <LocalLeader>v <CR>`<Left>$/;"	m
<LocalLeader>w	C:\programs\gvim\vimfiles\ftplugin\xml.vim	/^nnoremap <buffer> <LocalLeader>w :call <SID>ClearJumpMarks()<Cr>$/;"	m
<LocalLeader>w	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>w \\|:call <SID>WipeAll(0, line('.'))<CR>$/;"	m
<LocalLeader>x	C:\programs\gvim\vimfiles\ftplugin\xml.vim	/^vnoremap <buffer> <LocalLeader>x "xx:call <SID>WrapTag(@x)<Cr>$/;"	m
<M-2-LeftMouse>	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nnoremap <buffer> <silent> <M-2-LeftMouse> <M-CR>$/;"	m
<M-CR>	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nmap     <buffer> <silent> <M-CR> <Return><C-W>p$/;"	m
<Plug>AM_Htd	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_Htd <SID>WS:'y,'zs%<[tT][rR]><[tT][dD][^>]\\{-}>\\<Bar><\/[tT][dD]><[tT][dD][^>]\\{-}>\\<Bar><\/[tT][dD]><\/[tT][rR]>%@&@%g<CR>'yjma'zk:AlignCtrl m=Ilp1P0 @<CR>:'a,.Align<CR>:'y,'zs\/ @\/@\/<CR>:'y,'zs\/@ <[tT][rR]>\/<[tT][rR]>\/ge<CR>:'y,'zs\/@\/\/ge<CR><SID>WE$/;"	m
<Plug>AM_T|	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T| <SID>WS:AlignCtrl mIp0P0=r <Bar><CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_T#	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T#   <SID>WS:AlignCtrl mIp0P0=r #<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_T,	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T,   <SID>WS:AlignCtrl mIp0P1=r ,<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_T:	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T:   <SID>WS:AlignCtrl mIp1P1=r :<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_T;	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T;   <SID>WS:AlignCtrl mIp0P0=r ;<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_T<	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T<   <SID>WS:AlignCtrl mIp0P0=r <<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_T=	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T=   <SID>WS:'a,'z-1s\/\\s\\+\\([*\/+\\-%<Bar>&\\~^]\\==\\)\/ \\1\/e<CR>:'a,'z-1s@ \\+\\([*\/+\\-%<Bar>&\\~^]\\)=@\\1=@ge<CR>:'a,'z-1s\/; *\/;@\/e<CR>:'a,'z-1s\/==\/\\="\\<Char-0x0f>\\<Char-0x0f>"\/ge<CR>:'a,'z-1s\/!=\/\\x="!\\<Char-0x0f>"\/ge<CR>:AlignCtrl mIp1P1=r = @<CR>:AlignCtrl g =<CR>:'a,'z-1Align<CR>:'a,'z-1s\/; *@\/;\/e<CR>:'a,'z-1s\/; *$\/;\/e<CR>:'a,'z-1s@\\([*\/+\\-%<Bar>&\\~^]\\)\\( \\+\\)=@\\2\\1=@ge<CR>:'a,'z-1s\/\\( \\+\\);\/;\\1\/ge<CR>:'a,'z-1s\/\\xff\/=\/ge<CR><SID>WE:exe "norm <Plug>acom"$/;"	m
<Plug>AM_T?	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T?   <SID>WS:AlignCtrl mIp0P0=r ?<CR>:'a,.Align<CR>:'y,'zs\/ \\( *\\);\/;\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_T@	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T@   <SID>WS:AlignCtrl mIp0P0=r @<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_Tab	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_Tab  <SID>WS:'a,.s\/^\\(\\t*\\)\\(.*\\)\/\\=submatch(1).escape(substitute(submatch(2),'\\t','@','g'),'\\')\/<CR>:AlignCtrl mI=r @<CR>:'a,.Align<CR>:'y+1,'z-1s\/@\/ \/g<CR><SID>WE$/;"	m
<Plug>AM_Ts,	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_Ts,  <SID>WS:AlignCtrl mIp0P1=r ,<CR>:'a,.Align<CR>:'a,.s\/\\(\\s*\\),\/,\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_Tsp	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_Tsp  <SID>WS:'a,.s\/^\\(\\s*\\)\\(.*\\)\/\\=submatch(1).escape(substitute(submatch(2),'\\s\\+','@','g'),'\\')\/<CR>:AlignCtrl mI=r @<CR>:'a,.Align<CR>:'y+1,'z-1s\/@\/ \/g<CR><SID>WE$/;"	m
<Plug>AM_T~	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T~   <SID>WS:AlignCtrl mIp0P0=r ~<CR>:'a,.Align<CR>:'y,'zs\/ \\( *\\);\/;\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_a(	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_a(       <SID>WS:AlignCtrl mIp0P1=l<CR>:'a,.Align [(,]<CR>:sil 'y+1,'z-1s\/\\(\\s\\+\\),\/,\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_a,		<SID>WS:'y,'zs/\(\S\)\s\+/\1	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_a,		<SID>WS:'y,'zs\/\\(\\S\\)\\s\\+\/\\1 \/ge<CR>'yjma'zk:call AlignMaps#CharJoiner(",")<cr>:silent 'y,'zg\/,\/call AlignMaps#FixMultiDec()<CR>'z:exe "norm \\<Plug>AM_adec"<cr><SID>WE$/;"	m
<Plug>AM_a<		<SID>WS:AlignCtrl	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_a<		<SID>WS:AlignCtrl mIp1P1=l << >><CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_a=		<SID>WS:AlignCtrl	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_a=		<SID>WS:AlignCtrl mIp1P1=l<CR>:AlignCtrl g :=<CR>:'a,'zAlign :\\==<CR><SID>WE$/;"	m
<Plug>AM_a?		<SID>WS:AlignCtrl	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_a?		<SID>WS:AlignCtrl mIp1P1lC ? : : : : <CR>:'a,.Align<CR>:'a,'z-1s\/\\(\\s\\+\\)? \/?\\1\/e<CR><SID>WE$/;"	m
<Plug>AM_abox		<SID>WS:let	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_abox		<SID>WS:let g:alignmaps_iws=substitute(getline("'a"),'^\\(\\s*\\).*$','\\1','e')<CR>:'a,'z-1s\/^\\s\\+\/\/e<CR>:'a,'z-1s\/^.*$\/@&@\/<CR>:AlignCtrl m=p01P0w @<CR>:'a,.Align<CR>:'a,'z-1s\/@\/ * \/<CR>:'a,'z-1s\/@$\/*\/<CR>'aYP:s\/.\/*\/g<CR>0r\/'zkYp:s\/.\/*\/g<CR>0r A\/<Esc>:exe "'a-1,'z-1s\/^\/".g:alignmaps_iws."\/e"<CR><SID>WE$/;"	m
<Plug>AM_acom		<SID>WS:'a,.s/\/[*/]\/\=/@&@/e<CR>:'a,.s/\*\//@&/e<CR>:'y,'zs/^\(	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_acom		<SID>WS:'a,.s\/\\\/[*\/]\\\/\\=\/@&@\/e<CR>:'a,.s\/\\*\\\/\/@&\/e<CR>:'y,'zs\/^\\( *\\) @\/\\1@\/e<CR>'zk:call AlignMaps#StdAlign(2)<CR>:'y,'zs\/^\\(\\s*\\) @\/\\1\/e<CR>:'y,'zs\/ @\/\/eg<CR><SID>WE$/;"	m
<Plug>AM_adcom	<SID>WS:'a,.v/^\s*\/[/*]/s/\/[*/]\*\=/@&@/e<CR>:'a,.v/^\s*\/[/*]/s/\*\//@&/e<CR>:'y,'zv/^\s*\/[/*]/s/^\(	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_adcom	<SID>WS:'a,.v\/^\\s*\\\/[\/*]\/s\/\\\/[*\/]\\*\\=\/@&@\/e<CR>:'a,.v\/^\\s*\\\/[\/*]\/s\/\\*\\\/\/@&\/e<CR>:'y,'zv\/^\\s*\\\/[\/*]\/s\/^\\( *\\) @\/\\1@\/e<CR>'zk:call AlignMaps#StdAlign(3)<cr>:'y,'zv\/^\\s*\\\/[\/*]\/s\/^\\(\\s*\\) @\/\\1\/e<CR>:'y,'zs\/ @\/\/eg<CR><SID>WE$/;"	m
<Plug>AM_adec		<SID>WS:'a,'zs/\([^	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_adec		<SID>WS:'a,'zs\/\\([^ \\t\/(]\\)\\([*&]\\)\/\\1 \\2\/e<CR>:'y,'zv\/^\\\/\/s\/\\([^ \\t]\\)\\s\\+\/\\1 \/ge<CR>:'y,'zv\/^\\s*[*\/]\/s\/\\([^\/][*&]\\)\\s\\+\/\\1\/ge<CR>:'y,'zv\/^\\s*[*\/]\/s\/^\\(\\s*\\%(\\K\\k*\\s\\+\\%([a-zA-Z_*(&]\\)\\@=\\)\\+\\)\\([*(&]*\\)\\s*\\([a-zA-Z0-9_()]\\+\\)\\s*\\(\\(\\[.\\{-}]\\)*\\)\\s*\\(=\\)\\=\\s*\\(.\\{-}\\)\\=\\s*;\/\\1@\\2#@\\3\\4@\\6@\\7;@\/e<CR>:'y,'zv\/^\\s*[*\/]\/s\/\\*\\\/\\s*$\/@*\\\/\/e<CR>:'y,'zv\/^\\s*[*\/]\/s\/^\\s\\+\\*\/@@@@@* \/e<CR>:'y,'zv\/^\\s*[*\/]\/s\/^@@@@@\\*\\(.*[^*\/]\\)$\/&@*\/e<CR>'yjma'zk:AlignCtrl v ^\\s*[*\/#]<CR>:call AlignMaps#StdAlign(1)<cr>:'y,'zv\/^\\s*[*\/]\/s\/@ \/\/ge<CR>:'y,'zv\/^\\s*[*\/]\/s\/\\(\\s*\\);\/;\\1\/e<CR>:'y,'zv\/^#\/s\/# \/\/e<CR>:'y,'zv\/^\\s\\+[*\/#]\/s\/\\([^\/*]\\)\\(\\*\\+\\)\\( \\+\\)\/\\1\\3\\2\/e<CR>:'y,'zv\/^\\s\\+[*\/#]\/s\/\\((\\+\\)\\( \\+\\)\\*\/\\2\\1*\/e<CR>:'y,'zv\/^\\s\\+[*\/#]\/s\/^\\(\\s\\+\\) \\*\/\\1*\/e<CR>:'y,'zv\/^\\s\\+[*\/#]\/s\/[ \\t@]*$\/\/e<CR>:'y,'zs\/^[*]\/ *\/e<CR><SID>WE$/;"	m
<Plug>AM_adef		<SID>WS:AlignPush<CR>:AlignCtrl	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_adef		<SID>WS:AlignPush<CR>:AlignCtrl v ^\\s*\\(\\\/\\*\\<bar>\\\/\\\/\\)<CR>:'a,.v\/^\\s*\\(\\\/\\*\\<bar>\\\/\\\/\\)\/s\/^\\(\\s*\\)#\\(\\s\\)*define\\s*\\(\\I[a-zA-Z_0-9(),]*\\)\\s*\\(.\\{-}\\)\\($\\<Bar>\\\/\\*\\)\/#\\1\\2define @\\3@\\4@\\5\/e<CR>:'a,.v\/^\\s*\\(\\\/\\*\\<bar>\\\/\\\/\\)\/s\/\\($\\<Bar>\\*\\\/\\)\/@&\/e<CR>'zk:call AlignMaps#StdAlign(1)<cr>'yjma'zk:'a,.v\/^\\s*\\(\\\/\\*\\<bar>\\\/\\\/\\)\/s\/ @\/\/g<CR><SID>WE$/;"	m
<Plug>AM_aenum	<SID>WS:'a,'zs/\%([0-9.]\)\s\+\([-+]\=\d\)/\1@\2/ge<CR>:'a,'zs/\.@/\.0@/ge<CR>:AlignCtrl	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_aenum	<SID>WS:'a,'zs\/\\%([0-9.]\\)\\s\\+\\([-+]\\=\\d\\)\/\\1@\\2\/ge<CR>:'a,'zs\/\\.@\/\\.0@\/ge<CR>:AlignCtrl wmp0P0r<CR>:'a,'zAlign [,@]<CR>:'a,'zs\/@\/ \/ge<CR>:'a,'zs\/\\(,\\)\\(\\s\\+\\)\\([-0-9.,eE+]\\+\\)\/\\1\\3\\2\/ge<CR>:'a,'zs\/\\([eE]\\)\\(\\s\\+\\)\\([0-9+\\-+]\\+\\)\/\\1\\3\\2\/ge<CR><SID>WE$/;"	m
<Plug>AM_afnc		:<c-u>set	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_afnc		:<c-u>set lz<CR>:silent call AlignMaps#Afnc()<CR>:set nolz<CR>$/;"	m
<Plug>AM_aocom	<SID>WS:AlignPush<CR>:AlignCtrl	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_aocom	<SID>WS:AlignPush<CR>:AlignCtrl g \/[*\/]<CR>:exe "norm \\<Plug>AM_acom"<cr>:AlignPop<CR><SID>WE$/;"	m
<Plug>AM_ascom	<SID>WS:'a,.s/\/[*/]/@&@/e<CR>:'a,.s/\*\//@&/e<CR>:silent!	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ascom	<SID>WS:'a,.s\/\\\/[*\/]\/@&@\/e<CR>:'a,.s\/\\*\\\/\/@&\/e<CR>:silent! 'a,.g\/^\\s*@\\\/[*\/]\/s\/@\/\/ge<CR>:AlignCtrl v ^\\s*\\\/[*\/]<CR>:AlignCtrl g \\\/[*\/]<CR>'zk:call AlignMaps#StdAlign(2)<cr>:'y,'zs\/^\\(\\s*\\) @\/\\1\/e<CR>:'y,'zs\/ @\/\/eg<CR><SID>WE$/;"	m
<Plug>AM_aunum	<SID>WS:'a,'zs/\%([0-9.]\)\s\+\zs\([-+.]\=\d\)/@\1/ge<CR>:'a,'zs/\(\(^\|\s\)\d\+\)\(\s\+\)@/\1@\3@/ge<CR>:'a,'zs/\.@/\.0@/ge<CR>:AlignCtrl	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_aunum	<SID>WS:'a,'zs\/\\%([0-9.]\\)\\s\\+\\zs\\([-+.]\\=\\d\\)\/@\\1\/ge<CR>:'a,'zs\/\\(\\(^\\|\\s\\)\\d\\+\\)\\(\\s\\+\\)@\/\\1@\\3@\/ge<CR>:'a,'zs\/\\.@\/\\.0@\/ge<CR>:AlignCtrl wmp0P0r<CR>:'a,'zAlign [.@]<CR>:'a,'zs\/@\/ \/ge<CR>:'a,'zs\/\\(\\.\\)\\(\\s\\+\\)\\([0-9.,eE+]\\+\\)\/\\1\\3\\2\/ge<CR>:'a,'zs\/\\([eE]\\)\\(\\s\\+\\)\\([0-9+\\-+]\\+\\)\/\\1\\3\\2\/ge<CR><SID>WE$/;"	m
<Plug>AM_m=		<SID>WS:'a,'zs/\s\+\([*/+\-%<Bar>&\~^]\==\)/	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_m=		<SID>WS:'a,'zs\/\\s\\+\\([*\/+\\-%<Bar>&\\~^]\\==\\)\/ \\1\/e<CR>:'a,'zs@ \\+\\([*\/+\\-%<Bar>&\\~^]\\)=@\\1=@ge<CR>:'a,'zs\/==\/\\="\\<Char-0x0f>\\<Char-0x0f>"\/ge<CR>:'a,'zs\/!=\/\\="!\\<Char-0x0f>"\/ge<CR>'zk:AlignCtrl mIp1P1=l =<CR>:AlignCtrl g =<CR>:'a,'z-1Align<CR>:'a,'z-1s@\\([*\/+\\-%<Bar>&\\~^!=]\\)\\( \\+\\)=@\\2\\1=@ge<CR>:'a,'z-1s\/\\( \\+\\);\/;\\1\/ge<CR>:'a,'z-s\/%\\ze[^=]\/ @%@ \/e<CR>'zk:call AlignMaps#StdAlign(1)<cr>:'y,'zs\/^\\(\\s*\\) @\/\\1\/e<CR>:'a,'z-1s\/\\xff\/=\/ge<CR>:'y,'zs\/ @\/\/eg<CR><SID>WE$/;"	m
<Plug>AM_t|		<SID>WS:AlignCtrl	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t|		<SID>WS:AlignCtrl mIp0P0=l <Bar><CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_t#		<SID>WS:AlignCtrl	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t#		<SID>WS:AlignCtrl mIp0P0=l #<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_t,		<SID>WS:AlignCtrl	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t,		<SID>WS:AlignCtrl mIp0P1=l ,<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_t:		<SID>WS:AlignCtrl	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t:		<SID>WS:AlignCtrl mIp1P1=l :<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_t;		<SID>WS:AlignCtrl	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t;		<SID>WS:AlignCtrl mIp0P1=l ;<CR>:'a,.Align<CR>:sil 'y,'zs\/\\( *\\);\/;\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_t<		<SID>WS:AlignCtrl	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t<		<SID>WS:AlignCtrl mIp0P0=l <<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_t=		<SID>WS:call	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t=		<SID>WS:call AlignMaps#Equals()<CR><SID>WE$/;"	m
<Plug>AM_t?		<SID>WS:AlignCtrl	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t?		<SID>WS:AlignCtrl mIp0P0=l ?<CR>:'a,.Align<CR>:.,'zs\/ \\( *\\);\/;\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_t@		<SID>WS::call	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t@		<SID>WS::call AlignMaps#StdAlign(1)<cr>:<SID>WE$/;"	m
<Plug>AM_tab		<SID>WS:'a,.s/^\(\t*\)\(.*\)$/\=submatch(1).escape(substitute(submatch(2),'\t',"\<Char-0x0f>",'g'),'\')/<CR>:if	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_tab		<SID>WS:'a,.s\/^\\(\\t*\\)\\(.*\\)$\/\\=submatch(1).escape(substitute(submatch(2),'\\t',"\\<Char-0x0f>",'g'),'\\')\/<CR>:if &ts == 1<bar>exe "AlignCtrl mI=lp0P0 \\<Char-0x0f>"<bar>else<bar>exe "AlignCtrl mI=l \\<Char-0x0f>"<bar>endif<CR>:'a,.Align<CR>:exe "'y+1,'z-1s\/\\<Char-0x0f>\/".((&ts == 1)? '\\t' : ' ')."\/g"<CR><SID>WE$/;"	m
<Plug>AM_tml		<SID>WS:AlignCtrl	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_tml		<SID>WS:AlignCtrl mWp1P0=l \\\\\\@<!\\\\\\s*$<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_ts,		<SID>WS:AlignCtrl	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ts,		<SID>WS:AlignCtrl mIp0P1=l #<CR>:'a,.Align<CR>:sil 'y+1,'z-1s\/\\(\\s*\\)#\/,\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_ts,		<SID>WS:AlignCtrl	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ts,		<SID>WS:AlignCtrl mIp0P1=l ,<CR>:'a,.Align<CR>:sil 'y+1,'z-1s\/\\(\\s*\\),\/,\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_ts:		<SID>WS:AlignCtrl	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ts:		<SID>WS:AlignCtrl mIp1P1=l :<CR>:'a,.Align<CR>:sil 'y+1,'z-1s\/\\(\\s*\\):\/:\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_ts;		<SID>WS:AlignCtrl	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ts;		<SID>WS:AlignCtrl mIp1P1=l ;<CR>:'a,.Align<CR>:sil 'y+1,'z-1s\/\\(\\s*\\);\/;\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_ts<		<SID>WS:AlignCtrl	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ts<		<SID>WS:AlignCtrl mIp1P1=l <<CR>:'a,.Align<CR>:sil 'y+1,'z-1s\/\\(\\s*\\)<\/<\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_ts=		<SID>WS:AlignCtrl	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ts=		<SID>WS:AlignCtrl mIp1P1=l =<CR>:'a,.Align<CR>:sil 'y+1,'z-1s\/\\(\\s*\\)=\/=\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_tsp		<SID>WS:'a,.s/^\(\s*\)\(.*\)/\=submatch(1).escape(substitute(submatch(2),'\s\+','@','g'),'\')/<CR>:AlignCtrl	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_tsp		<SID>WS:'a,.s\/^\\(\\s*\\)\\(.*\\)\/\\=submatch(1).escape(substitute(submatch(2),'\\s\\+','@','g'),'\\')\/<CR>:AlignCtrl mI=lp0P0 @<CR>:'a,.Align<CR>:'y+1,'z-1s\/@\/ \/g<CR><SID>WE$/;"	m
<Plug>AM_tsq		<SID>WS:'a,.AlignReplaceQuotedSpaces<CR>:'a,.s/^\(\s*\)\(.*\)/\=submatch(1).substitute(submatch(2),'\s\+','@','g')/<CR>:AlignCtrl	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_tsq		<SID>WS:'a,.AlignReplaceQuotedSpaces<CR>:'a,.s\/^\\(\\s*\\)\\(.*\\)\/\\=submatch(1).substitute(submatch(2),'\\s\\+','@','g')\/<CR>:AlignCtrl mIp0P0=l @<CR>:'a,.Align<CR>:'y+1,'z-1s\/[%@]\/ \/g<CR><SID>WE$/;"	m
<Plug>AM_tt		<SID>WS:AlignCtrl	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_tt		<SID>WS:AlignCtrl mIp1P1=l \\\\\\@<!& \\\\\\\\<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_t~		<SID>WS:AlignCtrl	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t~		<SID>WS:AlignCtrl mIp0P0=l ~<CR>:'a,.Align<CR>:'y,'zs\/ \\( *\\);\/;\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_w=		<SID>WS:'a,'zg/=/s/\s\+\([*/+\-%<Bar>&\~^]\==\)/	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_w=		<SID>WS:'a,'zg\/=\/s\/\\s\\+\\([*\/+\\-%<Bar>&\\~^]\\==\\)\/ \\1\/e<CR>:'a,'zg\/=\/s@ \\+\\([*\/+\\-%<Bar>&\\~^]\\)=@\\1=@ge<CR>:'a,'zg\/=\/s\/==\/\\="\\<Char-0x0f>\\<Char-0x0f>"\/ge<CR>:'a,'zg\/=\/s\/!=\/\\="!\\<Char-0x0f>"\/ge<CR>'zk:AlignCtrl mWp1P1=l =<CR>:AlignCtrl g =<CR>:'a,'z-1g\/=\/Align<CR>:'a,'z-1g\/=\/s@\\([*\/+\\-%<Bar>&\\~^!=]\\)\\( \\+\\)=@\\2\\1=@ge<CR>:'a,'z-1g\/=\/s\/\\( \\+\\);\/;\\1\/ge<CR>:'a,'z-1v\/^\\s*\\\/[*\/]\/s\/\\\/[*\/]\/@&@\/e<CR>:'a,'z-1v\/^\\s*\\\/[*\/]\/s\/\\*\\\/\/@&\/e<CR>'zk:call AlignMaps#StdAlign(1)<cr>:'y,'zs\/^\\(\\s*\\) @\/\\1\/e<CR>:'a,'z-1g\/=\/s\/\\xff\/=\/ge<CR>:'y,'zg\/=\/s\/ @\/\/eg<CR><SID>WE$/;"	m
<Plug>AlignMapsWrapperEnd	:call	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^nmap <silent> <script> <Plug>AlignMapsWrapperEnd	:call AlignMaps#WrapperEnd()<CR>:set nolz<CR>$/;"	m
<Plug>AlignMapsWrapperStart	:<c-u>set	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^vmap <silent> <script> <Plug>AlignMapsWrapperStart	:<c-u>set lz<CR>:call AlignMaps#WrapperStart(1)<CR>$/;"	m
<Plug>AlignMapsWrapperStart	:set	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^nmap <silent> <script> <Plug>AlignMapsWrapperStart	:set lz<CR>:call AlignMaps#WrapperStart(0)<CR>$/;"	m
<Plug>Csurround	C:\programs\gvim\vimfiles\plugin\surround.vim	/^nnoremap <silent> <Plug>Csurround  :<C-U>call <SID>changesurround()<CR>$/;"	m
<Plug>DirDiffGet	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^map <unique> <script> <Plug>DirDiffGet    :diffget<CR>$/;"	m
<Plug>DirDiffNext	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^map <unique> <script> <Plug>DirDiffNext    :call <SID>DirDiffNext()<CR>$/;"	m
<Plug>DirDiffPrev	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^map <unique> <script> <Plug>DirDiffPrev    :call <SID>DirDiffPrev()<CR>$/;"	m
<Plug>DirDiffPut	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^map <unique> <script> <Plug>DirDiffPut    :diffput<CR>$/;"	m
<Plug>DirDiffQuit	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^map <unique> <script> <Plug>DirDiffQuit    :call <SID>DirDiffQuit()<CR>$/;"	m
<Plug>Dsurround	C:\programs\gvim\vimfiles\plugin\surround.vim	/^nnoremap <silent> <Plug>Dsurround  :<C-U>call <SID>dosurround(<SID>inputtarget())<CR>$/;"	m
<Plug>ISurround	C:\programs\gvim\vimfiles\plugin\surround.vim	/^inoremap <silent> <Plug>ISurround  <C-R>=<SID>insert(1)<CR>$/;"	m
<Plug>Isurround	C:\programs\gvim\vimfiles\plugin\surround.vim	/^inoremap <silent> <Plug>Isurround  <C-R>=<SID>insert()<CR>$/;"	m
<Plug>ProjectOnly	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nnoremap <script> <Plug>ProjectOnly :call <SID>DoProjectOnly()<CR>$/;"	m
<Plug>RestoreWinPosn	:call	C:\programs\gvim\vimfiles\plugin\cecutil.vim	/^nmap <silent> <Plug>RestoreWinPosn	:call RestoreWinPosn()<CR>$/;"	m
<Plug>SaveWinPosn		:call	C:\programs\gvim\vimfiles\plugin\cecutil.vim	/^nmap <silent> <Plug>SaveWinPosn		:call SaveWinPosn()<CR>$/;"	m
<Plug>ToggleProject	C:\programs\gvim\vimfiles\plugin\project.vim	/^nnoremap <script> <Plug>ToggleProject :call <SID>DoToggleProject()<CR>$/;"	m
<Plug>VSurround	C:\programs\gvim\vimfiles\plugin\surround.vim	/^vnoremap <silent> <Plug>VSurround  :<C-U>call <SID>opfunc2(visualmode())<CR>$/;"	m
<Plug>Vsurround	C:\programs\gvim\vimfiles\plugin\surround.vim	/^vnoremap <silent> <Plug>Vsurround  :<C-U>call <SID>opfunc(visualmode())<CR>$/;"	m
<Plug>YSsurround	C:\programs\gvim\vimfiles\plugin\surround.vim	/^nnoremap <silent> <Plug>YSsurround :<C-U>call <SID>opfunc2(v:count1)<CR>$/;"	m
<Plug>YSurround	C:\programs\gvim\vimfiles\plugin\surround.vim	/^nnoremap <silent> <Plug>YSurround  :<C-U>set opfunc=<SID>opfunc2<CR>g@$/;"	m
<Plug>Yssurround	C:\programs\gvim\vimfiles\plugin\surround.vim	/^nnoremap <silent> <Plug>Yssurround :<C-U>call <SID>opfunc(v:count1)<CR>$/;"	m
<Plug>Ysurround	C:\programs\gvim\vimfiles\plugin\surround.vim	/^nnoremap <silent> <Plug>Ysurround  :<C-U>set opfunc=<SID>opfunc<CR>g@$/;"	m
<Return>	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nnoremap <buffer> <silent> <Return>   \\|:call <SID>DoFoldOrOpenEntry('', 'e')<CR>$/;"	m
<RightMouse>	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nmap     <buffer> <silent> <RightMouse>   <space>$/;"	m
<S-2-LeftMouse>	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nnoremap <buffer> <silent> <S-2-LeftMouse> \\|:call <SID>DoFoldOrOpenEntry('', 'sp')<CR>$/;"	m
<S-A-p>	C:\programs\gvim\vimfiles\plugin\fwk_ext_handler.vim	/^map <S-A-p> :call ExecuteSelfFileSpecial()<CR>$/;"	m
<S-LeftMouse>	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nnoremap <buffer> <silent> <S-LeftMouse>   <LeftMouse>$/;"	m
<S-Return>	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nnoremap <buffer> <silent> <S-Return> \\|:call <SID>DoFoldOrOpenEntry('', 'sp')<CR>$/;"	m
<SID>WE	<Plug>AlignMapsWrapperEnd	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^ nmap <unique> <SID>WE	<Plug>AlignMapsWrapperEnd$/;"	m
<SID>WS	<Plug>AlignMapsWrapperStart	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^ map <unique> <SID>WS	<Plug>AlignMapsWrapperStart$/;"	m
<SID>xx	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^    map <SID>xx <SID>xx$/;"	m
<c-n>	C:\programs\gvim\vimfiles\plugin\supertab.vim	/^  inoremap <c-n> <c-r>=<SID>SuperTab('n')<cr>$/;"	m
<c-p>	C:\programs\gvim\vimfiles\plugin\supertab.vim	/^  inoremap <c-p> <c-r>=<SID>SuperTab('p')<cr>$/;"	m
<c-r><tab>	C:\programs\gvim\vimfiles\after\plugin\snipMate.vim	/^ino <silent> <c-r><tab> <c-r>=ShowAvailableSnips()<cr>$/;"	m
<c-x>	C:\programs\gvim\vimfiles\plugin\supertab.vim	/^  imap <c-x> <c-r>=<SID>ManualCompletionEnter()<cr>$/;"	m
<leader>ca	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^        nmap <leader>ca <plug>NERDCommenterAltDelims$/;"	m
<plug>Dh	C:\programs\gvim\vimfiles\plugin\scmdiff.vim	/^noremap <unique> <script> <plug>Dh :call <SID>scmDiff("h")<CR>$/;"	m
<plug>NERDCommenterAlignBoth	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterAlignBoth :call NERDComment(0, "alignBoth")<cr>$/;"	m
<plug>NERDCommenterAlignBoth	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterAlignBoth <ESC>:call NERDComment(1, "alignBoth")<cr>$/;"	m
<plug>NERDCommenterAlignLeft	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterAlignLeft :call NERDComment(0, "alignLeft")<cr>$/;"	m
<plug>NERDCommenterAlignLeft	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterAlignLeft <ESC>:call NERDComment(1, "alignLeft")<cr>$/;"	m
<plug>NERDCommenterAltDelims	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^nnoremap <plug>NERDCommenterAltDelims :call <SID>SwitchToAlternativeDelimiters(1)<cr>$/;"	m
<plug>NERDCommenterAppend	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^nmap <silent> <plug>NERDCommenterAppend :call NERDComment(0, "append")<cr>$/;"	m
<plug>NERDCommenterComment	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterComment :call NERDComment(0, "norm")<cr>$/;"	m
<plug>NERDCommenterComment	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterComment <ESC>:call NERDComment(1, "norm")<cr>$/;"	m
<plug>NERDCommenterInInsert	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^inoremap <silent> <plug>NERDCommenterInInsert <SPACE><BS><ESC>:call NERDComment(0, "insert")<CR>$/;"	m
<plug>NERDCommenterInvert	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterInvert :call NERDComment(0, "invert")<CR>$/;"	m
<plug>NERDCommenterInvert	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterInvert <ESC>:call NERDComment(1, "invert")<CR>$/;"	m
<plug>NERDCommenterMinimal	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterMinimal :call NERDComment(0, "minimal")<cr>$/;"	m
<plug>NERDCommenterMinimal	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterMinimal <ESC>:call NERDComment(1, "minimal")<cr>$/;"	m
<plug>NERDCommenterNest	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterNest :call NERDComment(0, "nested")<cr>$/;"	m
<plug>NERDCommenterNest	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterNest <ESC>:call NERDComment(1, "nested")<cr>$/;"	m
<plug>NERDCommenterSexy	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterSexy :call NERDComment(0, "sexy")<CR>$/;"	m
<plug>NERDCommenterSexy	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterSexy <ESC>:call NERDComment(1, "sexy")<CR>$/;"	m
<plug>NERDCommenterToEOL	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterToEOL :call NERDComment(0, "toEOL")<cr>$/;"	m
<plug>NERDCommenterToggle	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterToggle :call NERDComment(0, "toggle")<cr>$/;"	m
<plug>NERDCommenterToggle	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterToggle <ESC>:call NERDComment(1, "toggle")<cr>$/;"	m
<plug>NERDCommenterUncomment	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterUncomment :call NERDComment(0, "uncomment")<cr>$/;"	m
<plug>NERDCommenterUncomment	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterUncomment :call NERDComment(1, "uncomment")<cr>$/;"	m
<plug>NERDCommenterYank	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^nmap <silent> <plug>NERDCommenterYank :call NERDComment(0, "yank")<CR>$/;"	m
<plug>NERDCommenterYank	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^vmap <silent> <plug>NERDCommenterYank <ESC>:call NERDComment(1, "yank")<CR>$/;"	m
<s-tab>	C:\programs\gvim\vimfiles\after\plugin\snipMate.vim	/^ino <silent> <s-tab> <c-r>=BackwardsSnippet()<cr>$/;"	m
<space>	C:\programs\gvim\vimfiles\plugin\project.vim	/^        nnoremap <buffer> <silent> <space>  \\|:silent exec 'vertical resize '.(match(g:proj_flags, '\\Ct')!=-1 && winwidth('.') > g:proj_window_width?(g:proj_window_width):(winwidth('.') + g:proj_window_increment))<CR>$/;"	m
<tab>	C:\programs\gvim\vimfiles\after\plugin\snipMate.vim	/^ino <silent> <tab> <c-r>=TriggerSnippet()<cr>$/;"	m
<tab>	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^imap <tab> <c-r>=InsertTabWrapper()<cr> $/;"	m
>	C:\programs\gvim\vimfiles\ftplugin\xml.vim	/^    inoremap <buffer> > <Esc>:call <SID>InsertGt()<Cr>$/;"	m
AcceptFile	C:\programs\gvim\vimfiles\autoload\lookupfile.vim	/^function! s:AcceptFile(splitWin, key)$/;"	f
AcpDisable	C:\programs\gvim\vimfiles\plugin\acp.vim	/^command! -bar -narg=0 AcpDisable call acp#disable()$/;"	c
AcpEnable	C:\programs\gvim\vimfiles\plugin\acp.vim	/^command! -bar -narg=0 AcpEnable  call acp#enable()$/;"	c
AcpLock	C:\programs\gvim\vimfiles\plugin\acp.vim	/^command! -bar -narg=0 AcpLock    call acp#lock()$/;"	c
AcpUnlock	C:\programs\gvim\vimfiles\plugin\acp.vim	/^command! -bar -narg=0 AcpUnlock  call acp#unlock()$/;"	c
AddLeftDelim	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:AddLeftDelim(delim, theLine)$/;"	f
AddLeftDelimAligned	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:AddLeftDelimAligned(delim, theLine, alignIndx)$/;"	f
AddPattern	C:\programs\gvim\vimfiles\autoload\lookupfile.vim	/^function! s:AddPattern()$/;"	f
AddRightDelim	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:AddRightDelim(delim, theLine)$/;"	f
AddRightDelimAligned	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:AddRightDelimAligned(delim, theLine, alignIndx)$/;"	f
AddToParent	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    public static void AddToParent(Hashtable map, String parent, String child) {$/;"	m	class:Reflection	access:public	signature:(Hashtable map, String parent, String child)
Agrep	C:\programs\gvim\vimfiles\plugin\grep.vim	/^command! -nargs=* -complete=file Agrep$/;"	c
AgrepAdd	C:\programs\gvim\vimfiles\plugin\grep.vim	/^command! -nargs=* -complete=file AgrepAdd$/;"	c
Agrep_Path	C:\programs\gvim\vimfiles\plugin\grep.vim	/^    let Agrep_Path = 'agrep'$/;"	v
Align	C:\programs\gvim\vimfiles\plugin\AlignPlugin.vim	/^com! -bang -range -nargs=* Align <line1>,<line2>call Align#Align(<bang>0,<q-args>)$/;"	c
Align#Align	C:\programs\gvim\vimfiles\autoload\Align.vim	/^fun! Align#Align(hasctrl,...) range$/;"	f
Align#AlignCtrl	C:\programs\gvim\vimfiles\autoload\Align.vim	/^fun! Align#AlignCtrl(...)$/;"	f
Align#AlignPop	C:\programs\gvim\vimfiles\autoload\Align.vim	/^fun! Align#AlignPop()$/;"	f
Align#AlignPush	C:\programs\gvim\vimfiles\autoload\Align.vim	/^fun! Align#AlignPush()$/;"	f
Align#AlignReplaceQuotedSpaces	C:\programs\gvim\vimfiles\autoload\Align.vim	/^fun! Align#AlignReplaceQuotedSpaces() $/;"	f
AlignCtrl	C:\programs\gvim\vimfiles\plugin\AlignPlugin.vim	/^com!              -nargs=* AlignCtrl call Align#AlignCtrl(<q-args>)$/;"	c
AlignMaps#Afnc	C:\programs\gvim\vimfiles\autoload\AlignMaps.vim	/^fun! AlignMaps#Afnc()$/;"	f
AlignMaps#CharJoiner	C:\programs\gvim\vimfiles\autoload\AlignMaps.vim	/^fun! AlignMaps#CharJoiner(chr)$/;"	f
AlignMaps#Equals	C:\programs\gvim\vimfiles\autoload\AlignMaps.vim	/^fun! AlignMaps#Equals() range$/;"	f
AlignMaps#FixMultiDec	C:\programs\gvim\vimfiles\autoload\AlignMaps.vim	/^fun! AlignMaps#FixMultiDec()$/;"	f
AlignMaps#StdAlign	C:\programs\gvim\vimfiles\autoload\AlignMaps.vim	/^fun! AlignMaps#StdAlign(mode) range$/;"	f
AlignMaps#WrapperEnd	C:\programs\gvim\vimfiles\autoload\AlignMaps.vim	/^fun! AlignMaps#WrapperEnd() range$/;"	f
AlignMaps#WrapperStart	C:\programs\gvim\vimfiles\autoload\AlignMaps.vim	/^fun! AlignMaps#WrapperStart(vis) range$/;"	f
AlignPop	C:\programs\gvim\vimfiles\plugin\AlignPlugin.vim	/^com!              -nargs=0 AlignPop  call Align#AlignPop()$/;"	c
AlignPush	C:\programs\gvim\vimfiles\plugin\AlignPlugin.vim	/^com!              -nargs=0 AlignPush call Align#AlignPush()$/;"	c
AlignReplaceQuotedSpaces	C:\programs\gvim\vimfiles\plugin\AlignPlugin.vim	/^com!       -range -nargs=0 AlignReplaceQuotedSpaces <line1>,<line2>call Align#AlignReplaceQuotedSpaces()$/;"	c
AltMultipart	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:AltMultipart()$/;"	f
AppendCommentToLine	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:AppendCommentToLine()$/;"	f
AreDiffWinsOpened	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^function! <SID>AreDiffWinsOpened()$/;"	f
ArrayAccess	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:ArrayAccess(arraytype, expr)$/;"	f
AskIfModified	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^function! <SID>AskIfModified()$/;"	f
Asyncer	C:\programs\gvim\vimfiles\autoload\l9\async.py	/^class Asyncer:$/;"	c	inherits:
AutoComplPopDisable	C:\programs\gvim\vimfiles\plugin\acp.vim	/^command! -bar -narg=0 AutoComplPopDisable AcpDisable$/;"	c
AutoComplPopEnable	C:\programs\gvim\vimfiles\plugin\acp.vim	/^command! -bar -narg=0 AutoComplPopEnable  AcpEnable$/;"	c
AutoComplPopLock	C:\programs\gvim\vimfiles\plugin\acp.vim	/^command! -bar -narg=0 AutoComplPopLock    AcpLock$/;"	c
AutoComplPopUnlock	C:\programs\gvim\vimfiles\plugin\acp.vim	/^command! -bar -narg=0 AutoComplPopUnlock  AcpUnlock$/;"	c
BackwardsSnippet	C:\programs\gvim\vimfiles\plugin\snipMate.vim	/^fun! BackwardsSnippet()$/;"	f
Bgrep	C:\programs\gvim\vimfiles\plugin\grep.vim	/^command! -nargs=* Bgrep$/;"	c
BgrepAdd	C:\programs\gvim\vimfiles\plugin\grep.vim	/^command! -nargs=* BgrepAdd$/;"	c
BinSearchToAppend	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! s:BinSearchToAppend(start, end, line, cmp, direction)$/;"	f
BinSearchToAppend2	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! s:BinSearchToAppend2(start, end, line, cmp, direction, accessor,$/;"	f
Binary	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:Binary(pos, opcode, lhs, rhs, ...)$/;"	f
BitAnd	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:BitAnd(n1, n2)$/;"	f
BitMoveLeft	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:BitMoveLeft()$/;"	f
BitMoveRight	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:BitMoveRight()$/;"	f
BitNot	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:BitNot(v)$/;"	f
BitNot_binary	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:BitNot_binary(v)$/;"	f
BitOperator_binary	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:BitOperator_binary(n1, n2, comparator)$/;"	f
BitOr	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:BitOr(n1, n2, ...)$/;"	f
BitXor	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:BitXor(n1, n2)$/;"	f
Bits2Number	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:Bits2Number(bits)$/;"	f
BufHidden	C:\programs\gvim\vimfiles\plugin\bufReminderRemake.vim	/^function BufHidden(bufnr)$/;"	f
BufLineAccessor	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! s:BufLineAccessor(line, context)$/;"	f
BufLineMover	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! s:BufLineMover(from, to, context)$/;"	f
BufLineSwapper	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! s:BufLineSwapper(line1, line2, context)$/;"	f
BufPos_ActivateBuffer	C:\programs\gvim\vimfiles\plugin\bufpos.vim	/^function! BufPos_ActivateBuffer(num)$/;"	f
BufPos_Initialize	C:\programs\gvim\vimfiles\plugin\bufpos.vim	/^function! BufPos_Initialize()$/;"	f
BufReminderRMX_BuffNameFilter	C:\programs\gvim\vimfiles\plugin\bufReminderRemake.vim	/^func! BufReminderRMX_BuffNameFilter(buff_name)$/;"	f
BufReminderRMX_CentrilizeWindow	C:\programs\gvim\vimfiles\plugin\bufReminderRemake.vim	/^func! BufReminderRMX_CentrilizeWindow()$/;"	f
BufReminderRMX_GetActualfBuffInfo	C:\programs\gvim\vimfiles\plugin\bufReminderRemake.vim	/^func! BufReminderRMX_GetActualfBuffInfo()$/;"	f
BufReminderRMX_LoadEvent	C:\programs\gvim\vimfiles\plugin\bufReminderRemake.vim	/^func! BufReminderRMX_LoadEvent()$/;"	f
BufReminderRMX_LoadPersistency	C:\programs\gvim\vimfiles\plugin\bufReminderRemake.vim	/^func! BufReminderRMX_LoadPersistency() "function to save buffers persistency information$/;"	f
BufReminderRMX_OpenBuffer	C:\programs\gvim\vimfiles\plugin\bufReminderRemake.vim	/^func BufReminderRMX_OpenBuffer(fName, mode, win_id)$/;"	f
BufReminderRMX_OpenBuffersInList	C:\programs\gvim\vimfiles\plugin\bufReminderRemake.vim	/^func! BufReminderRMX_OpenBuffersInList()$/;"	f
BufReminderRMX_RemovePersFile	C:\programs\gvim\vimfiles\plugin\bufReminderRemake.vim	/^func! BufReminderRMX_RemovePersFile()$/;"	f
BufReminderRMX_SaveElementInList	C:\programs\gvim\vimfiles\plugin\bufReminderRemake.vim	/^func! BufReminderRMX_SaveElementInList(tab_id, buff_info, tab_wins_info)$/;"	f
BufReminderRMX_SaveEvent	C:\programs\gvim\vimfiles\plugin\bufReminderRemake.vim	/^func! BufReminderRMX_SaveEvent()$/;"	f
BufReminderRMX_SavePersistency	C:\programs\gvim\vimfiles\plugin\bufReminderRemake.vim	/^func! BufReminderRMX_SavePersistency() "function to save buffers persistency information$/;"	f
BufReminderRMX_getHiddenBuffers	C:\programs\gvim\vimfiles\plugin\bufReminderRemake.vim	/^func! BufReminderRMX_getHiddenBuffers()$/;"	f
BufReminderRMX_getTab0_CurrentTabPos	C:\programs\gvim\vimfiles\plugin\bufReminderRemake.vim	/^func! BufReminderRMX_getTab0_CurrentTabPos()$/;"	f
BufReminderRMX_isItemInList	C:\programs\gvim\vimfiles\plugin\bufReminderRemake.vim	/^func! BufReminderRMX_isItemInList(lst, buff_name)$/;"	f
BufReminderRMX_reloadView	C:\programs\gvim\vimfiles\plugin\bufReminderRemake.vim	/^fun! BufReminderRMX_reloadView()$/;"	f
BufReminderRMX_saveHiddenBuffers	C:\programs\gvim\vimfiles\plugin\bufReminderRemake.vim	/^func! BufReminderRMX_saveHiddenBuffers()$/;"	f
BufReminderRMX_winrestcmd	C:\programs\gvim\vimfiles\plugin\bufReminderRemake.vim	/^func! BufReminderRMX_winrestcmd(win_index, height, width)$/;"	f
BufRemionderRMX_ClearList	C:\programs\gvim\vimfiles\plugin\bufReminderRemake.vim	/^func! BufRemionderRMX_ClearList()$/;"	f
BuildContextStack	C:\programs\gvim\vimfiles\autoload\omni\cpp\namespaces.vim	/^function! s:BuildContextStack(namespaces, szCurrentScope)$/;"	f
BuildTabStops	C:\programs\gvim\vimfiles\autoload\snipMate.vim	/^fun s:BuildTabStops(snip, lnum, col, indent)$/;"	f
BuildTagName	C:\programs\gvim\vimfiles\ftplugin\xml.vim	/^function s:BuildTagName( )$/;"	f
CSharpAlign	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^func! CSharpAlign() $/;"	f
CallFindPattern	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\maps_regex.vim	/^func CallFindPattern()$/;"	f
Callback	C:\programs\gvim\vimfiles\ftplugin\xml.vim	/^function s:Callback( xml_tag, isHtml )$/;"	f
CanAccess	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:CanAccess(mods, kind)$/;"	f
CanCommentLine	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:CanCommentLine(forceNested, lineNum)$/;"	f
CanPlaceCursor	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:CanPlaceCursor(line, col)$/;"	f
CanSexyCommentLines	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:CanSexyCommentLines(topline, bottomline)$/;"	f
CanToggleCommentLine	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:CanToggleCommentLine(forceNested, lineNum)$/;"	f
CanUseOmnicompletion	C:\programs\gvim\vimfiles\autoload\omni\cpp\maycomplete.vim	/^function! s:CanUseOmnicompletion()$/;"	f
ChangeArguments	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^function! <SID>ChangeArguments()$/;"	f
ChangeExcludes	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^function! <SID>ChangeExcludes()$/;"	f
ChangeIgnore	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^function! <SID>ChangeIgnore()$/;"	f
Char2Num	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! s:Char2Num(c)$/;"	f
ChgDir	C:\programs\gvim\vimfiles\autoload\vimball.vim	/^fun! s:ChgDir(newdir)$/;"	f
ChooseSnippet	C:\programs\gvim\vimfiles\plugin\snipMate.vim	/^fun s:ChooseSnippet(scope, trigger)$/;"	f
ClassDef	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:ClassDef(pos, mods, ...)$/;"	f
ClearJumpMarks	C:\programs\gvim\vimfiles\ftplugin\xml.vim	/^function s:ClearJumpMarks( )$/;"	f
Close	C:\programs\gvim\vimfiles\ftplugin\html_snip_helper.vim	/^fun! Close()$/;"	f
CloseDiffWindows	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^function! <SID>CloseDiffWindows()$/;"	f
CmpByName	C:\programs\gvim\vimfiles\autoload\lookupfile.vim	/^function! s:CmpByName(i1, i2)$/;"	f
CommandLineCompletion	C:\programs\gvim\vimfiles\plugin\supertab.vim	/^function! s:CommandLineCompletion()$/;"	f
CommentBlock	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:CommentBlock(top, bottom, lSide, rSide, forceNested )$/;"	f
CommentLines	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:CommentLines(forceNested, align, firstLine, lastLine)$/;"	f
CommentLinesMinimal	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:CommentLinesMinimal(firstLine, lastLine)$/;"	f
CommentLinesSexy	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:CommentLinesSexy(topline, bottomline)$/;"	f
CommentLinesToggle	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:CommentLinesToggle(forceNested, firstLine, lastLine)$/;"	f
CommentRegion	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:CommentRegion(topLine, topCol, bottomLine, bottomCol, forceNested)$/;"	f
CompileRunGcc	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^func! CompileRunGcc() $/;"	f
CompleteAfterDot	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^function! s:CompleteAfterDot(expr)$/;"	f
CompleteAfterWord	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:CompleteAfterWord(incomplete)$/;"	f
ConstructInfo	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! s:ConstructInfo(home, c_d, scriptin, scriptout, flags, filter)$/;"	f
ContextCompletion	C:\programs\gvim\vimfiles\plugin\supertab.vim	/^function! s:ContextCompletion()$/;"	f
ContextDiscover	C:\programs\gvim\vimfiles\plugin\supertab.vim	/^function! s:ContextDiscover()$/;"	f
ContextText	C:\programs\gvim\vimfiles\plugin\supertab.vim	/^function! s:ContextText()$/;"	f
ConvertLeadingSpacesToTabs	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:ConvertLeadingSpacesToTabs(line)$/;"	f
ConvertLeadingTabsToSpaces	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:ConvertLeadingTabsToSpaces(line)$/;"	f
ConvertLeadingWhiteSpace	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:ConvertLeadingWhiteSpace(line)$/;"	f
Copy	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^function! <SID>Copy(fileFromOrig, fileToOrig)$/;"	f
Count	C:\programs\gvim\vimfiles\autoload\snipMate.vim	/^fun s:Count(haystack, needle)$/;"	f
CountDims	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:CountDims(str)$/;"	f
CountNonESCedOccurances	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:CountNonESCedOccurances(str, searchstr, escChar)$/;"	f
CreateDelimMapFromCms	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:CreateDelimMapFromCms()$/;"	f
CreateEntriesFromDir	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! CreateEntriesFromDir(recursive, arg_name, arg_dir, arg_c_d, arg_filter_directive)$/;"	f
CreateEntriesFromDir	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! s:CreateEntriesFromDir(recursive)$/;"	f
CreateMaps	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function! s:CreateMaps(target, combo)$/;"	f
CreateMenuItems	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^    function! s:CreateMenuItems(target, desc, root)$/;"	f
CursorBufferManipulation	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^func! CursorBufferManipulation(cursorManipulation) $/;"	f
D	C:\programs\gvim\vimfiles\plugin\scmdiff.vim	/^com! -bar -nargs=? D :call s:scmDiff(<f-args>)$/;"	c
DM	C:\programs\gvim\vimfiles\plugin\cecutil.vim	/^com! -bar -nargs=1 DM	call DestroyMark(<q-args>)$/;"	c
DeHighlightLine	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^function! <SID>DeHighlightLine()$/;"	f
Debug	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:Debug(msg)$/;"	f
Debug	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:Debug(msg)$/;"	f
Decho	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^com! -nargs=+ -complete=expression Decho	call Decho(<args>) $/;"	c
Decho	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^fun! Decho(...) $/;"	f
DechoDepth	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^fun! DechoDepth(depth) $/;"	f
DechoMsg	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^fun! s:DechoMsg(onoff,...) $/;"	f
DechoMsgOff	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^com! -nargs=0 DechoMsgOff					call s:DechoMsg(0) $/;"	c
DechoMsgOn	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^com! -nargs=0 DechoMsgOn					call s:DechoMsg(1,expand("<sfile>")) $/;"	c
DechoOff	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^com! -nargs=0 -range=% DechoOff				call DechoOff(<line1>,<line2>) $/;"	c
DechoOff	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^fun! DechoOff(line1,line2) $/;"	f
DechoOn	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^com! -nargs=0 -range=% DechoOn				call DechoOn(<line1>,<line2>) $/;"	c
DechoOn	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^fun! DechoOn(line1,line2) $/;"	f
DechoPause	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^com! -nargs=0 DechoPause					call DechoPause() $/;"	c
DechoPause	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^fun! DechoPause() $/;"	f
DechoRemOff	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^ com! -nargs=0 DechoRemOff					call s:DechoRemote(0) $/;"	c
DechoRemOn	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^ com! -nargs=0 DechoRemOn					call s:DechoRemote(1,expand("<sfile>")) $/;"	c
DechoRemote	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^ fun! s:DechoRemote(mode,...) $/;"	f
DechoSep	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^com! -nargs=? DechoSep						call DechoSep(<args>) $/;"	c
DechoSep	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^fun! DechoSep(...) $/;"	f
DechoTab	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^ fun! s:DechoTab(mode,...) $/;"	f
DechoTabOff	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^ com! -nargs=? DechoTabOff                  set lz|call s:DechoTab(0)|set nolz $/;"	c
DechoTabOn	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^ com! -nargs=? DechoTabOn                   set lz|call s:DechoTab(1,expand("<sfile>"))|set nolz $/;"	c
DechoVarOff	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^com! -nargs=0 DechoVarOff					call s:DechoVarOff() $/;"	c
DechoVarOff	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^fun! s:DechoVarOff() $/;"	f
DechoVarOn	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^com! -nargs=? DechoVarOn					call s:DechoVarOn(expand("<sfile>"),<args>) $/;"	c
DechoVarOn	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^fun! s:DechoVarOn(...) $/;"	f
DefineSnips	C:\programs\gvim\vimfiles\plugin\snipMate.vim	/^fun s:DefineSnips(dir, aliasft, realft)$/;"	f
Delete	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^function! <SID>Delete(fileFromOrig)$/;"	f
DeleteTag	C:\programs\gvim\vimfiles\ftplugin\xml.vim	/^function s:DeleteTag( )$/;"	f
DestroyMark	C:\programs\gvim\vimfiles\plugin\cecutil.vim	/^fun! DestroyMark(markname)$/;"	f
DetermineMethod	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:DetermineMethod(methods, parameters)$/;"	f
Dfunc	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^fun! Dfunc(...) $/;"	f
Dhide	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^com! -nargs=0 Dhide    						call s:Dhide(1) $/;"	c
Dhide	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^fun! <SID>Dhide(hide) $/;"	f
DiffTwoRegisters	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^func! DiffTwoRegisters(registerA, registerB, command) $/;"	f
DirDiff	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^command! -nargs=* -complete=dir DirDiff call <SID>DirDiff (<f-args>)$/;"	c
DirDiff	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^function! <SID>DirDiff(srcA, srcB)$/;"	f
DirDiffExec	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^function! <SID>DirDiffExec(cmd, interactive)$/;"	f
DirDiffNext	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^command! -nargs=0 DirDiffNext call <SID>DirDiffNext ()$/;"	c
DirDiffNext	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^function! <SID>DirDiffNext()$/;"	f
DirDiffOpen	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^command! -nargs=0 DirDiffOpen call <SID>DirDiffOpen ()$/;"	c
DirDiffOpen	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^function! <SID>DirDiffOpen()$/;"	f
DirDiffPrev	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^command! -nargs=0 DirDiffPrev call <SID>DirDiffPrev ()$/;"	c
DirDiffPrev	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^function! <SID>DirDiffPrev()$/;"	f
DirDiffQuit	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^command! -nargs=0 DirDiffQuit call <SID>DirDiffQuit ()$/;"	c
DirDiffQuit	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^function! <SID>DirDiffQuit()$/;"	f
DirDiffSync	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^function! <SID>DirDiffSync() range$/;"	f
DirDiffSyncHelper	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^function! <SID>DirDiffSyncHelper(AB, line)$/;"	f
DirDiffUpdate	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^command! -nargs=0 DirDiffUpdate call <SID>DirDiffUpdate ()$/;"	c
DirDiffUpdate	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^function! <SID>DirDiffUpdate()$/;"	f
DisplayIncludeTree	C:\programs\gvim\vimfiles\autoload\omni\cpp\includes.vim	/^function! s:DisplayIncludeTree(szFilePath, indent, ...)$/;"	f
DisplayInfo	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! s:DisplayInfo()$/;"	f
DoEnsurePlacementSize_au	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! s:DoEnsurePlacementSize_au()$/;"	f
DoEntryFromDir	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! s:DoEntryFromDir(recursive, line, name, absolute_dir, dir, c_d, filter_directive, filter, foldlev, sort)$/;"	f
DoFoldOrOpenEntry	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! s:DoFoldOrOpenEntry(cmd0, cmd1)$/;"	f
DoGetClassInfo	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:DoGetClassInfo(class, ...)$/;"	f
DoGetClassInfoFromTags	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^function! s:DoGetClassInfoFromTags(class)$/;"	f
DoGetFieldList	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:DoGetFieldList(fields)$/;"	f
DoGetInfoByReflection	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:DoGetInfoByReflection(class, option)$/;"	f
DoGetMemberList	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:DoGetMemberList(ci, kind)$/;"	f
DoGetMethodList	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:DoGetMethodList(methods, ...)$/;"	f
DoGetPackageInfoInDirs	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:DoGetPackageInfoInDirs(package, onlyPackages, ...)$/;"	f
DoGetReflectionClassInfo	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^function! s:DoGetReflectionClassInfo(fqn)$/;"	f
DoGetTypeInfoForFQN	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:DoGetTypeInfoForFQN(fqns, srcpath, ...)$/;"	f
DoProjectOnly	C:\programs\gvim\vimfiles\plugin\project.vim	/^        function! s:DoProjectOnly()$/;"	f
DoSetup	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! s:DoSetup()$/;"	f
DoSetupAndSplit	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! s:DoSetupAndSplit()$/;"	f
DoSetupAndSplit_au	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! s:DoSetupAndSplit_au()$/;"	f
DoToggleProject	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! s:DoToggleProject()$/;"	f
DoesBlockHaveDelim	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:DoesBlockHaveDelim(delim, top, bottom)$/;"	f
DoesBlockHaveMultipartDelim	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:DoesBlockHaveMultipartDelim(top, bottom)$/;"	f
Dredir	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^com! -nargs=+ -complete=expression Dredir	call Dredir(<args>) $/;"	c
Dredir	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^fun! Dredir(...) $/;"	f
Dret	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^fun! Dret(...) $/;"	f
Dsep	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^com! -nargs=? Dsep						    call DechoSep(<args>) $/;"	c
Dshow	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^com! -nargs=0 Dshow    						call s:Dhide(0) $/;"	c
EditFromJump	C:\programs\gvim\vimfiles\ftplugin\xml.vim	/^function s:EditFromJump( )$/;"	f
Egrep	C:\programs\gvim\vimfiles\plugin\grep.vim	/^command! -nargs=* -complete=file Egrep$/;"	c
EgrepAdd	C:\programs\gvim\vimfiles\plugin\grep.vim	/^command! -nargs=* -complete=file EgrepAdd$/;"	c
Egrep_Path	C:\programs\gvim\vimfiles\plugin\grep.vim	/^    let Egrep_Path = 'egrep'$/;"	v
Esc	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:Esc(str)$/;"	f
Escape	C:\programs\gvim\vimfiles\autoload\vimball.vim	/^fun s:Escape(name)$/;"	f
EscapeDirForRegex	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^function! <SID>EscapeDirForRegex(path)$/;"	f
ExecWinCmdNoEa	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! s:ExecWinCmdNoEa(winCmd)$/;"	f
ExecuteSelfFile	C:\programs\gvim\vimfiles\plugin\fwk_ext_handler.vim	/^function ExecuteSelfFile(...)$/;"	f
ExecuteSelfFileMain	C:\programs\gvim\vimfiles\plugin\fwk_ext_handler.vim	/^function! ExecuteSelfFileMain(special_opt, ...) $/;"	f
ExecuteSelfFileMainLinux	C:\programs\gvim\vimfiles\plugin\fwk_ext_handler.vim	/^function! ExecuteSelfFileMainLinux(special_opt, ...) $/;"	f
ExecuteSelfFileSpecial	C:\programs\gvim\vimfiles\plugin\fwk_ext_handler.vim	/^function ExecuteSelfFileSpecial(...)$/;"	f
Executor	C:\programs\gvim\vimfiles\autoload\l9\async.py	/^class Executor:$/;"	c	inherits:
ExtendTagItemToPopupItem	C:\programs\gvim\vimfiles\autoload\omni\cpp\complete.vim	/^function! s:ExtendTagItemToPopupItem(tagItem, szTypeName)$/;"	f
ExtractCleanExpr	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:ExtractCleanExpr(expr)$/;"	f
ExtractScopeFromTypeInfo	C:\programs\gvim\vimfiles\autoload\omni\cpp\utils.vim	/^function! s:ExtractScopeFromTypeInfo(szTypeInfo)$/;"	f
ExtractSnips	C:\programs\gvim\vimfiles\plugin\snipMate.vim	/^fun! ExtractSnips(dir, ft)$/;"	f
ExtractSnipsFile	C:\programs\gvim\vimfiles\plugin\snipMate.vim	/^fun! ExtractSnipsFile(file, ft)$/;"	f
ExtractTypeInfoFromDecl	C:\programs\gvim\vimfiles\autoload\omni\cpp\items.vim	/^function! s:ExtractTypeInfoFromDecl(tokens)$/;"	f
FWK_Book_Mode	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^func FWK_Book_Mode(mode)$/;"	f
FWK_Buf_Substitute	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^function FWK_Buf_Substitute(pat)$/;"	f
FWK_CSpace	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^func FWK_CSpace(numb)$/;"	f
FWK_CloseBufferSafe	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^func FWK_CloseBufferSafe(buffer_Number, ... )$/;"	f
FWK_EnableSyntax	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^func FWK_EnableSyntax(syn_types)$/;"	f
FWK_Error	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^function FWK_Error(message)$/;"	f
FWK_ExampleRegExPlusIncrement	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^func FWK_ExampleRegExPlusIncrement()$/;"	f
FWK_Extention_Switch	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^func FWK_Extention_Switch(mode)$/;"	f
FWK_File_RestorePrevCD	C:\programs\gvim\vimfiles\plugin\fwk_experemental.vim	/^func FWK_File_RestorePrevCD()$/;"	f
FWK_File_SavePrevCD	C:\programs\gvim\vimfiles\plugin\fwk_experemental.vim	/^func FWK_File_SavePrevCD()$/;"	f
FWK_Forme_String_With_Spaces	C:\programs\gvim\vimfiles\plugin\fwk_notes.vim	/^func FWK_Forme_String_With_Spaces(symbol, pattern)$/;"	f
FWK_Grep_Alias	C:\programs\gvim\vimfiles\plugin\grep.vim	/^func! FWK_Grep_Alias(...)$/;"	f
FWK_Grep_getExcludeString	C:\programs\gvim\vimfiles\plugin\grep.vim	/^func! FWK_Grep_getExcludeString()$/;"	f
FWK_IsBeginOfLine	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^func FWK_IsBeginOfLine()$/;"	f
FWK_Language_French_Mode	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\french_language_addon.vim	/^func FWK_Language_French_Mode()$/;"	f
FWK_Move_Operation	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^func FWK_Move_Operation(x, y)$/;"	f
FWK_Note_LoadNotes	C:\programs\gvim\vimfiles\plugin\fwk_notes.vim	/^func FWK_Note_LoadNotes(...)$/;"	f
FWK_Note_Mark_Regex_Char	C:\programs\gvim\vimfiles\plugin\fwk_notes.vim	/^func FWK_Note_Mark_Regex_Char(symbol)$/;"	f
FWK_Note_Mark_Regex_comment_new	C:\programs\gvim\vimfiles\plugin\fwk_notes.vim	/^func FWK_Note_Mark_Regex_comment_new()$/;"	f
FWK_Note_Mark_Regex_new_part	C:\programs\gvim\vimfiles\plugin\fwk_notes.vim	/^func FWK_Note_Mark_Regex_new_part()$/;"	f
FWK_Note_Mark_Regex_w_new	C:\programs\gvim\vimfiles\plugin\fwk_notes.vim	/^func FWK_Note_Mark_Regex_w_new(pattern)$/;"	f
FWK_Note_Mark_Regex_w_new_recours_search	C:\programs\gvim\vimfiles\plugin\fwk_notes.vim	/^func FWK_Note_Mark_Regex_w_new_recours_search(pat, direction)$/;"	f
FWK_Note_Mark_getNumbLine	C:\programs\gvim\vimfiles\plugin\fwk_notes.vim	/^func FWK_Note_Mark_getNumbLine ( symbol, pattern )$/;"	f
FWK_Note_Mark_moveCursOneLine	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^func FWK_Note_Mark_moveCursOneLine( pos_direct )$/;"	f
FWK_Note_MoveToTags	C:\programs\gvim\vimfiles\plugin\fwk_notes.vim	/^func FWK_Note_MoveToTags(direction)$/;"	f
FWK_Note_Navigation	C:\programs\gvim\vimfiles\plugin\fwk_notes.vim	/^func FWK_Note_Navigation(action_type)$/;"	f
FWK_Note_Navigation_convert_numb_to_twobyte	C:\programs\gvim\vimfiles\plugin\fwk_notes.vim	/^func FWK_Note_Navigation_convert_numb_to_twobyte(variable)$/;"	f
FWK_Note_Navigation_search_in_month	C:\programs\gvim\vimfiles\plugin\fwk_notes.vim	/^func FWK_Note_Navigation_search_in_month(path_bgn, cur_local_day, path_end, action_type)$/;"	f
FWK_Note_NotesMaps	C:\programs\gvim\vimfiles\plugin\fwk_notes.vim	/^func FWK_Note_NotesMaps()$/;"	f
FWK_Note_NotesMapsGlobal	C:\programs\gvim\vimfiles\plugin\fwk_notes.vim	/^func FWK_Note_NotesMapsGlobal()$/;"	f
FWK_Note_Notifyer_Wrapper	C:\programs\gvim\vimfiles\plugin\fwk_notes.vim	/^func FWK_Note_Notifyer_Wrapper(message, time)$/;"	f
FWK_Note_SetFeminine	C:\programs\gvim\vimfiles\plugin\fwk_notes.vim	/^func FWK_Note_SetFeminine()$/;"	f
FWK_Note_addWildcardBeforeText	C:\programs\gvim\vimfiles\plugin\fwk_notes.vim	/^func FWK_Note_addWildcardBeforeText(strToPut)$/;"	f
FWK_Note_create	C:\programs\gvim\vimfiles\plugin\fwk_notes.vim	/^func FWK_Note_create(type, mode)$/;"	f
FWK_Note_create_dynamic	C:\programs\gvim\vimfiles\plugin\fwk_notes.vim	/^func FWK_Note_create_dynamic(type)$/;"	f
FWK_Note_create_special	C:\programs\gvim\vimfiles\plugin\fwk_notes.vim	/^func FWK_Note_create_special(type)$/;"	f
FWK_Note_create_static	C:\programs\gvim\vimfiles\plugin\fwk_notes.vim	/^func FWK_Note_create_static(type)$/;"	f
FWK_Note_setColorMark	C:\programs\gvim\vimfiles\plugin\fwk_notes.vim	/^func FWK_Note_setColorMark(mark_type)$/;"	f
FWK_Project_Addon_refresh_path	C:\programs\gvim\vimfiles\plugin\fwk_project_addon.vim	/^function FWK_Project_Addon_refresh_path()$/;"	f
FWK_SwitchFromHeaderToCpp	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^func FWK_SwitchFromHeaderToCpp(mode)$/;"	f
FWK_System_AddSlash	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^func FWK_System_AddSlash(variable)$/;"	f
FWK_System_AddSlashToSpace	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^func FWK_System_AddSlashToSpace(variable)$/;"	f
FWK_System_Dot_MayComplete	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^func FWK_System_Dot_MayComplete()$/;"	f
FWK_System_FilTemplate	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^function FWK_System_FilTemplate(template, mark_name, mark_value)$/;"	f
FWK_System_Fuf_browse	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^func FWK_System_Fuf_browse(path_to_open)$/;"	f
FWK_System_IsWin32Platform	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^function FWK_System_IsWin32Platform()$/;"	f
FWK_System_modify_list	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^function FWK_System_modify_list(list_to_modify, dict_with_patterns)$/;"	f
FWK_System_readFile	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^function FWK_System_readFile(file_to_open)$/;"	f
FWK_System_writeFile	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^function FWK_System_writeFile(list_to_save, file_to_save)$/;"	f
FWK__open_log_file	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^function FWK__open_log_file()$/;"	f
FWK_copyTemplate	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^function FWK_copyTemplate(loadTemplateFileName, saveFileName, dict_Patterns)  $/;"	f
FWK_fontZoomInOut	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^func FWK_fontZoomInOut(number)$/;"	f
FWK_genTagsByPath	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\ctagslogic.vim	/^func FWK_genTagsByPath(...)$/;"	f
FWK_genTagsMap	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\ctagslogic.vim	/^func FWK_genTagsMap(map_keys, ...)$/;"	f
FWK_generateCtags	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^func FWK_generateCtags(project_t)$/;"	f
FWK_getCurrPos	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^func FWK_getCurrPos()$/;"	f
FWK_get_Variable	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^func! FWK_get_Variable(pattern) $/;"	f
FWK_get_defined_patterns	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^function FWK_get_defined_patterns(pattern) $/;"	f
FWK_openWindow	C:\programs\gvim\vimfiles\plugin\fwk_tab_aranger.vim	/^func FWK_openWindow( file_path )$/;"	f
FWK_open_quick_fix_not_jump	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^func FWK_open_quick_fix_not_jump()$/;"	f
FWK_open_tag_in_split	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^function FWK_open_tag_in_split()$/;"	f
FWK_openlink_log_openErrorfile	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^function FWK_openlink_log_openErrorfile()$/;"	f
FWK_pasteDoubleQuote	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^func FWK_pasteDoubleQuote(t_symbol_open, t_symbol_close)$/;"	f
FWK_pasteDoubleQuote_init_map	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^func FWK_pasteDoubleQuote_init_map(t_symbol_open, t_symbol_close)$/;"	f
FWK_runCmd	C:\programs\gvim\vimfiles\plugin\fwk_experemental.vim	/^func FWK_runCmd(path_to_file)$/;"	f
FWK_runScriptParse	C:\programs\gvim\vimfiles\plugin\fwk_buildrun.vim	/^function FWK_runScriptParse()$/;"	f
FWK_setCurrPos	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^func FWK_setCurrPos(fwk_pos)$/;"	f
FWK_setTags	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\ctagslogic.vim	/^func FWK_setTags(...)$/;"	f
FWK_show_patterns_in_file	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^function FWK_show_patterns_in_file(filter_type, path_to_log)$/;"	f
Fgrep	C:\programs\gvim\vimfiles\plugin\grep.vim	/^command! -nargs=* -complete=file Fgrep$/;"	c
FgrepAdd	C:\programs\gvim\vimfiles\plugin\grep.vim	/^command! -nargs=* -complete=file FgrepAdd$/;"	c
Fgrep_Path	C:\programs\gvim\vimfiles\plugin\grep.vim	/^    let Fgrep_Path = 'fgrep'$/;"	v
Filename	C:\programs\gvim\vimfiles\autoload\snipMate.vim	/^fun! Filename(...)$/;"	f
FilterClassMembers	C:\programs\gvim\vimfiles\autoload\omni\cpp\complete.vim	/^function! s:FilterClassMembers(tagPopupList, szAccessFilter)$/;"	f
FilterClassScopeMembers	C:\programs\gvim\vimfiles\autoload\omni\cpp\complete.vim	/^function! s:FilterClassScopeMembers(tagPopupList, szAccessFilter)$/;"	f
FilterNamespaceScopeMembers	C:\programs\gvim\vimfiles\autoload\omni\cpp\complete.vim	/^function! s:FilterNamespaceScopeMembers(tagPopupList)$/;"	f
FilterOverloadedFunctions	C:\programs\gvim\vimfiles\autoload\omni\cpp\complete.vim	/^function! s:FilterOverloadedFunctions(tagPopupList)$/;"	f
FilterStaticClassMembers	C:\programs\gvim\vimfiles\autoload\omni\cpp\complete.vim	/^function! s:FilterStaticClassMembers(tagPopupList, szAccessFilter)$/;"	f
FindBoundingLinesOfSexyCom	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:FindBoundingLinesOfSexyCom(lineNum)$/;"	f
FindBufferForName	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! s:FindBufferForName(fileName)$/;"	f
FindDelimiterIndex	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:FindDelimiterIndex(delimiter, line)$/;"	f
FindFoldBottom	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! s:FindFoldBottom(line)$/;"	f
FindFoldTop	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! s:FindFoldTop(line)$/;"	f
FindMakefileOrJamroot	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^function! FindMakefileOrJamroot() $/;"	f
FindStartPositionOfCompletion	C:\programs\gvim\vimfiles\autoload\omni\cpp\complete.vim	/^function! s:FindStartPositionOfCompletion()$/;"	f
FixPathSep	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! s:FixPathSep(matches, opathsep, npathsep)$/;"	f
FoldLocalCommands	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^command! -n=1 FoldLocalCommands :call s:FoldLocalCommands('<args>')$/;"	c
FoldLocalCommands	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^func s:FoldLocalCommands(options)$/;"	f
FormatScreen	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^func! FormatScreen() $/;"	f
FormatStringWithCloser	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^func! FormatStringWithCloser(pattern) $/;"	f
FoundClassDeclaration	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^function! s:FoundClassDeclaration(type)$/;"	f
FoundClassLocally	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:FoundClassLocally(type)$/;"	f
FwkNoteDynamic	C:\programs\gvim\vimfiles\plugin\fwk_notes.vim	/^command! -n=1 FwkNoteDynamic :call FWK_Note_create_dynamic('<args>')$/;"	c
FwkNoteStatic	C:\programs\gvim\vimfiles\plugin\fwk_notes.vim	/^command! -n=1 FwkNoteStatic  :call FWK_Note_create_static('<args>')$/;"	c
Fwk_bookmarks_marks_loadMark	C:\programs\gvim\vimfiles\plugin\fwk_marks.vim	/^function s:Fwk_bookmarks_marks_loadMark(mark, mode)$/;"	f
Fwk_bookmarks_marks_saveMark	C:\programs\gvim\vimfiles\plugin\fwk_marks.vim	/^function s:Fwk_bookmarks_marks_saveMark(mark)$/;"	f
GFforTabs	C:\programs\gvim\vimfiles\plugin\fwk_tab_aranger.vim	/^command! -n=? -complete=dir GFforTabs :call s:GfEmulatorForTabs()$/;"	c
GUDebugEcho	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^command! -complete=file -nargs=* GUDebugEcho :echo <q-args>$/;"	c
GenerateEntry	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! s:GenerateEntry(recursive, line, name, absolute_dir, dir, c_d, filter_directive, filter, foldlev, sort)$/;"	f
GenerateImports	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^function! s:GenerateImports()$/;"	f
GetAccessFilter	C:\programs\gvim\vimfiles\autoload\omni\cpp\complete.vim	/^function! s:GetAccessFilter(szFilter, szAccessFilter)$/;"	f
GetAllUsingNamespaceMapFromCurrentBuffer	C:\programs\gvim\vimfiles\autoload\omni\cpp\namespaces.vim	/^function! s:GetAllUsingNamespaceMapFromCurrentBuffer(...)$/;"	f
GetAllUsingNamespaceMapFromFile	C:\programs\gvim\vimfiles\autoload\omni\cpp\namespaces.vim	/^function! s:GetAllUsingNamespaceMapFromFile(szFilePath, ...)$/;"	f
GetBaseDir	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^function! <SID>GetBaseDir(diffName)$/;"	f
GetCd	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! s:GetCd(info, home)$/;"	f
GetClassDeclarationOf	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^function! s:GetClassDeclarationOf(type)$/;"	f
GetClassDirs	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:GetClassDirs()$/;"	f
GetClassInfoFromSource	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:GetClassInfoFromSource(class, filename)$/;"	f
GetClassPath	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:GetClassPath()$/;"	f
GetClassPathOfJsp	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:GetClassPathOfJsp()$/;"	f
GetClassScopeAtCursor	C:\programs\gvim\vimfiles\autoload\omni\cpp\namespaces.vim	/^function! s:GetClassScopeAtCursor()$/;"	f
GetCommand	C:\programs\gvim\vimfiles\autoload\lookupfile.vim	/^function! s:GetCommand(withPopupTrigger, withSkipPat, actCmd, innerCmd)$/;"	f
GetConstructorList	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^function! s:GetConstructorList(class)$/;"	f
GetCurrentFileKey	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:GetCurrentFileKey()$/;"	f
GetDeclaredClassName	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^function! s:GetDeclaredClassName(var)$/;"	f
GetDiffStrings	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^function! <SID>GetDiffStrings()$/;"	f
GetFileNameFromLine	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^function! <SID>GetFileNameFromLine(AB, line)$/;"	f
GetFilter	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! s:GetFilter(info, parent_filter)$/;"	f
GetFlags	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! s:GetFlags(info)$/;"	f
GetHome	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! s:GetHome(info, parent_home)$/;"	f
GetImports	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:GetImports(kind, ...)$/;"	f
GetIncludeListFromCurrentBuffer	C:\programs\gvim\vimfiles\autoload\omni\cpp\includes.vim	/^function! s:GetIncludeListFromCurrentBuffer()$/;"	f
GetIncludeListFromFile	C:\programs\gvim\vimfiles\autoload\omni\cpp\includes.vim	/^function! s:GetIncludeListFromFile(szFilePath, bUpdate) $/;"	f
GetJavaCompleteClassPath	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:GetJavaCompleteClassPath()$/;"	f
GetMatchedIndexEx	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^function! s:GetMatchedIndexEx(str, idx, one, another)$/;"	f
GetMemberList	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^function! s:GetMemberList(class)$/;"	f
GetMembers	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:GetMembers(fqn, ...)$/;"	f
GetMethodInvocationExpr	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:GetMethodInvocationExpr(expr)$/;"	f
GetNamespaceAliasListFromLine	C:\programs\gvim\vimfiles\autoload\omni\cpp\namespaces.vim	/^function! s:GetNamespaceAliasListFromLine(szLine)$/;"	f
GetNamespaceAliasMap	C:\programs\gvim\vimfiles\autoload\omni\cpp\namespaces.vim	/^function! s:GetNamespaceAliasMap()$/;"	f
GetNamespaceListFromLine	C:\programs\gvim\vimfiles\autoload\omni\cpp\namespaces.vim	/^function! s:GetNamespaceListFromLine(szLine)$/;"	f
GetNextWinnrInStack	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! s:GetNextWinnrInStack(dir)$/;"	f
GetPackageName	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:GetPackageName()$/;"	f
GetPhpHtmlIndent	C:\programs\gvim\vimfiles\indent\php.vim	/^function! GetPhpHtmlIndent(lnum)$/;"	f
GetScriptin	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! s:GetScriptin(info, home)$/;"	f
GetScriptout	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! s:GetScriptout(info, home)$/;"	f
GetSexyComLeft	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:GetSexyComLeft(space, esc)$/;"	f
GetSexyComMarker	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:GetSexyComMarker(space, esc)$/;"	f
GetSexyComRight	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:GetSexyComRight(space, esc)$/;"	f
GetSnippet	C:\programs\gvim\vimfiles\plugin\snipMate.vim	/^fun s:GetSnippet(word, scope)$/;"	f
GetSnippets	C:\programs\gvim\vimfiles\plugin\snipMate.vim	/^fun! GetSnippets(dir, filetypes)$/;"	f
GetSourceDirs	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:GetSourceDirs(filepath, ...)$/;"	f
GetStatement	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^function! s:GetStatement()$/;"	f
GetStaticMemberList	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:GetStaticMemberList(class)$/;"	f
GetStopPositionForLocalSearch	C:\programs\gvim\vimfiles\autoload\omni\cpp\namespaces.vim	/^function! s:GetStopPositionForLocalSearch()$/;"	f
GetSuperMarkB	C:\programs\gvim\vimfiles\plugin\fwk_marks.vim	/^command! -n=1 GetSuperMarkB :call s:Fwk_bookmarks_marks_loadMark('<args>', 1)$/;"	c
GetSuperMarkT	C:\programs\gvim\vimfiles\plugin\fwk_marks.vim	/^command! -n=1 GetSuperMarkT :call s:Fwk_bookmarks_marks_loadMark('<args>', 2)$/;"	c
GetSymbol	C:\programs\gvim\vimfiles\autoload\omni\cpp\items.vim	/^function! s:GetSymbol(tokens)$/;"	f
GetTagOfSameScope	C:\programs\gvim\vimfiles\autoload\omni\cpp\utils.vim	/^function! s:GetTagOfSameScope(listTags, szScopeToMatch)$/;"	f
GetThisClassDeclaration	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^function! s:GetThisClassDeclaration()$/;"	f
GetTypeInfoOfReturnedType	C:\programs\gvim\vimfiles\autoload\omni\cpp\items.vim	/^function! s:GetTypeInfoOfReturnedType(contextStack, szFunctionName)$/;"	f
GetTypeInfoOfVariable	C:\programs\gvim\vimfiles\autoload\omni\cpp\items.vim	/^function! s:GetTypeInfoOfVariable(contextStack, szVariable, bSearchDecl)$/;"	f
GetUsingNamespaceListFromMap	C:\programs\gvim\vimfiles\autoload\omni\cpp\namespaces.vim	/^function! s:GetUsingNamespaceListFromMap(namespaceMap, ...)$/;"	f
GetVariableDeclaration	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^function! s:GetVariableDeclaration()$/;"	f
GetWinDim	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! s:GetWinDim(dir, win)$/;"	f
GfEmulatorForTabs	C:\programs\gvim\vimfiles\plugin\fwk_tab_aranger.vim	/^function! s:GfEmulatorForTabs()$/;"	f
GoWinbufnr	C:\programs\gvim\vimfiles\plugin\cecutil.vim	/^fun! GoWinbufnr(bufnum)$/;"	f
GotoUpperBracket	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:GotoUpperBracket()$/;"	f
Grep	C:\programs\gvim\vimfiles\plugin\grep.vim	/^command! -nargs=* -complete=file Grep$/;"	c
GrepAdd	C:\programs\gvim\vimfiles\plugin\grep.vim	/^command! -nargs=* -complete=file GrepAdd$/;"	c
GrepAll	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! s:GrepAll(recurse, lineno, pattern)$/;"	f
GrepArgs	C:\programs\gvim\vimfiles\plugin\grep.vim	/^command! -nargs=* GrepArgs$/;"	c
GrepArgsAdd	C:\programs\gvim\vimfiles\plugin\grep.vim	/^command! -nargs=* GrepArgsAdd$/;"	c
GrepBuffer	C:\programs\gvim\vimfiles\plugin\grep.vim	/^command! -nargs=* GrepBuffer$/;"	c
GrepBufferAdd	C:\programs\gvim\vimfiles\plugin\grep.vim	/^command! -nargs=* GrepBufferAdd$/;"	c
Grep_Cygwin_Find	C:\programs\gvim\vimfiles\plugin\grep.vim	/^    let Grep_Cygwin_Find = 0$/;"	v
Grep_Default_Filelist	C:\programs\gvim\vimfiles\plugin\grep.vim	/^    let Grep_Default_Filelist = '*'$/;"	v
Grep_Default_Options	C:\programs\gvim\vimfiles\plugin\grep.vim	/^    let Grep_Default_Options = ''$/;"	v
Grep_Find_Path	C:\programs\gvim\vimfiles\plugin\grep.vim	/^    let Grep_Find_Path = 'find'$/;"	v
Grep_Find_Use_Xargs	C:\programs\gvim\vimfiles\plugin\grep.vim	/^    let Grep_Find_Use_Xargs = 1$/;"	v
Grep_Null_Device	C:\programs\gvim\vimfiles\plugin\grep.vim	/^        let Grep_Null_Device = 'NUL'$/;"	v
Grep_Null_Device	C:\programs\gvim\vimfiles\plugin\grep.vim	/^        let Grep_Null_Device = '\/dev\/null'$/;"	v
Grep_OpenQuickfixWindow	C:\programs\gvim\vimfiles\plugin\grep.vim	/^    let Grep_OpenQuickfixWindow = 1$/;"	v
Grep_Path	C:\programs\gvim\vimfiles\plugin\grep.vim	/^    let Grep_Path = 'grep'$/;"	v
Grep_Shell_Escape_Char	C:\programs\gvim\vimfiles\plugin\grep.vim	/^        let Grep_Shell_Escape_Char = ''$/;"	v
Grep_Shell_Escape_Char	C:\programs\gvim\vimfiles\plugin\grep.vim	/^        let Grep_Shell_Escape_Char = '\\'$/;"	v
Grep_Shell_Quote_Char	C:\programs\gvim\vimfiles\plugin\grep.vim	/^        let Grep_Shell_Quote_Char = "'"$/;"	v
Grep_Shell_Quote_Char	C:\programs\gvim\vimfiles\plugin\grep.vim	/^        let Grep_Shell_Quote_Char = ''$/;"	v
Grep_Skip_Dirs	C:\programs\gvim\vimfiles\plugin\grep.vim	/^    let Grep_Skip_Dirs = 'RCS CVS SCCS'$/;"	v
Grep_Skip_Files	C:\programs\gvim\vimfiles\plugin\grep.vim	/^    let Grep_Skip_Files = '*~ *,v s.*'$/;"	v
Grep_Xargs_Options	C:\programs\gvim\vimfiles\plugin\grep.vim	/^    let Grep_Xargs_Options = '--null'$/;"	v
Grep_Xargs_Path	C:\programs\gvim\vimfiles\plugin\grep.vim	/^    let Grep_Xargs_Path = 'xargs'$/;"	v
GuiTabLabel	C:\programs\gvim\vimfiles\plugin\fwk_tab_aranger.vim	/^function! GuiTabLabel()$/;"	f
GuiTabToolTip	C:\programs\gvim\vimfiles\plugin\fwk_tab_aranger.vim	/^function! GuiTabToolTip()$/;"	f
HLTest	C:\programs\gvim\vimfiles\syntax\Decho.vim	/^  fun! s:HLTest(hlname)$/;"	f
HasATagFileOrTagEnvChanged	C:\programs\gvim\vimfiles\autoload\omni\cpp\complete.vim	/^function! s:HasATagFileOrTagEnvChanged()$/;"	f
HasCStyleComments	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:HasCStyleComments()$/;"	f
HasKeyword	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:HasKeyword(name)$/;"	f
HasLeadingTabs	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:HasLeadingTabs(...)$/;"	f
HasMultipartDelims	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:HasMultipartDelims()$/;"	f
HasTagEnvChanged	C:\programs\gvim\vimfiles\autoload\omni\cpp\complete.vim	/^function! s:HasTagEnvChanged()$/;"	f
HiLink	C:\programs\gvim\vimfiles\syntax\django.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	C:\programs\gvim\vimfiles\syntax\django.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	C:\programs\gvim\vimfiles\syntax\python.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	C:\programs\gvim\vimfiles\syntax\python.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HidePopup	C:\programs\gvim\vimfiles\autoload\lookupfile.vim	/^function! s:HidePopup()$/;"	f
HighlightLine	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^function! <SID>HighlightLine()$/;"	f
HtmlAttribCallback	C:\programs\gvim\vimfiles\ftplugin\html.vim	/^  function HtmlAttribCallback( xml_tag )$/;"	f
HtmlHiLink	C:\programs\gvim\vimfiles\syntax\html.vim	/^  command! -nargs=+ HtmlHiLink hi def link <args>$/;"	c
HtmlHiLink	C:\programs\gvim\vimfiles\syntax\html.vim	/^  command! -nargs=+ HtmlHiLink hi link <args>$/;"	c
INDEX_CLASS	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    private static int INDEX_CLASS = 1;$/;"	f	class:Reflection	file:	access:private
INDEX_PACKAGE	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    private static int INDEX_PACKAGE = 0;$/;"	f	class:Reflection	file:	access:private
Ident	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:Ident(pos, name)$/;"	f
InComment	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^function! s:InComment(line, col)$/;"	f
InCommentOrLiteral	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:InCommentOrLiteral(line, col)$/;"	f
Index	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:Index(list, expr, key)$/;"	f
Info	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:Info(msg)$/;"	f
Info	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:Info(msg)$/;"	f
Init	C:\programs\gvim\vimfiles\plugin\supertab.vim	/^function! s:Init()$/;"	f
InitBuffer	C:\programs\gvim\vimfiles\plugin\supertab.vim	/^function! s:InitBuffer()$/;"	f
InitComplete	C:\programs\gvim\vimfiles\autoload\omni\cpp\complete.vim	/^function! s:InitComplete()$/;"	f
InitEditFromJump	C:\programs\gvim\vimfiles\ftplugin\xml.vim	/^function s:InitEditFromJump( )$/;"	f
InitVariable	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:InitVariable(var, value)$/;"	f
InsertGt	C:\programs\gvim\vimfiles\ftplugin\xml.vim	/^function s:InsertGt( )$/;"	f
InsertTabWrapper	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^function InsertTabWrapper() $/;"	f
InvertComment	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:InvertComment(firstLine, lastLine)$/;"	f
InvokeFuncs	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! s:InvokeFuncs(funcList)$/;"	f
IsAbsolutePath	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! s:IsAbsolutePath(path)$/;"	f
IsBuiltinType	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:IsBuiltinType(name)$/;"	f
IsCached	C:\programs\gvim\vimfiles\autoload\omni\cpp\complete.vim	/^function! s:IsCached(cache, szKey1, szKey2)$/;"	f
IsCommented	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:IsCommented(left, right, line)$/;"	f
IsCommentedFromStartOfLine	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:IsCommentedFromStartOfLine(left, line)$/;"	f
IsCommentedNormOrSexy	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:IsCommentedNormOrSexy(lineNum)$/;"	f
IsCommentedOuttermost	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:IsCommentedOuttermost(left, right, leftAlt, rightAlt, line)$/;"	f
IsDelimValid	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:IsDelimValid(delimiter, delIndx, line)$/;"	f
IsDiffer	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^function! <SID>IsDiffer(line)$/;"	f
IsEscaped	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:IsEscaped(str, indx, escChar)$/;"	f
IsInSexyComment	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:IsInSexyComment(line)$/;"	f
IsKeyword	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:IsKeyword(name)$/;"	f
IsNoNameBuffer	C:\programs\gvim\vimfiles\plugin\fwk_tab_aranger.vim	/^func! IsNoNameBuffer(buff_number)$/;"	f
IsNumEven	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:IsNumEven(num)$/;"	f
IsOnly	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^function! <SID>IsOnly(line)	$/;"	f
IsParsableTag	C:\programs\gvim\vimfiles\ftplugin\xml.vim	/^function s:IsParsableTag( tag )$/;"	f
IsSexyComment	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:IsSexyComment(topline, bottomline)$/;"	f
IsSpecial	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:IsSpecial(ch)$/;"	f
IsStatic	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:IsStatic(modifier)$/;"	f
IsTypeInfoResolved	C:\programs\gvim\vimfiles\autoload\omni\cpp\utils.vim	/^function! s:IsTypeInfoResolved(szTypeInfo)$/;"	f
IsUnnamedType	C:\programs\gvim\vimfiles\autoload\omni\cpp\items.vim	/^function! s:IsUnnamedType(tagItem)$/;"	f
IsValid	C:\programs\gvim\vimfiles\autoload\lookupfile.vim	/^function! s:IsValid(fileName)$/;"	f
KEY_DECLARING_CLASS	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final String KEY_DECLARING_CLASS	= "'c':";	\/\/ "'declaringclass':";$/;"	f	class:Reflection	access:default
KEY_DESCRIPTION	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final String KEY_DESCRIPTION		= "'d':";	\/\/ "'description':";$/;"	f	class:Reflection	access:default
KEY_MODIFIER	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final String KEY_MODIFIER		= "'m':";	\/\/ "'modifier':";$/;"	f	class:Reflection	access:default
KEY_NAME	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final String KEY_NAME		= "'n':";	\/\/ "'name':";$/;"	f	class:Reflection	access:default
KEY_PARAMETERTYPES	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final String KEY_PARAMETERTYPES	= "'p':";	\/\/ "'parameterTypes':";$/;"	f	class:Reflection	access:default
KEY_RETURNTYPE	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final String KEY_RETURNTYPE		= "'r':";	\/\/ "'returnType':";$/;"	f	class:Reflection	access:default
KEY_TYPE	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final String KEY_TYPE		= "'t':";	\/\/ "'type':";$/;"	f	class:Reflection	access:default
KeepCursor	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:KeepCursor(cmd)$/;"	f
L9Assert	C:\programs\gvim\vimfiles\plugin\l9.vim	/^  command -nargs=* L9Assert :$/;"	c
L9Assert	C:\programs\gvim\vimfiles\plugin\l9.vim	/^  command -nargs=* L9Assert call eval((<args>) ? 0 : s:handleFailedAssersion(<q-args>))$/;"	c
L9GrepBuffer	C:\programs\gvim\vimfiles\plugin\l9.vim	/^command -nargs=? L9GrepBuffer    call l9#grepBuffers(<q-args>, [bufnr('%')])$/;"	c
L9GrepBufferAll	C:\programs\gvim\vimfiles\plugin\l9.vim	/^command -nargs=? L9GrepBufferAll call l9#grepBuffers(<q-args>, range(1, bufnr('$')))$/;"	c
L9Timer	C:\programs\gvim\vimfiles\plugin\l9.vim	/^  command -nargs=1 L9Timer :$/;"	c
L9Timer	C:\programs\gvim\vimfiles\plugin\l9.vim	/^  command -nargs=1 L9Timer call s:timerBegin(<q-args>)$/;"	c
L9TimerDump	C:\programs\gvim\vimfiles\plugin\l9.vim	/^  command -nargs=0 L9TimerDump :$/;"	c
L9TimerDump	C:\programs\gvim\vimfiles\plugin\l9.vim	/^  command -nargs=0 L9TimerDump call s:timerDump()$/;"	c
L9TimerStop	C:\programs\gvim\vimfiles\plugin\l9.vim	/^  command -nargs=0 L9TimerStop :$/;"	c
L9TimerStop	C:\programs\gvim\vimfiles\plugin\l9.vim	/^  command -nargs=0 L9TimerStop call s:timerStop()$/;"	c
LGrep	C:\programs\gvim\vimfiles\plugin\grep.vim	/^command! -nargs=* -complete=file LGrep call FWK_Grep_Alias(<f-args>)$/;"	c
LastIndexOfDelim	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:LastIndexOfDelim(delim, str)$/;"	f
Left	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:Left(...)$/;"	f
LeftMostIndx	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:LeftMostIndx(countCommentedLines, countEmptyLines, topline, bottomline)$/;"	f
LexError	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:LexError(key, ...)$/;"	f
ListSpawn	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! s:ListSpawn(varnamesegment)$/;"	f
LoadAll	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! s:LoadAll(recurse, line)$/;"	f
LoadAllSplit	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! s:LoadAllSplit(recurse, line)$/;"	f
LocalSearchDecl	C:\programs\gvim\vimfiles\autoload\omni\cpp\items.vim	/^function! s:LocalSearchDecl(name)$/;"	f
Log	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:Log(level, pos, key, ...)$/;"	f
Log	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:Log(level, key, ...)$/;"	f
LookupFileReset	C:\programs\gvim\vimfiles\autoload\lookupfile.vim	/^function! s:LookupFileReset(force)$/;"	f
LookupFileSet	C:\programs\gvim\vimfiles\autoload\lookupfile.vim	/^function! s:LookupFileSet()$/;"	f
MRU	C:\programs\gvim\vimfiles\plugin\mru.vim	/^command! -nargs=? -complete=customlist,s:MRU_Complete MRU$/;"	c
MRU_AddFile	C:\programs\gvim\vimfiles\plugin\mru.vim	/^function! s:MRU_AddFile(acmd_bufnr)$/;"	f
MRU_Add_Menu	C:\programs\gvim\vimfiles\plugin\mru.vim	/^    let MRU_Add_Menu = 1$/;"	v
MRU_Auto_Close	C:\programs\gvim\vimfiles\plugin\mru.vim	/^    let MRU_Auto_Close = 1$/;"	v
MRU_Cmd	C:\programs\gvim\vimfiles\plugin\mru.vim	/^function! s:MRU_Cmd(pat)$/;"	f
MRU_Complete	C:\programs\gvim\vimfiles\plugin\mru.vim	/^function! s:MRU_Complete(ArgLead, CmdLine, CursorPos)$/;"	f
MRU_Edit_File	C:\programs\gvim\vimfiles\plugin\mru.vim	/^function! s:MRU_Edit_File(filename, sanitized)$/;"	f
MRU_Exclude_Files	C:\programs\gvim\vimfiles\plugin\mru.vim	/^    let MRU_Exclude_Files = ''$/;"	v
MRU_File	C:\programs\gvim\vimfiles\plugin\mru.vim	/^                let MRU_File = $USERPROFILE . '\\_vim_mru_files'$/;"	v
MRU_File	C:\programs\gvim\vimfiles\plugin\mru.vim	/^        let MRU_File = $HOME . '\/.vim_mru_files'$/;"	v
MRU_File	C:\programs\gvim\vimfiles\plugin\mru.vim	/^        let MRU_File = $VIM . '\/_vim_mru_files'$/;"	v
MRU_Include_Files	C:\programs\gvim\vimfiles\plugin\mru.vim	/^    let MRU_Include_Files = ''$/;"	v
MRU_LoadList	C:\programs\gvim\vimfiles\plugin\mru.vim	/^function! s:MRU_LoadList()$/;"	f
MRU_Max_Entries	C:\programs\gvim\vimfiles\plugin\mru.vim	/^    let MRU_Max_Entries = 10$/;"	v
MRU_Open_Window	C:\programs\gvim\vimfiles\plugin\mru.vim	/^function! s:MRU_Open_Window(...)$/;"	f
MRU_Refresh_Menu	C:\programs\gvim\vimfiles\plugin\mru.vim	/^function! s:MRU_Refresh_Menu()$/;"	f
MRU_SaveList	C:\programs\gvim\vimfiles\plugin\mru.vim	/^function! s:MRU_SaveList()$/;"	f
MRU_Use_Current_Window	C:\programs\gvim\vimfiles\plugin\mru.vim	/^    let MRU_Use_Current_Window = 0$/;"	v
MRU_Warn_Msg	C:\programs\gvim\vimfiles\plugin\mru.vim	/^function! s:MRU_Warn_Msg(msg)$/;"	f
MRU_Window_Edit_File	C:\programs\gvim\vimfiles\plugin\mru.vim	/^function! s:MRU_Window_Edit_File(win_opt)$/;"	f
MRU_Window_Height	C:\programs\gvim\vimfiles\plugin\mru.vim	/^    let MRU_Window_Height = 8$/;"	v
MRU_add_files_to_menu	C:\programs\gvim\vimfiles\plugin\mru.vim	/^function! s:MRU_add_files_to_menu(prefix, file_list)$/;"	f
MRU_escape_filename	C:\programs\gvim\vimfiles\plugin\mru.vim	/^function! s:MRU_escape_filename(fname)$/;"	f
MakeSnip	C:\programs\gvim\vimfiles\plugin\snipMate.vim	/^fun! MakeSnip(scope, trigger, content, ...)$/;"	f
MakeSpace	C:\programs\gvim\vimfiles\autoload\Align.vim	/^fun! s:MakeSpace(spacecnt)$/;"	f
ManualCompletionEnter	C:\programs\gvim\vimfiles\plugin\supertab.vim	/^function! s:ManualCompletionEnter()$/;"	f
Match	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! s:Match(expr, pat, start)$/;"	f
Match	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:Match(pat)$/;"	f
Match	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:Match(list, expr, key)$/;"	f
MemberCompare	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:MemberCompare(m1, m2)$/;"	f
MergeLines	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:MergeLines(lnum, col, lnum_old, col_old)$/;"	f
MethodInvocation	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:MethodInvocation(expr, ti, itemkind)$/;"	f
MisMatchedTag	C:\programs\gvim\vimfiles\ftplugin\xml.vim	/^function s:MisMatchedTag( id, tag )$/;"	f
MkVimball	C:\programs\gvim\vimfiles\plugin\vimballPlugin.vim	/^com! -ra   -complete=file -na=+ -bang MkVimball call vimball#MkVimball(<line1>,<line2>,<bang>0,<f-args>)$/;"	c
Modifiers	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:Modifiers(pos, flags, annotations)$/;"	f
MoveDown	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! s:MoveDown()$/;"	f
MoveUp	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! s:MoveUp()$/;"	f
Multipart	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:Multipart()$/;"	f
MyBalloonExpr	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^function! MyBalloonExpr()$/;"	f
NERDComment	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function! NERDComment(isVisual, type) range$/;"	f
NEWLINE	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final String NEWLINE = "";	\/\/ "\\r\\n"$/;"	f	class:Reflection	access:default
NerdEcho	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:NerdEcho(msg, typeOfMsg)$/;"	f
NewFileXML	C:\programs\gvim\vimfiles\ftplugin\xml.vim	/^function s:NewFileXML( )$/;"	f
NumLinesInBuf	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:NumLinesInBuf()$/;"	f
Number2Bits	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:Number2Bits(n, ...)$/;"	f
NumberOfLeadingTabs	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:NumberOfLeadingTabs(s)$/;"	f
OPTION_ALL	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final int OPTION_ALL			= 31;	\/\/ compound all$/;"	f	class:Reflection	access:default
OPTION_CONSTRUCTOR	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final int OPTION_CONSTRUCTOR		= 16;$/;"	f	class:Reflection	access:default
OPTION_FIELD	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final int OPTION_FIELD		=  1;$/;"	f	class:Reflection	access:default
OPTION_INSTANCE	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final int OPTION_INSTANCE		= 15;	\/\/ compound instance$/;"	f	class:Reflection	access:default
OPTION_METHOD	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final int OPTION_METHOD		=  2;$/;"	f	class:Reflection	access:default
OPTION_SAME_PACKAGE	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final int OPTION_SAME_PACKAGE	= 64;$/;"	f	class:Reflection	access:default
OPTION_STATIC	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final int OPTION_STATIC		= 12;	\/\/ compound static$/;"	f	class:Reflection	access:default
OPTION_STATIC_FIELD	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final int OPTION_STATIC_FIELD	=  4;$/;"	f	class:Reflection	access:default
OPTION_STATIC_METHOD	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final int OPTION_STATIC_METHOD	=  8;$/;"	f	class:Reflection	access:default
OPTION_SUPER	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final int OPTION_SUPER		= 32;$/;"	f	class:Reflection	access:default
OpenCloseFileExporerFunction	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^function! OpenCloseFileExporerFunction(variable) $/;"	f
OpenCurFile	C:\programs\gvim\vimfiles\autoload\lookupfile.vim	/^function! s:OpenCurFile(splitWin)$/;"	f
OpenEntry	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! s:OpenEntry(line, precmd, editcmd, dir)$/;"	f
OpenEntry2	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! s:OpenEntry2(line, infoline, fname, editcmd)$/;"	f
OpenTabSilentFunction	C:\programs\gvim\vimfiles\plugin\fwk_tab_aranger.vim	/^function! s:OpenTabSilentFunction(fileName, mode)$/;"	f
OpenTabsSilent	C:\programs\gvim\vimfiles\plugin\fwk_tab_aranger.vim	/^command! -n=? -complete=file OpenTabsSilent     :call s:OpenTabSilentFunction('<args>', 'tab')$/;"	c
OpenWindowSilent	C:\programs\gvim\vimfiles\plugin\fwk_tab_aranger.vim	/^command! -n=? -complete=file OpenWindowSilent   :call s:OpenTabSilentFunction('<args>', 'split_only_if_two')$/;"	c
PLFM_EXTDIR	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\fwk_extended_variables.vim	/^    let PLFM_EXTDIR               = PLFM_VIM_HOME_PATH . PLFM_SL . 'vim_extention'$/;"	v
PLFM_EXTDIR	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\fwk_extended_variables.vim	/^let PLFM_EXTDIR               = "" "main extention dir$/;"	v
PLFM_EXTDIR	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\fwk_variables.vim	/^let PLFM_EXTDIR               = "" "main extention dir$/;"	v
PLFM_EXTDIR	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\fwk_variables.vim	/^let PLFM_EXTDIR               = PLFM_VIM_HOME_PATH . PLFM_SL . 'vim_extention'$/;"	v
PLFM_HOSTNAME	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\fwk_extended_variables.vim	/^let PLFM_HOSTNAME = hostname()    "hostname to differ work machines (home\/work)$/;"	v
PLFM_SL	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\fwk_extended_variables.vim	/^let PLFM_SL=g:cr_slash                    "slash specific for platform$/;"	v
PLFM_VIMCFG	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\fwk_extended_variables.vim	/^    let PLFM_VIMCFG               = PLFM_EXTDIR . PLFM_SL . 'vimrc_config'$/;"	v
PLFM_VIMCFG	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\fwk_extended_variables.vim	/^let PLFM_VIMCFG = "" "mains configuration files for this distro$/;"	v
PLFM_VIMCFG	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\fwk_variables.vim	/^let PLFM_VIMCFG               = "" "mains configuration files for this distro$/;"	v
PLFM_VIMCFG	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\fwk_variables.vim	/^let PLFM_VIMCFG               = PLFM_EXTDIR        . PLFM_SL . 'vimrc_config'$/;"	v
PLFM_VIM_LOGS	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\fwk_extended_variables.vim	/^    let PLFM_VIM_LOGS             = PLFM_EXTDIR . PLFM_SL . 'logs'$/;"	v
PLFM_VIM_LOGS	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\fwk_extended_variables.vim	/^let PLFM_VIM_LOGS             = "" "logging information$/;"	v
PLFM_VIM_LOGS	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\fwk_variables.vim	/^let PLFM_VIM_LOGS             = "" "logging information$/;"	v
PLFM_VIM_LOGS	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\fwk_variables.vim	/^let PLFM_VIM_LOGS             = PLFM_EXTDIR        . PLFM_SL . 'logs'$/;"	v
PLFM_VIM_NOTES	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\fwk_extended_variables.vim	/^    let PLFM_VIM_NOTES            = PLFM_VIM_NOTES_GEN . PLFM_SL . 'dynamic'$/;"	v
PLFM_VIM_NOTES	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\fwk_extended_variables.vim	/^let PLFM_VIM_NOTES            = "" "dynamic notes path$/;"	v
PLFM_VIM_NOTES	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\fwk_variables.vim	/^let PLFM_VIM_NOTES            = "" "dynamic notes path$/;"	v
PLFM_VIM_NOTES	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\fwk_variables.vim	/^let PLFM_VIM_NOTES            = PLFM_VIM_NOTES_GEN . PLFM_SL . 'dynamic'$/;"	v
PLFM_VIM_NOTES_GEN	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\fwk_extended_variables.vim	/^    let PLFM_VIM_NOTES_GEN        = $VIM . PLFM_SL . 'Notes'$/;"	v
PLFM_VIM_NOTES_GEN	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\fwk_extended_variables.vim	/^let PLFM_VIM_NOTES_GEN        = "" "all notes path$/;"	v
PLFM_VIM_NOTES_GEN	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\fwk_variables.vim	/^let PLFM_VIM_NOTES_GEN        = "" "all notes path$/;"	v
PLFM_VIM_NOTES_GEN	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\fwk_variables.vim	/^let PLFM_VIM_NOTES_GEN        = PLFM_VIM_HOME_PATH . PLFM_SL . 'Notes'$/;"	v
PLFM_VIM_PROJECTS	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\fwk_extended_variables.vim	/^    let PLFM_VIM_PROJECTS         = PLFM_EXTDIR . PLFM_SL . 'projects'$/;"	v
PLFM_VIM_PROJECTS	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\fwk_extended_variables.vim	/^let PLFM_VIM_PROJECTS         = "" "standart vim projects dir$/;"	v
PLFM_VIM_PROJECTS	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\fwk_variables.vim	/^let PLFM_VIM_PROJECTS         = "" "standart vim projects dir$/;"	v
PLFM_VIM_PROJECTS	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\fwk_variables.vim	/^let PLFM_VIM_PROJECTS         = PLFM_EXTDIR        . PLFM_SL . 'projects'$/;"	v
PLFM_VIM_TEMPDIR	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\fwk_extended_variables.vim	/^    let PLFM_VIM_TEMPDIR          = PLFM_EXTDIR . PLFM_SL . 'tempdir'$/;"	v
PLFM_VIM_TEMPDIR	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\fwk_extended_variables.vim	/^let PLFM_VIM_TEMPDIR          = "" "temp files storage$/;"	v
PLFM_VIM_TEMPDIR	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\fwk_variables.vim	/^let PLFM_VIM_TEMPDIR          = "" "temp files storage$/;"	v
PLFM_VIM_TEMPDIR	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\fwk_variables.vim	/^let PLFM_VIM_TEMPDIR          = PLFM_EXTDIR        . PLFM_SL . 'tempdir'$/;"	v
PLFM_VIM_TEMPLATES	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\fwk_extended_variables.vim	/^    let PLFM_VIM_TEMPLATES        = g:cfg_path  . PLFM_SL . 'templates'$/;"	v
PLFM_VIM_TEMPLATES	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\fwk_extended_variables.vim	/^let PLFM_VIM_TEMPLATES        = "" "templates path$/;"	v
PLFM_VIM_TEMPLATES	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\fwk_variables.vim	/^let PLFM_VIM_TEMPLATES        = "" "templates path$/;"	v
PLFM_VIM_TEMPLATES	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\fwk_variables.vim	/^let PLFM_VIM_TEMPLATES        = PLFM_EXTDIR        . PLFM_SL . 'templates'$/;"	v
PLFM_VIM_VIMFILES	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\fwk_extended_variables.vim	/^    let PLFM_VIM_VIMFILES         = g:cfg_path $/;"	v
PLFM_VIM_VIMFILES	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\fwk_extended_variables.vim	/^let PLFM_VIM_VIMFILES         = "" "standart vim plugins dir$/;"	v
PLFM_VIM_VIMFILES	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\fwk_variables.vim	/^let PLFM_VIM_VIMFILES         = "" "standart vim plugins dir$/;"	v
PLFM_VIM_VIMFILES	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\fwk_variables.vim	/^let PLFM_VIM_VIMFILES         = PLFM_VIM_HOME_PATH . PLFM_SL . 'vimfiles' $/;"	v
ParseExpr	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:ParseExpr(expr)$/;"	f
ParseOnlyFile	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^function! <SID>ParseOnlyFile(line)$/;"	f
ParseOnlySrc	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^function! <SID>ParseOnlySrc(line)$/;"	f
ParseTag	C:\programs\gvim\vimfiles\ftplugin\xml.vim	/^function s:ParseTag( )$/;"	f
Path	C:\programs\gvim\vimfiles\autoload\vimball.vim	/^fun! s:Path(cmd,quote)$/;"	f
PersistentVarName	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! s:PersistentVarName(pluginName, persistentVar)$/;"	f
PlaceDelimitersAndInsBetween	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:PlaceDelimitersAndInsBetween()$/;"	f
PopUp.Copy_Paste.&Copy	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\popup_menus.vim	/^cnoremenu PopUp.Copy_Paste.&Copy        <C-Y>$/;"	m
PopUp.Copy_Paste.&Copy	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\popup_menus.vim	/^vnoremenu PopUp.Copy_Paste.&Copy        "+y$/;"	m
PopUp.Copy_Paste.&Delete	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\popup_menus.vim	/^vnoremenu PopUp.Copy_Paste.&Delete      x$/;"	m
PopUp.Copy_Paste.&Paste	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\popup_menus.vim	/^cnoremenu PopUp.Copy_Paste.&Paste       <C-R>+$/;"	m
PopUp.Copy_Paste.&Paste	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\popup_menus.vim	/^nnoremenu PopUp.Copy_Paste.&Paste       "+gP$/;"	m
PopUp.Copy_Paste.Cu&t	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\popup_menus.vim	/^vnoremenu PopUp.Copy_Paste.Cu&t     "+x$/;"	m
PopUp.Copy_Paste.Select\	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\popup_menus.vim	/^cnoremenu <script> <silent> PopUp.Copy_Paste.Select\\ &All   <C-U>call <SID>SelectAll()<CR>$/;"	m
PopUp.Copy_Paste.Select\	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\popup_menus.vim	/^cnoremenu PopUp.Copy_Paste.Select\\ &Sentence    <C-C>vas$/;"	m
PopUp.Copy_Paste.Select\	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\popup_menus.vim	/^cnoremenu PopUp.Copy_Paste.Select\\ Pa&ragraph   <C-C>vap$/;"	m
PopUp.Copy_Paste.Select\	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\popup_menus.vim	/^inoremenu <script> <silent> PopUp.Copy_Paste.Select\\ &All   <C-O>:call <SID>SelectAll()<CR>$/;"	m
PopUp.Copy_Paste.Select\	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\popup_menus.vim	/^inoremenu PopUp.Copy_Paste.Select\\ &Sentence    <C-O>vas$/;"	m
PopUp.Copy_Paste.Select\	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\popup_menus.vim	/^inoremenu PopUp.Copy_Paste.Select\\ Pa&ragraph   <C-O>vap$/;"	m
PopUp.Copy_Paste.Select\	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\popup_menus.vim	/^nnoremenu PopUp.Copy_Paste.Select\\ &Sentence    vas$/;"	m
PopUp.Copy_Paste.Select\	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\popup_menus.vim	/^nnoremenu PopUp.Copy_Paste.Select\\ Pa&ragraph   vap$/;"	m
PopUp.Copy_Paste.Select\	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\popup_menus.vim	/^noremenu  <script> <silent> PopUp.Copy_Paste.Select\\ &All   :<C-U>call <SID>SelectAll()<CR>$/;"	m
PopUp.Copy_Paste.Select\	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\popup_menus.vim	/^onoremenu PopUp.Copy_Paste.Select\\ &Sentence    as$/;"	m
PopUp.Copy_Paste.Select\	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\popup_menus.vim	/^onoremenu PopUp.Copy_Paste.Select\\ Pa&ragraph   ap$/;"	m
PopUp.Copy_Paste.Select\	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\popup_menus.vim	/^vnoremenu PopUp.Copy_Paste.Select\\ &Sentence    <C-C>vas$/;"	m
PopUp.Copy_Paste.Select\	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\popup_menus.vim	/^vnoremenu PopUp.Copy_Paste.Select\\ Blockwise    <C-V>$/;"	m
PopUp.Copy_Paste.Select\	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\popup_menus.vim	/^vnoremenu PopUp.Copy_Paste.Select\\ Pa&ragraph   <C-C>vap$/;"	m
Pos2Str	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:Pos2Str(pos)$/;"	f
ProcessFile	C:\programs\gvim\vimfiles\plugin\snipMate.vim	/^fun s:ProcessFile(file, ft, ...)$/;"	f
ProcessParentheses	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:ProcessParentheses(expr, ...)$/;"	f
ProcessSnippet	C:\programs\gvim\vimfiles\autoload\snipMate.vim	/^fun s:ProcessSnippet(snip)$/;"	f
Project	C:\programs\gvim\vimfiles\plugin\project.vim	/^    command -nargs=? -complete=file Project call <SID>Project('<args>')$/;"	c
Project	C:\programs\gvim\vimfiles\plugin\project.vim	/^function! s:Project(filename) " <<<$/;"	f
Project_ForEach	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! Project_ForEach(recurse, lineno, cmd, data, match)$/;"	f
Project_ForEachR	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! s:Project_ForEachR(recurse, lineno, info, cmd, data, match)$/;"	f
Project_GetAllFnames	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! Project_GetAllFnames(recurse, lineno, separator)$/;"	f
Project_GetFname	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! Project_GetFname(line)$/;"	f
Prune	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^function! s:Prune(str, ...)$/;"	f
QArgSplitter	C:\programs\gvim\vimfiles\autoload\Align.vim	/^fun! s:QArgSplitter(qarg)$/;"	f
QArgSplitter	C:\programs\gvim\vimfiles\plugin\cecutil.vim	/^fun! QArgSplitter(qarg)$/;"	f
QSortR	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! s:QSortR(start, end, cmp, direction, accessor, swapper, context)$/;"	f
Queue	C:\programs\gvim\vimfiles\autoload\l9\async.py	/^import Queue$/;"	i
RETURN_ALL_PACKAGE_INFO	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final int RETURN_ALL_PACKAGE_INFO	= 0x1000;$/;"	f	class:Reflection	access:default
RM	C:\programs\gvim\vimfiles\plugin\cecutil.vim	/^com! -bar -nargs=1 RM	call RestoreMark(<q-args>)$/;"	c
RWP	C:\programs\gvim\vimfiles\plugin\cecutil.vim	/^com! -bar -nargs=0 RWP	call RestoreWinPosn()$/;"	c
Ragrep	C:\programs\gvim\vimfiles\plugin\grep.vim	/^command! -nargs=* -complete=file Ragrep$/;"	c
RagrepAdd	C:\programs\gvim\vimfiles\plugin\grep.vim	/^command! -nargs=* -complete=file RagrepAdd$/;"	c
RecordInFile	C:\programs\gvim\vimfiles\autoload\vimball.vim	/^fun! s:RecordInFile(home)$/;"	f
RecordInVar	C:\programs\gvim\vimfiles\autoload\vimball.vim	/^fun! s:RecordInVar(home,cmd)$/;"	f
RecordPrevBuffer_au	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! s:RecordPrevBuffer_au()$/;"	f
RecursivelyConstructDirectives	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! s:RecursivelyConstructDirectives(lineno)$/;"	f
Reflection	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^class Reflection {$/;"	c
Reflection.AddToParent	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    public static void AddToParent(Hashtable map, String parent, String child) {$/;"	m	class:Reflection	access:public	signature:(Hashtable map, String parent, String child)
Reflection.INDEX_CLASS	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    private static int INDEX_CLASS = 1;$/;"	f	class:Reflection	file:	access:private
Reflection.INDEX_PACKAGE	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    private static int INDEX_PACKAGE = 0;$/;"	f	class:Reflection	file:	access:private
Reflection.KEY_DECLARING_CLASS	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final String KEY_DECLARING_CLASS	= "'c':";	\/\/ "'declaringclass':";$/;"	f	class:Reflection	access:default
Reflection.KEY_DESCRIPTION	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final String KEY_DESCRIPTION		= "'d':";	\/\/ "'description':";$/;"	f	class:Reflection	access:default
Reflection.KEY_MODIFIER	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final String KEY_MODIFIER		= "'m':";	\/\/ "'modifier':";$/;"	f	class:Reflection	access:default
Reflection.KEY_NAME	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final String KEY_NAME		= "'n':";	\/\/ "'name':";$/;"	f	class:Reflection	access:default
Reflection.KEY_PARAMETERTYPES	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final String KEY_PARAMETERTYPES	= "'p':";	\/\/ "'parameterTypes':";$/;"	f	class:Reflection	access:default
Reflection.KEY_RETURNTYPE	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final String KEY_RETURNTYPE		= "'r':";	\/\/ "'returnType':";$/;"	f	class:Reflection	access:default
Reflection.KEY_TYPE	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final String KEY_TYPE		= "'t':";	\/\/ "'type':";$/;"	f	class:Reflection	access:default
Reflection.NEWLINE	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final String NEWLINE = "";	\/\/ "\\r\\n"$/;"	f	class:Reflection	access:default
Reflection.OPTION_ALL	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final int OPTION_ALL			= 31;	\/\/ compound all$/;"	f	class:Reflection	access:default
Reflection.OPTION_CONSTRUCTOR	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final int OPTION_CONSTRUCTOR		= 16;$/;"	f	class:Reflection	access:default
Reflection.OPTION_FIELD	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final int OPTION_FIELD		=  1;$/;"	f	class:Reflection	access:default
Reflection.OPTION_INSTANCE	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final int OPTION_INSTANCE		= 15;	\/\/ compound instance$/;"	f	class:Reflection	access:default
Reflection.OPTION_METHOD	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final int OPTION_METHOD		=  2;$/;"	f	class:Reflection	access:default
Reflection.OPTION_SAME_PACKAGE	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final int OPTION_SAME_PACKAGE	= 64;$/;"	f	class:Reflection	access:default
Reflection.OPTION_STATIC	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final int OPTION_STATIC		= 12;	\/\/ compound static$/;"	f	class:Reflection	access:default
Reflection.OPTION_STATIC_FIELD	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final int OPTION_STATIC_FIELD	=  4;$/;"	f	class:Reflection	access:default
Reflection.OPTION_STATIC_METHOD	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final int OPTION_STATIC_METHOD	=  8;$/;"	f	class:Reflection	access:default
Reflection.OPTION_SUPER	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final int OPTION_SUPER		= 32;$/;"	f	class:Reflection	access:default
Reflection.RETURN_ALL_PACKAGE_INFO	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final int RETURN_ALL_PACKAGE_INFO	= 0x1000;$/;"	f	class:Reflection	access:default
Reflection.STRATEGY_ALPHABETIC	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final int STRATEGY_ALPHABETIC	= 128;$/;"	f	class:Reflection	access:default
Reflection.STRATEGY_DEFAULT	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final int STRATEGY_DEFAULT		= 512;$/;"	f	class:Reflection	access:default
Reflection.STRATEGY_HIERARCHY	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final int STRATEGY_HIERARCHY		= 256;$/;"	f	class:Reflection	access:default
Reflection.VERSION	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final String VERSION	= "0.77";$/;"	f	class:Reflection	access:default
Reflection.addClasspathesFromDir	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    private static void addClasspathesFromDir(String dirpath) {$/;"	m	class:Reflection	file:	access:private	signature:(String dirpath)
Reflection.appendDeclaredMembers	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    private static void appendDeclaredMembers(Hashtable map, Class clazz, StringBuffer sb) {$/;"	m	class:Reflection	file:	access:private	signature:(Hashtable map, Class clazz, StringBuffer sb)
Reflection.appendListFromFolder	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    public static void appendListFromFolder(Hashtable subpackages, Hashtable classes, String path, String prefix) {$/;"	m	class:Reflection	access:public	signature:(Hashtable subpackages, Hashtable classes, String path, String prefix)
Reflection.appendListFromJar	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    public static void appendListFromJar(Hashtable subpackages, Hashtable classes, String path, String prefix) {$/;"	m	class:Reflection	access:public	signature:(Hashtable subpackages, Hashtable classes, String path, String prefix)
Reflection.appendListFromJar	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    public static void appendListFromJar(String path, Hashtable map) {$/;"	m	class:Reflection	access:public	signature:(String path, Hashtable map)
Reflection.appendModifier	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    private static void appendModifier(StringBuffer sb, int modifier) {$/;"	m	class:Reflection	file:	access:private	signature:(StringBuffer sb, int modifier)
Reflection.appendParameterTypes	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    private static void appendParameterTypes(StringBuffer sb, Class[] paramTypes) {$/;"	m	class:Reflection	file:	access:private	signature:(StringBuffer sb, Class[] paramTypes)
Reflection.collectClassPath	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    private static Hashtable collectClassPath() {$/;"	m	class:Reflection	file:	access:private	signature:()
Reflection.debug	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static void debug(String s) {$/;"	m	class:Reflection	access:default	signature:(String s)
Reflection.debug_mode	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static boolean debug_mode = false;$/;"	f	class:Reflection	access:default
Reflection.existed	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    public static boolean existed(String fqn) {$/;"	m	class:Reflection	access:public	signature:(String fqn)
Reflection.existedAndRead	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    public static String existedAndRead(String fqns) {$/;"	m	class:Reflection	access:public	signature:(String fqns)
Reflection.getClassInfo	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    public static String getClassInfo(String className) {$/;"	m	class:Reflection	access:public	signature:(String className)
Reflection.getPackageList	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    private static String getPackageList(String fqn) {$/;"	m	class:Reflection	file:	access:private	signature:(String fqn)
Reflection.getPackageList	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    public static String getPackageList() {$/;"	m	class:Reflection	access:public	signature:()
Reflection.htClasspath	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static Hashtable htClasspath = new Hashtable();$/;"	f	class:Reflection	access:default
Reflection.isBlank	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    private static boolean isBlank(String str) {$/;"	m	class:Reflection	file:	access:private	signature:(String str)
Reflection.main	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    public static void main(String[] args) {$/;"	m	class:Reflection	access:public	signature:(String[] args)
Reflection.output	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static void output(String s) {$/;"	m	class:Reflection	access:default	signature:(String s)
Reflection.putClassInfo	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    private static void putClassInfo(Hashtable map, Class clazz) {$/;"	m	class:Reflection	file:	access:private	signature:(Hashtable map, Class clazz)
Reflection.putItem	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    public static void putItem(Hashtable map, String parent, String child, int index) {$/;"	m	class:Reflection	access:public	signature:(Hashtable map, String parent, String child, int index)
Reflection.putPackageInfo	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    private static void putPackageInfo(Hashtable map, String name) {$/;"	m	class:Reflection	file:	access:private	signature:(Hashtable map, String name)
Reflection.usage	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    private static void usage() {$/;"	m	class:Reflection	file:	access:private	signature:()
RefreshEntriesFromDir	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! s:RefreshEntriesFromDir(recursive)$/;"	f
Regrep	C:\programs\gvim\vimfiles\plugin\grep.vim	/^command! -nargs=* -complete=file Regrep$/;"	c
RegrepAdd	C:\programs\gvim\vimfiles\plugin\grep.vim	/^command! -nargs=* -complete=file RegrepAdd$/;"	c
RemoveBlockComments	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:RemoveBlockComments(str, ...)$/;"	f
RemoveCComments	C:\programs\gvim\vimfiles\autoload\omni\cpp\utils.vim	/^function! s:RemoveCComments(szLine)$/;"	f
RemoveDelimiters	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:RemoveDelimiters(left, right, line)$/;"	f
RemoveSnippet	C:\programs\gvim\vimfiles\autoload\snipMate.vim	/^fun s:RemoveSnippet()$/;"	f
ReplaceDelims	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:ReplaceDelims(toReplace1, toReplace2, replacor1, replacor2, str)$/;"	f
ReplaceLeftMostDelim	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:ReplaceLeftMostDelim(toReplace, replacor, str)$/;"	f
ReplaceRightMostDelim	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:ReplaceRightMostDelim(toReplace, replacor, str)$/;"	f
ReportSyntaxError	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:ReportSyntaxError(pos, key, ...)$/;"	f
ResetSnippets	C:\programs\gvim\vimfiles\plugin\snipMate.vim	/^fun! ResetSnippets()$/;"	f
ResolveAliasInNamespaceList	C:\programs\gvim\vimfiles\autoload\omni\cpp\namespaces.vim	/^function! s:ResolveAliasInNamespaceList(mapNamespaceAlias, listNamespaces)$/;"	f
ResolveAliasKey	C:\programs\gvim\vimfiles\autoload\omni\cpp\namespaces.vim	/^function! s:ResolveAliasKey(mapNamespaceAlias, szAlias)$/;"	f
ResolveAliasKeys	C:\programs\gvim\vimfiles\autoload\omni\cpp\namespaces.vim	/^function! s:ResolveAliasKeys(mapNamespaceAlias)$/;"	f
ResolveCCast	C:\programs\gvim\vimfiles\autoload\omni\cpp\items.vim	/^function! s:ResolveCCast(tokens)$/;"	f
ResolveCast	C:\programs\gvim\vimfiles\autoload\omni\cpp\items.vim	/^function! s:ResolveCast(tokens, startChar, endChar)$/;"	f
ResolveCppCast	C:\programs\gvim\vimfiles\autoload\omni\cpp\items.vim	/^function! s:ResolveCppCast(tokens)$/;"	f
ResolveNamespace	C:\programs\gvim\vimfiles\autoload\omni\cpp\namespaces.vim	/^function! s:ResolveNamespace(namespace, mapCurrentContexts)$/;"	f
ResolveSymbol	C:\programs\gvim\vimfiles\autoload\omni\cpp\items.vim	/^function! s:ResolveSymbol(contextStack, szSymbol, szTagFilter)$/;"	f
RestoreMark	C:\programs\gvim\vimfiles\plugin\cecutil.vim	/^fun! RestoreMark(markname)$/;"	f
RestoreScreenState	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:RestoreScreenState()$/;"	f
RestoreSettings	C:\programs\gvim\vimfiles\autoload\vimball.vim	/^fun! s:RestoreSettings()$/;"	f
RestoreUserMaps	C:\programs\gvim\vimfiles\plugin\cecutil.vim	/^fun! RestoreUserMaps(suffix)$/;"	f
RestoreWinPosn	C:\programs\gvim\vimfiles\plugin\cecutil.vim	/^fun! RestoreWinPosn(...)$/;"	f
RestoreWindowSettings2	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! s:RestoreWindowSettings2(id)$/;"	f
Rfgrep	C:\programs\gvim\vimfiles\plugin\grep.vim	/^command! -nargs=* -complete=file Rfgrep$/;"	c
RfgrepAdd	C:\programs\gvim\vimfiles\plugin\grep.vim	/^command! -nargs=* -complete=file RfgrepAdd$/;"	c
Rgrep	C:\programs\gvim\vimfiles\plugin\grep.vim	/^command! -nargs=* -complete=file Rgrep$/;"	c
RgrepAdd	C:\programs\gvim\vimfiles\plugin\grep.vim	/^command! -nargs=* -complete=file RgrepAdd$/;"	c
Right	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:Right(...)$/;"	f
RightMostIndx	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:RightMostIndx(countCommentedLines, countEmptyLines, topline, bottomline)$/;"	f
RmVimball	C:\programs\gvim\vimfiles\plugin\vimballPlugin.vim	/^com! -na=* -complete=dir  RmVimball   call vimball#RmVimball(<f-args>)$/;"	c
RunGrep	C:\programs\gvim\vimfiles\plugin\grep.vim	/^function! RunGrep(cmd_name, grep_cmd, action, ...)$/;"	f
RunGrepCmd	C:\programs\gvim\vimfiles\plugin\grep.vim	/^function! s:RunGrepCmd(cmd, pattern, action)$/;"	f
RunGrepRecursive	C:\programs\gvim\vimfiles\plugin\grep.vim	/^function! s:RunGrepRecursive(cmd_name, grep_cmd, action, ...)$/;"	f
RunGrepSpecial	C:\programs\gvim\vimfiles\plugin\grep.vim	/^function! s:RunGrepSpecial(cmd_name, which, action, ...)$/;"	f
RunReflection	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:RunReflection(option, args, log)$/;"	f
S	C:\programs\gvim\vimfiles\plugin\surround.vim	/^            vmap  S    <Plug>VSurround$/;"	m
SM	C:\programs\gvim\vimfiles\plugin\cecutil.vim	/^com! -bar -nargs=1 SM	call SaveMark(<q-args>)$/;"	c
SNR	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! s:SNR()$/;"	f
STRATEGY_ALPHABETIC	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final int STRATEGY_ALPHABETIC	= 128;$/;"	f	class:Reflection	access:default
STRATEGY_DEFAULT	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final int STRATEGY_DEFAULT		= 512;$/;"	f	class:Reflection	access:default
STRATEGY_HIERARCHY	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final int STRATEGY_HIERARCHY		= 256;$/;"	f	class:Reflection	access:default
SWP	C:\programs\gvim\vimfiles\plugin\cecutil.vim	/^com! -bar -nargs=0 SWP	call SaveWinPosn()$/;"	c
SaveMark	C:\programs\gvim\vimfiles\plugin\cecutil.vim	/^fun! SaveMark(markname)$/;"	f
SaveScreenState	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:SaveScreenState()$/;"	f
SaveSettings	C:\programs\gvim\vimfiles\autoload\vimball.vim	/^fun! s:SaveSettings()$/;"	f
SaveUserMaps	C:\programs\gvim\vimfiles\plugin\cecutil.vim	/^fun! SaveUserMaps(mapmode,maplead,mapchx,suffix)$/;"	f
SaveWinPosn	C:\programs\gvim\vimfiles\plugin\cecutil.vim	/^fun! SaveWinPosn(...)$/;"	f
ScrollRotateFunction	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^command! -n=1 ScrollRotateFunction :call s:ScrollRotateFunction('<args>')$/;"	c
ScrollRotateFunction	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^func s:ScrollRotateFunction(options)$/;"	f
SearchDecl	C:\programs\gvim\vimfiles\autoload\omni\cpp\items.vim	/^function! s:SearchDecl(szVariable)$/;"	f
SearchForName	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:SearchForName(name, first, fullmatch)$/;"	f
SearchGlobalMembers	C:\programs\gvim\vimfiles\autoload\omni\cpp\complete.vim	/^function! s:SearchGlobalMembers(szBase)$/;"	f
SearchMember	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:SearchMember(ci, name, fullmatch, kind, returnAll, memberkind, ...)$/;"	f
SearchMembers	C:\programs\gvim\vimfiles\autoload\omni\cpp\complete.vim	/^function! s:SearchMembers(resolvedTagItem, szBase)$/;"	f
SearchNameInAST	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:SearchNameInAST(tree, name, targetPos, fullmatch)$/;"	f
SearchPairBackward	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^function! s:SearchPairBackward(str, idx, one, another)$/;"	f
SearchRegisterLikePattern	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^function! SearchRegisterLikePattern() $/;"	f
SearchSingleTypeImport	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:SearchSingleTypeImport(name, fqns)$/;"	f
SearchStaticImports	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:SearchStaticImports(name, fullmatch)$/;"	f
SearchTypeAt	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:SearchTypeAt(tree, targetPos, ...)$/;"	f
SearchTypeInfoOfDecl	C:\programs\gvim\vimfiles\autoload\omni\cpp\items.vim	/^function! s:SearchTypeInfoOfDecl(szVariable)$/;"	f
Searchdecl	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:Searchdecl(name, ...)$/;"	f
Select	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:Select(pos, selected, name)$/;"	f
SelectAll	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\popup_menus.vim	/^func! <SID>SelectAll()$/;"	f
SelectWord	C:\programs\gvim\vimfiles\autoload\snipMate.vim	/^fun s:SelectWord()$/;"	f
SetCompletionType	C:\programs\gvim\vimfiles\plugin\supertab.vim	/^function! s:SetCompletionType()$/;"	f
SetCurrentFileKey	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:SetCurrentFileKey()$/;"	f
SetDefaultCompletionType	C:\programs\gvim\vimfiles\plugin\supertab.vim	/^function! s:SetDefaultCompletionType()$/;"	f
SetRigsterCopyPaste	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\registers.vim	/^func SetRigsterCopyPaste(alpha)$/;"	f
SetSuperMark	C:\programs\gvim\vimfiles\plugin\fwk_marks.vim	/^command! -n=1 SetSuperMark  :call s:Fwk_bookmarks_marks_saveMark('<args>')$/;"	c
SetUpForNewFiletype	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:SetUpForNewFiletype(filetype, forceReset)$/;"	f
SetupAutoCommand	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! s:SetupAutoCommand(cwd)$/;"	f
SetupBuf	C:\programs\gvim\vimfiles\autoload\lookupfile.vim	/^function! s:SetupBuf()$/;"	f
SetupScriptAutoCommand	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! s:SetupScriptAutoCommand(bufcmd, script)$/;"	f
SetupSyntax	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^function! <SID>SetupSyntax()$/;"	f
ShowAvailableSnips	C:\programs\gvim\vimfiles\plugin\snipMate.vim	/^fun! ShowAvailableSnips()$/;"	f
ShowFiller	C:\programs\gvim\vimfiles\autoload\lookupfile.vim	/^function! s:ShowFiller()$/;"	f
ShowWatch	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:ShowWatch(...)$/;"	f
ShowWrongSpaces	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^function! ShowWrongSpaces () $/;"	f
SkipLineComment	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:SkipLineComment()$/;"	f
Sort	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:Sort(ci)$/;"	f
Sort	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^func! <SID>Sort(cmp) range$/;"	f
SortR	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^func! <SID>SortR(start, end, cmp)$/;"	f
SortR	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! s:SortR(start, end)$/;"	f
Spawn	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! s:Spawn(number)$/;"	f
SpawnAll	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! s:SpawnAll(recurse, number)$/;"	f
SplitAt	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:SplitAt(str, index)$/;"	f
SplitTabsSilent	C:\programs\gvim\vimfiles\plugin\fwk_tab_aranger.vim	/^command! -n=? -complete=file SplitTabsSilent    :call s:OpenTabSilentFunction('<args>', 'split_h')$/;"	c
Strcmp	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^func! <SID>Strcmp(str1, str2)$/;"	f
Stridx	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:Stridx(needle)$/;"	f
String2Flags	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:String2Flags(str)$/;"	f
Strlen	C:\programs\gvim\vimfiles\autoload\Align.vim	/^fun! s:Strlen(x)$/;"	f
Strpart	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! Strpart(start, len)$/;"	f
SuperTab	C:\programs\gvim\vimfiles\plugin\supertab.vim	/^function! s:SuperTab(command)$/;"	f
SuperTabAlternateCompletion	C:\programs\gvim\vimfiles\plugin\supertab.vim	/^function! SuperTabAlternateCompletion(type)$/;"	f
SuperTabHelp	C:\programs\gvim\vimfiles\plugin\supertab.vim	/^    command SuperTabHelp :call <SID>SuperTabHelp()$/;"	c
SuperTabHelp	C:\programs\gvim\vimfiles\plugin\supertab.vim	/^function! s:SuperTabHelp()$/;"	f
SuperTabSetCompletionType	C:\programs\gvim\vimfiles\plugin\supertab.vim	/^function! SuperTabSetCompletionType(type)$/;"	f
SuperTabSetDefaultCompletionType	C:\programs\gvim\vimfiles\plugin\supertab.vim	/^function! SuperTabSetDefaultCompletionType(type)$/;"	f
SwapOutterMultiPartDelimsForPlaceHolders	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:SwapOutterMultiPartDelimsForPlaceHolders(line)$/;"	f
SwapOutterPlaceHoldersForMultiPartDelims	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:SwapOutterPlaceHoldersForMultiPartDelims(line)$/;"	f
SwitchSourceHeader	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^function! SwitchSourceHeader() $/;"	f
SwitchToAlternativeDelimiters	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:SwitchToAlternativeDelimiters(printMsgs)$/;"	f
SwitchToNextBuffer	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^function! SwitchToNextBuffer(incr) $/;"	f
SyntaxError	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:SyntaxError(key, ...)$/;"	f
System	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:System(cmd, caller)$/;"	f
TabPos_ActivateBuffer	C:\programs\gvim\vimfiles\plugin\bufpos.vim	/^function! TabPos_ActivateBuffer(num)$/;"	f
TabSpace	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:TabSpace()$/;"	f
TabbedCol	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:TabbedCol(line, col)$/;"	f
TagList_IsValid	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! TagList_IsValid()$/;"	f
TagList_Start	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! TagList_Start()$/;"	f
TagList_WrapUp	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! TagList_WrapUp()$/;"	f
TagList_title	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^    let TagList_title = "__Tag_List__"$/;"	v
TagMatch1	C:\programs\gvim\vimfiles\ftplugin\xml.vim	/^function s:TagMatch1()$/;"	f
TagMatch2	C:\programs\gvim\vimfiles\ftplugin\xml.vim	/^function s:TagMatch2(tag,endtag)$/;"	f
TagPopupList	C:\programs\gvim\vimfiles\autoload\omni\cpp\complete.vim	/^function! s:TagPopupList(szTypeName, szBase)$/;"	f
TailOfQN	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:TailOfQN(qn)$/;"	f
Tlist	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^    command! -nargs=0 -bar Tlist TlistToggle$/;"	c
TlistAddFiles	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^    command! -nargs=+ -complete=file TlistAddFiles$/;"	c
TlistAddFilesRecursive	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^    command! -nargs=+ -complete=dir TlistAddFilesRecursive$/;"	c
TlistClose	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^    command! -nargs=0 -bar TlistClose call s:Tlist_Window_Close()$/;"	c
TlistDebug	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^    command! -nargs=? -complete=file -bar TlistDebug$/;"	c
TlistHighlightTag	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^    command! -nargs=0 -bar TlistHighlightTag call s:Tlist_Window_Highlight_Tag($/;"	c
TlistLock	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^    command! -bar TlistLock let Tlist_Auto_Update=0$/;"	c
TlistMessages	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^    command! -nargs=0 -bar TlistMessages call s:Tlist_Debug_Show()$/;"	c
TlistOpen	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^    command! -nargs=0 -bar TlistOpen call s:Tlist_Window_Open()$/;"	c
TlistSessionLoad	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^    command! -nargs=* -complete=file TlistSessionLoad$/;"	c
TlistSessionSave	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^    command! -nargs=* -complete=file TlistSessionSave$/;"	c
TlistShowPrototype	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^    command! -nargs=* -complete=buffer TlistShowPrototype$/;"	c
TlistShowTag	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^    command! -nargs=* -complete=buffer TlistShowTag$/;"	c
TlistSync	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^    command! -nargs=0 -bar TlistSync TlistHighlightTag$/;"	c
TlistToggle	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^    command! -nargs=0 -bar TlistToggle call s:Tlist_Window_Toggle()$/;"	c
TlistUndebug	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^    command! -nargs=0 -bar TlistUndebug  call s:Tlist_Debug_Disable()$/;"	c
TlistUnlock	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^    command! -bar TlistUnlock let Tlist_Auto_Update=1$/;"	c
TlistUpdate	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^    command! -nargs=0 -bar TlistUpdate call s:Tlist_Update_Current_File()$/;"	c
Tlist_Add_Files	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Add_Files(...)$/;"	f
Tlist_Add_Files_Recursive	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Add_Files_Recursive(dir, ...)$/;"	f
Tlist_Auto_Highlight_Tag	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^        let Tlist_Auto_Highlight_Tag = 1$/;"	v
Tlist_Auto_Open	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^        let Tlist_Auto_Open = 0$/;"	v
Tlist_Auto_Update	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^        let Tlist_Auto_Update = 1$/;"	v
Tlist_Ballon_Expr	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! Tlist_Ballon_Expr()$/;"	f
Tlist_Buffer_Removed	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Buffer_Removed(filename)$/;"	f
Tlist_Change_Sort	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Change_Sort(caller, action, sort_type)$/;"	f
Tlist_Close_On_Select	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^        let Tlist_Close_On_Select = 0$/;"	v
Tlist_Compact_Format	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^        let Tlist_Compact_Format = 0$/;"	v
Tlist_Ctags_Cmd	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^            let Tlist_Ctags_Cmd = 'ctags'$/;"	v
Tlist_Ctags_Cmd	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^            let Tlist_Ctags_Cmd = 'ctags.exe'$/;"	v
Tlist_Ctags_Cmd	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^            let Tlist_Ctags_Cmd = 'exctags'$/;"	v
Tlist_Ctags_Cmd	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^            let Tlist_Ctags_Cmd = 'exuberant-ctags'$/;"	v
Tlist_Ctags_Cmd	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^            let Tlist_Ctags_Cmd = 'tags'$/;"	v
Tlist_Debug_Disable	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Debug_Disable(...)$/;"	f
Tlist_Debug_Enable	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Debug_Enable(...)$/;"	f
Tlist_Debug_Show	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Debug_Show()$/;"	f
Tlist_Detect_Filetype	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Detect_Filetype(fname)$/;"	f
Tlist_Discard_FileInfo	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Discard_FileInfo(fidx)$/;"	f
Tlist_Discard_TagInfo	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Discard_TagInfo(fidx)$/;"	f
Tlist_Display_Prototype	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^        let Tlist_Display_Prototype = 0$/;"	v
Tlist_Display_Tag_Scope	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^        let Tlist_Display_Tag_Scope = 1$/;"	v
Tlist_Enable_Fold_Column	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^        let Tlist_Enable_Fold_Column = 1$/;"	v
Tlist_Exe_Cmd_No_Acmds	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Exe_Cmd_No_Acmds(cmd)$/;"	f
Tlist_Exit_OnlyWindow	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^        let Tlist_Exit_OnlyWindow = 0$/;"	v
Tlist_Extract_Tag_Scope	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Extract_Tag_Scope(tag_line)$/;"	f
Tlist_Extract_Tagtype	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Extract_Tagtype(tag_line)$/;"	f
Tlist_FileType_Init	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_FileType_Init(ftype)$/;"	f
Tlist_File_Fold_Auto_Close	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^        let Tlist_File_Fold_Auto_Close = 0$/;"	v
Tlist_Find_Nearest_Tag_Idx	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Find_Nearest_Tag_Idx(fidx, linenum)$/;"	f
Tlist_GainFocus_On_ToggleOpen	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^        let Tlist_GainFocus_On_ToggleOpen = 0$/;"	v
Tlist_Get_Buffer_Filetype	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Get_Buffer_Filetype(bnum)$/;"	f
Tlist_Get_File_Index	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Get_File_Index(fname)$/;"	f
Tlist_Get_Tag_Linenum	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Get_Tag_Linenum(fidx, tidx)$/;"	f
Tlist_Get_Tag_Prototype	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Get_Tag_Prototype(fidx, tidx)$/;"	f
Tlist_Get_Tag_Prototype_By_Line	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! Tlist_Get_Tag_Prototype_By_Line(...)$/;"	f
Tlist_Get_Tag_SearchPat	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Get_Tag_SearchPat(fidx, tidx)$/;"	f
Tlist_Get_Tag_Type_By_Tag	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Get_Tag_Type_By_Tag(fidx, tidx)$/;"	f
Tlist_Get_Tagname_By_Line	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! Tlist_Get_Tagname_By_Line(...)$/;"	f
Tlist_Highlight_Tag_On_BufEnter	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^        let Tlist_Highlight_Tag_On_BufEnter = 1$/;"	v
Tlist_Inc_Winwidth	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^            let Tlist_Inc_Winwidth = 0$/;"	v
Tlist_Inc_Winwidth	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^            let Tlist_Inc_Winwidth = 1$/;"	v
Tlist_Init_File	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Init_File(filename, ftype)$/;"	f
Tlist_Log_Msg	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Log_Msg(msg)$/;"	f
Tlist_Max_Submenu_Items	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^        let Tlist_Max_Submenu_Items = 20$/;"	v
Tlist_Max_Tag_Length	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^        let Tlist_Max_Tag_Length = 10$/;"	v
Tlist_Menu_Add_Base_Menu	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Menu_Add_Base_Menu()$/;"	f
Tlist_Menu_File_Refresh	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Menu_File_Refresh(fidx)$/;"	f
Tlist_Menu_Get_Tag_Type_Cmd	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Menu_Get_Tag_Type_Cmd(fidx, ftype, add_ttype_name, ttype_idx)$/;"	f
Tlist_Menu_Init	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Menu_Init()$/;"	f
Tlist_Menu_Jump_To_Tag	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Menu_Jump_To_Tag(tidx)$/;"	f
Tlist_Menu_Refresh	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Menu_Refresh()$/;"	f
Tlist_Menu_Remove_File	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Menu_Remove_File()$/;"	f
Tlist_Menu_Update_File	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Menu_Update_File(clear_menu)$/;"	f
Tlist_Parse_Tagline	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Parse_Tagline(tag_line)$/;"	f
Tlist_Post_Close_Cleanup	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Post_Close_Cleanup()$/;"	f
Tlist_Process_Dir	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Process_Dir(dir_name, pat)$/;"	f
Tlist_Process_File	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Process_File(filename, ftype)$/;"	f
Tlist_Process_File_Always	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^        let Tlist_Process_File_Always = 0$/;"	v
Tlist_Process_Filelist	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Process_Filelist(file_names)$/;"	f
Tlist_Refresh	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Refresh()$/;"	f
Tlist_Refresh_Folds	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Refresh_Folds()$/;"	f
Tlist_Remove_File	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Remove_File(file_idx, user_request)$/;"	f
Tlist_Session_Load	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Session_Load(...)$/;"	f
Tlist_Session_Save	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Session_Save(...)$/;"	f
Tlist_Set_App	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! Tlist_Set_App(name)$/;"	f
Tlist_Show_Menu	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^        let Tlist_Show_Menu = 0$/;"	v
Tlist_Show_One_File	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^        let Tlist_Show_One_File = 0$/;"	v
Tlist_Skip_File	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Skip_File(filename, ftype)$/;"	f
Tlist_Sort_Type	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^        let Tlist_Sort_Type = 'order'$/;"	v
Tlist_Update_Current_File	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Update_Current_File()$/;"	f
Tlist_Update_File	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! Tlist_Update_File(filename, ftype)$/;"	f
Tlist_Update_Remove_List	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Update_Remove_List(filename, add)$/;"	f
Tlist_Use_Horiz_Window	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^        let Tlist_Use_Horiz_Window = 0$/;"	v
Tlist_Use_Right_Window	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^        let Tlist_Use_Right_Window = 0$/;"	v
Tlist_Use_SingleClick	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^        let Tlist_Use_SingleClick = 0$/;"	v
Tlist_User_Removed_File	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_User_Removed_File(filename)$/;"	f
Tlist_Vim_Session_Load	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Vim_Session_Load()$/;"	f
Tlist_Warning_Msg	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Warning_Msg(msg)$/;"	f
Tlist_WinHeight	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^        let Tlist_WinHeight = 10$/;"	v
Tlist_WinWidth	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^        let Tlist_WinWidth = 30$/;"	v
Tlist_Window_Check_Auto_Open	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Window_Check_Auto_Open()$/;"	f
Tlist_Window_Check_Width	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Window_Check_Width()$/;"	f
Tlist_Window_Close	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Window_Close()$/;"	f
Tlist_Window_Create	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Window_Create()$/;"	f
Tlist_Window_Display_Help	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Window_Display_Help()$/;"	f
Tlist_Window_Exit_Only_Window	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Window_Exit_Only_Window()$/;"	f
Tlist_Window_Get_File_Index_By_Linenum	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Window_Get_File_Index_By_Linenum(lnum)$/;"	f
Tlist_Window_Get_Tag_Index	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Window_Get_Tag_Index(fidx, lnum)$/;"	f
Tlist_Window_Get_Tag_Type_By_Linenum	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Window_Get_Tag_Type_By_Linenum(fidx, lnum)$/;"	f
Tlist_Window_Goto_Window	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Window_Goto_Window()$/;"	f
Tlist_Window_Highlight_Line	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Window_Highlight_Line()$/;"	f
Tlist_Window_Highlight_Tag	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Window_Highlight_Tag(filename, cur_lnum, cntx, center)$/;"	f
Tlist_Window_Init	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Window_Init()$/;"	f
Tlist_Window_Jump_To_Tag	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Window_Jump_To_Tag(win_ctrl)$/;"	f
Tlist_Window_Mark_File_Window	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Window_Mark_File_Window()$/;"	f
Tlist_Window_Move_To_File	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Window_Move_To_File(dir)$/;"	f
Tlist_Window_Open	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Window_Open()$/;"	f
Tlist_Window_Open_File	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Window_Open_File(win_ctrl, filename, tagpat)$/;"	f
Tlist_Window_Open_File_Fold	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Window_Open_File_Fold(acmd_bufnr)$/;"	f
Tlist_Window_Refresh	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Window_Refresh()$/;"	f
Tlist_Window_Refresh_File	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Window_Refresh_File(filename, ftype)$/;"	f
Tlist_Window_Remove_File_From_Display	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Window_Remove_File_From_Display(fidx)$/;"	f
Tlist_Window_Show_Info	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Window_Show_Info()$/;"	f
Tlist_Window_Toggle	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Window_Toggle()$/;"	f
Tlist_Window_Toggle_Help_Text	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Window_Toggle_Help_Text()$/;"	f
Tlist_Window_Update_File	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Window_Update_File()$/;"	f
Tlist_Window_Update_Line_Offsets	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Window_Update_Line_Offsets(start_idx, increment, offset)$/;"	f
Tlist_Window_Zoom	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^function! s:Tlist_Window_Zoom()$/;"	f
TokensToString	C:\programs\gvim\vimfiles\autoload\omni\cpp\items.vim	/^function! s:TokensToString(tokens)$/;"	f
Trace	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:Trace(msg)$/;"	f
Trace	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:Trace(msg)$/;"	f
Tree2ClassInfo	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:Tree2ClassInfo(t)$/;"	f
TriggerSnippet	C:\programs\gvim\vimfiles\plugin\snipMate.vim	/^fun! TriggerSnippet()$/;"	f
Trim	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:Trim(str)$/;"	f
TwoMatchColor	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^function TwoMatchColor(first, second) $/;"	f
TypeArray	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:TypeArray(pos, elementtype)$/;"	f
TypeCast	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:TypeCast(pos, clazz, expr)$/;"	f
UnEsc	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:UnEsc(str, escChar)$/;"	f
Unary	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:Unary(pos, opcode, arg)$/;"	f
UncommentLineNormal	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:UncommentLineNormal(line)$/;"	f
UncommentLines	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:UncommentLines(topLine, bottomLine)$/;"	f
UncommentLinesNormal	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:UncommentLinesNormal(topline, bottomline)$/;"	f
UncommentLinesSexy	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:UncommentLinesSexy(topline, bottomline)$/;"	f
UntabbedCol	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^function s:UntabbedCol(line, col)$/;"	f
UpdateChangedSnip	C:\programs\gvim\vimfiles\autoload\snipMate.vim	/^fun s:UpdateChangedSnip(entering)$/;"	f
UpdateFQN	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:UpdateFQN(tree, qn)$/;"	f
UpdatePlaceholderTabStops	C:\programs\gvim\vimfiles\autoload\snipMate.vim	/^fun s:UpdatePlaceholderTabStops()$/;"	f
UpdateTabStops	C:\programs\gvim\vimfiles\autoload\snipMate.vim	/^fun s:UpdateTabStops()$/;"	f
UpdateVars	C:\programs\gvim\vimfiles\autoload\snipMate.vim	/^fun s:UpdateVars()$/;"	f
UseVimball	C:\programs\gvim\vimfiles\plugin\vimballPlugin.vim	/^com! -na=? -complete=dir  UseVimball  call vimball#Vimball(1,<f-args>)$/;"	c
VERSION	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static final String VERSION	= "0.77";$/;"	f	class:Reflection	access:default
VarDef	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:VarDef(pos, mods, name, vartype)$/;"	f
VimDirListing	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! s:VimDirListing(filter, padding, separator, filevariable, filecount, dirvariable, dircount)$/;"	f
VimballHome	C:\programs\gvim\vimfiles\autoload\vimball.vim	/^fun! s:VimballHome()$/;"	f
VimballList	C:\programs\gvim\vimfiles\plugin\vimballPlugin.vim	/^com! -na=0                VimballList call vimball#Vimball(0)$/;"	c
VisualTag	C:\programs\gvim\vimfiles\ftplugin\xml.vim	/^function s:VisualTag( ) $/;"	f
WatchVariant	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:WatchVariant(variant)$/;"	f
WillComplete	C:\programs\gvim\vimfiles\plugin\supertab.vim	/^function! s:WillComplete()$/;"	f
WipeAll	C:\programs\gvim\vimfiles\plugin\project.vim	/^    function! s:WipeAll(recurse, line)$/;"	f
WordCopyPasteFunction	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^func! WordCopyPasteFunction(pattern) $/;"	f
Worker	C:\programs\gvim\vimfiles\autoload\l9\async.py	/^class Worker(threading.Thread):$/;"	c	inherits:threading.Thread
WrapTag	C:\programs\gvim\vimfiles\ftplugin\xml.vim	/^function s:WrapTag(text)$/;"	f
\m	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\popup_menus.vim	/^map \\m :popup! PopUp<CR>$/;"	m
\s'	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\maps_regex.vim	/^map \\s' :1,$s\/^\/"\/$/;"	m
\s2	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\maps_regex.vim	/^map \\s2 :call TwoMatchColor("","") <Left><Left><Left><Left><Left><Left>$/;"	m
\sb	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\maps_regex.vim	/^map \\sb :Bufdo %s\/\/\/g \\| update<C-Left><C-Left><Left><Left><Left><Left>$/;"	m
\sc	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\maps_regex.vim	/^cmap \\sc :s:\\s\\{1,\\}$::g$/;"	m
\sc	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\maps_regex.vim	/^map  \\sc :%s:\\s\\{1,\\}$::g$/;"	m
\se	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\maps_regex.vim	/^cmap \\se :s\/^[\\ \\t]*\\n\/\/g$/;"	m
\se	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\maps_regex.vim	/^map  \\se :%s\/^[\\ \\t]*\\n\/\/g$/;"	m
\se	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\maps_regex.vim	/^map \\se :.,$s\/^[\\ \\t]*\\n\/\/g$/;"	m
\sg	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\maps_regex.vim	/^map \\sg :%s\/\\<\\>\/\/g<Left><Left><Left><Left><Left>$/;"	m
\sg	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\maps_regex.vim	/^vmap \\sg :s\/\\<\\>\/\/g<Left><Left><Left><Left><Left>$/;"	m
\si	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\maps_regex.vim	/^map \\si :%s\/^I\/ \/g<Left><Left><Left><Left><Left>$/;"	m
\sm	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\maps_regex.vim	/^map \\sm :%s\/\\r\/\/g<Left><Left><Left><Left><Left>$/;"	m
\sp	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\maps_regex.vim	/^map \\sp :%s\/\/\/g<Left><Left><Left>$/;"	m
\sp	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\maps_regex.vim	/^vmap \\sp :s\/\/\/g<Left><Left><Left>$/;"	m
\sr	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\maps_regex.vim	/^map \\sr 0:s:\\\\:\\\/:g<CR>$/;"	m
__init__	C:\programs\gvim\vimfiles\autoload\l9\async.py	/^    def __init__(self):$/;"	m	class:Asyncer	access:public
__init__	C:\programs\gvim\vimfiles\autoload\l9\async.py	/^    def __init__(self):$/;"	m	class:Worker	access:public
__init__	C:\programs\gvim\vimfiles\autoload\l9\async.py	/^    def __init__(self, command, cwd, input, appends):$/;"	m	class:Executor	access:public
_makeArgumentList	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! s:_makeArgumentList()$/;"	f
_makeArgumentString	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! s:_makeArgumentString()$/;"	f
accept	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:accept(token_type)$/;"	f
acp#completeSnipmate	C:\programs\gvim\vimfiles\autoload\acp.vim	/^function acp#completeSnipmate(findstart, base)$/;"	f
acp#disable	C:\programs\gvim\vimfiles\autoload\acp.vim	/^function acp#disable()$/;"	f
acp#enable	C:\programs\gvim\vimfiles\autoload\acp.vim	/^function acp#enable()$/;"	f
acp#lock	C:\programs\gvim\vimfiles\autoload\acp.vim	/^function acp#lock()$/;"	f
acp#meetsForCssOmni	C:\programs\gvim\vimfiles\autoload\acp.vim	/^function acp#meetsForCssOmni(context)$/;"	f
acp#meetsForFile	C:\programs\gvim\vimfiles\autoload\acp.vim	/^function acp#meetsForFile(context)$/;"	f
acp#meetsForHtmlOmni	C:\programs\gvim\vimfiles\autoload\acp.vim	/^function acp#meetsForHtmlOmni(context)$/;"	f
acp#meetsForKeyword	C:\programs\gvim\vimfiles\autoload\acp.vim	/^function acp#meetsForKeyword(context)$/;"	f
acp#meetsForPerlOmni	C:\programs\gvim\vimfiles\autoload\acp.vim	/^function acp#meetsForPerlOmni(context)$/;"	f
acp#meetsForPythonOmni	C:\programs\gvim\vimfiles\autoload\acp.vim	/^function acp#meetsForPythonOmni(context)$/;"	f
acp#meetsForRubyOmni	C:\programs\gvim\vimfiles\autoload\acp.vim	/^function acp#meetsForRubyOmni(context)$/;"	f
acp#meetsForSnipmate	C:\programs\gvim\vimfiles\autoload\acp.vim	/^function acp#meetsForSnipmate(context)$/;"	f
acp#meetsForXmlOmni	C:\programs\gvim\vimfiles\autoload\acp.vim	/^function acp#meetsForXmlOmni(context)$/;"	f
acp#onBs	C:\programs\gvim\vimfiles\autoload\acp.vim	/^function acp#onBs()$/;"	f
acp#onPopupCloseSnipmate	C:\programs\gvim\vimfiles\autoload\acp.vim	/^function acp#onPopupCloseSnipmate()$/;"	f
acp#onPopupPost	C:\programs\gvim\vimfiles\autoload\acp.vim	/^function acp#onPopupPost()$/;"	f
acp#unlock	C:\programs\gvim\vimfiles\autoload\acp.vim	/^function acp#unlock()$/;"	f
activateFufBuffer	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:activateFufBuffer()$/;"	f
addClasspathesFromDir	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    private static void addClasspathesFromDir(String dirpath) {$/;"	m	class:Reflection	file:	access:private	signature:(String dirpath)
annotation	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:annotation(pos)$/;"	f
annotationFieldValue	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:annotationFieldValue()$/;"	f
annotationFieldValues	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:annotationFieldValues()$/;"	f
annotationFieldValuesOpt	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:annotationFieldValuesOpt()$/;"	f
annotationValue	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:annotationValue()$/;"	f
annotationsOpt	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:annotationsOpt()$/;"	f
appendDeclaredMembers	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    private static void appendDeclaredMembers(Hashtable map, Class clazz, StringBuffer sb) {$/;"	m	class:Reflection	file:	access:private	signature:(Hashtable map, Class clazz, StringBuffer sb)
appendListFromFolder	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    public static void appendListFromFolder(Hashtable subpackages, Hashtable classes, String path, String prefix) {$/;"	m	class:Reflection	access:public	signature:(Hashtable subpackages, Hashtable classes, String path, String prefix)
appendListFromJar	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    public static void appendListFromJar(Hashtable subpackages, Hashtable classes, String path, String prefix) {$/;"	m	class:Reflection	access:public	signature:(Hashtable subpackages, Hashtable classes, String path, String prefix)
appendListFromJar	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    public static void appendListFromJar(String path, Hashtable map) {$/;"	m	class:Reflection	access:public	signature:(String path, Hashtable map)
appendModifier	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    private static void appendModifier(StringBuffer sb, int modifier) {$/;"	m	class:Reflection	file:	access:private	signature:(StringBuffer sb, int modifier)
appendParameterTypes	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    private static void appendParameterTypes(StringBuffer sb, Class[] paramTypes) {$/;"	m	class:Reflection	file:	access:private	signature:(StringBuffer sb, Class[] paramTypes)
arguments	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:arguments(...)$/;"	f
argumentsOpt	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:argumentsOpt(typeArgs, t)$/;"	f
arrayCreatorRest	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:arrayCreatorRest(newpos, elemtype)$/;"	f
arrayInitializer	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:arrayInitializer(newpos, t)$/;"	f
b:c_minlines	C:\programs\gvim\vimfiles\syntax\c.vim	/^    let b:c_minlines = 15       " mostly for () constructs$/;"	v
b:c_minlines	C:\programs\gvim\vimfiles\syntax\c.vim	/^    let b:c_minlines = 50       " #if 0 constructs can be long$/;"	v
b:c_minlines	C:\programs\gvim\vimfiles\syntax\c.vim	/^  let b:c_minlines = c_minlines$/;"	v
b:context_type	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let b:context_type = s:CONTEXT_OTHER$/;"	v
b:current_syntax	C:\programs\gvim\vimfiles\syntax\c.vim	/^let b:current_syntax = "c"$/;"	v
b:current_syntax	C:\programs\gvim\vimfiles\syntax\django.vim	/^let b:current_syntax = "django"$/;"	v
b:current_syntax	C:\programs\gvim\vimfiles\syntax\html.vim	/^let b:current_syntax = "html"$/;"	v
b:current_syntax	C:\programs\gvim\vimfiles\syntax\python.vim	/^let b:current_syntax = "python"$/;"	v
b:did_ftplugin	C:\programs\gvim\vimfiles\ftplugin\conf.vim	/^let b:did_ftplugin = 1$/;"	v
b:dotexpr	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let b:dotexpr = ''			" expression ends with '.'$/;"	v
b:errormsg	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let b:errormsg = ''$/;"	v
b:escape_spaces	C:\programs\gvim\vimfiles\plugin\project.vim	/^                let b:escape_spaces=1$/;"	v
b:html_mode	C:\programs\gvim\vimfiles\ftplugin\html.vim	/^  let b:html_mode = 1$/;"	v
b:incomplete	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let b:incomplete = ''			" incomplete word: 1. dotexpr.method(|) 2. new classname(|) 3. dotexpr.ab|, 4. ja|, 5. method(|$/;"	v
b:last_wrap_atts_used	C:\programs\gvim\vimfiles\ftplugin\xml.vim	/^let b:last_wrap_atts_used = ""$/;"	v
b:last_wrap_tag_used	C:\programs\gvim\vimfiles\ftplugin\xml.vim	/^let b:last_wrap_tag_used = ""$/;"	v
b:undo_ftplugin	C:\programs\gvim\vimfiles\ftplugin\conf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
basicType	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:basicType()$/;"	f
beep	C:\programs\gvim\vimfiles\plugin\surround.vim	/^function! s:beep()$/;"	f
bifRemiderPersPath	C:\programs\gvim\vimfiles\plugin\bufReminderRemake.vim	/^            let bifRemiderPersPath = $HOME . '\/'$/;"	v
bifRemiderPersPath	C:\programs\gvim\vimfiles\plugin\bufReminderRemake.vim	/^            let bifRemiderPersPath = $VIM .  '\/'$/;"	v
bifRemiderPersPath	C:\programs\gvim\vimfiles\plugin\bufReminderRemake.vim	/^        let bifRemiderPersPath = $USERPROFILE . '\\'$/;"	v
bifRemiderPersPath	C:\programs\gvim\vimfiles\plugin\bufReminderRemake.vim	/^    let bifRemiderPersPath = ''$/;"	v
block	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:block(...)$/;"	f
blockStatements	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:blockStatements()$/;"	f
bookmarkHere	C:\programs\gvim\vimfiles\autoload\fuf\bookmark.vim	/^function s:bookmarkHere(word)$/;"	f
bracketsOpt	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:bracketsOpt(t)$/;"	f
bracketsOptCont	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:bracketsOptCont(t, pos)$/;"	f
bracketsSuffix	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:bracketsSuffix(t)$/;"	f
bufRemiderPersFile	C:\programs\gvim\vimfiles\plugin\bufReminderRemake.vim	/^    let bufRemiderPersFile = 'vim_bufReminder.cfg'$/;"	v
bufname	C:\programs\gvim\vimfiles\plugin\project.vim	/^        let bufname=escape(substitute(expand('%:p', 0), '\\\\', '\/', 'g'), ' ')$/;"	v
c_d	C:\programs\gvim\vimfiles\plugin\project.vim	/^                let c_d=s:GetCd(info, '')$/;"	v
catchClause	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:catchClause()$/;"	f
changesurround	C:\programs\gvim\vimfiles\plugin\surround.vim	/^function! s:changesurround() " {{{1$/;"	f
checkExprStat	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:checkExprStat(t)$/;"	f
checkKey	C:\programs\gvim\vimfiles\autoload\l9\async.vim	/^function s:checkKey(key)$/;"	f
classCreatorRest	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:classCreatorRest(newpos, encl, typeArgs, t)$/;"	f
classDeclaration	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:classDeclaration(mods, dc)$/;"	f
classOrInterfaceBody	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:classOrInterfaceBody(classname, isInterface)$/;"	f
classOrInterfaceBodyDeclaration	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:classOrInterfaceBodyDeclaration(classname, isInterface)$/;"	f
classOrInterfaceBodyDeclaration_opt	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:classOrInterfaceBodyDeclaration_opt(classname, isInterface)$/;"	f
classOrInterfaceOrEnumDeclaration	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:classOrInterfaceOrEnumDeclaration(mods, dc)$/;"	f
clear_outputs	C:\programs\gvim\vimfiles\autoload\l9\async.py	/^    def clear_outputs(self):$/;"	m	class:Worker	access:public
closematch	C:\programs\gvim\vimfiles\plugin\surround.vim	/^function! s:closematch(str) " {{{1$/;"	f
collectClassPath	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    private static Hashtable collectClassPath() {$/;"	m	class:Reflection	file:	access:private	signature:()
colors_name	C:\programs\gvim\vimfiles\colors\darkblue.vim	/^let colors_name = "darkblue"$/;"	v
command	C:\programs\gvim\vimfiles\plugin\project.vim	/^                let command=substitute(command, '%F', escape(fnames, '\\'), 'g')$/;"	v
command	C:\programs\gvim\vimfiles\plugin\project.vim	/^                let command=substitute(command, '%d', escape(c_d, '\\'), 'g')$/;"	v
command	C:\programs\gvim\vimfiles\plugin\project.vim	/^                let command=substitute(command, '%h', escape(home, '\\'), 'g')$/;"	v
command	C:\programs\gvim\vimfiles\plugin\project.vim	/^                let command=substitute(command, '%s', escape(fnames, '\\'), 'g')$/;"	v
command	C:\programs\gvim\vimfiles\plugin\project.vim	/^                let command=substitute(g:proj_run_fold{a:number}, '%f', substitute(escape(fnames, '\\'), '\\\\ ', ' ', 'g'), 'g')$/;"	v
commentEnablers	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^augroup commentEnablers$/;"	a
compareTimeDescending	C:\programs\gvim\vimfiles\autoload\fuf\buffer.vim	/^function s:compareTimeDescending(i1, i2)$/;"	f
compilationUnit	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:compilationUnit()$/;"	f
convertUnicode	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:convertUnicode()$/;"	f
convertWildcardToRegexp	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:convertWildcardToRegexp(expr)$/;"	f
copy_outputs	C:\programs\gvim\vimfiles\autoload\l9\async.py	/^    def copy_outputs(self):$/;"	m	class:Worker	access:public
creator	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:creator(newpos, typeArgs)$/;"	f
cs	C:\programs\gvim\vimfiles\plugin\surround.vim	/^    nmap          cs   <Plug>Csurround$/;"	m
deactivateFufBuffer	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:deactivateFufBuffer()$/;"	f
debug	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static void debug(String s) {$/;"	m	class:Reflection	access:default	signature:(String s)
debug_mode	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static boolean debug_mode = false;$/;"	f	class:Reflection	access:default
defineOption	C:\programs\gvim\vimfiles\plugin\fuf.vim	/^function s:defineOption(name, default)$/;"	f
deserializeInfoMap	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:deserializeInfoMap(lines)$/;"	f
detectSCM	C:\programs\gvim\vimfiles\plugin\scmdiff.vim	/^function! s:detectSCM()$/;"	f
did_django_syn_inits	C:\programs\gvim\vimfiles\syntax\django.vim	/^    let did_django_syn_inits = 1$/;"	v
did_drchip_decho_syntax	C:\programs\gvim\vimfiles\syntax\Decho.vim	/^  let did_drchip_decho_syntax= 1$/;"	v
did_html_syn_inits	C:\programs\gvim\vimfiles\syntax\html.vim	/^    let did_html_syn_inits = 1$/;"	v
did_python_syn_inits	C:\programs\gvim\vimfiles\syntax\python.vim	/^    let did_python_syn_inits = 1$/;"	v
digit	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:digit(base)$/;"	f
dosurround	C:\programs\gvim\vimfiles\plugin\surround.vim	/^function! s:dosurround(...) " {{{1$/;"	f
ds	C:\programs\gvim\vimfiles\plugin\surround.vim	/^    nmap          ds   <Plug>Dsurround$/;"	m
enumBody	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:enumBody(enumName)$/;"	f
enumDeclaration	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:enumDeclaration(mods, dc)$/;"	f
enumItems	C:\programs\gvim\vimfiles\autoload\fuf\callbackfile.vim	/^function s:enumItems(dir)$/;"	f
enumItems	C:\programs\gvim\vimfiles\autoload\fuf\dir.vim	/^function s:enumItems(dir)$/;"	f
enumItems	C:\programs\gvim\vimfiles\autoload\fuf\file.vim	/^function s:enumItems(dir)$/;"	f
enumNonCurrentItems	C:\programs\gvim\vimfiles\autoload\fuf\file.vim	/^function s:enumNonCurrentItems(dir, bufNr, cache)$/;"	f
enumTaggedFiles	C:\programs\gvim\vimfiles\autoload\fuf\taggedfile.vim	/^function s:enumTaggedFiles(tagFiles)$/;"	f
enumTags	C:\programs\gvim\vimfiles\autoload\fuf\tag.vim	/^function s:enumTags(tagFiles)$/;"	f
enumeratorDeclaration	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:enumeratorDeclaration(enumName)$/;"	f
evaluateLearningRank	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:evaluateLearningRank(word, stats)$/;"	f
execute	C:\programs\gvim\vimfiles\autoload\l9\async.py	/^    def execute(self, var_key, var_command, var_cwd, var_input, var_appends):$/;"	m	class:Asyncer	access:public
execute	C:\programs\gvim\vimfiles\autoload\l9\async.py	/^    def execute(self, worker):$/;"	m	class:Executor	access:public
existed	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    public static boolean existed(String fqn) {$/;"	m	class:Reflection	access:public	signature:(String fqn)
existedAndRead	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    public static String existedAndRead(String fqns) {$/;"	m	class:Reflection	access:public	signature:(String fqns)
expandAbbrevMap	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:expandAbbrevMap(pattern, abbrevMap)$/;"	f
expression	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:expression()$/;"	f
extractafter	C:\programs\gvim\vimfiles\plugin\surround.vim	/^function! s:extractafter(str)$/;"	f
extractbefore	C:\programs\gvim\vimfiles\plugin\surround.vim	/^function! s:extractbefore(str)$/;"	f
feedPopup	C:\programs\gvim\vimfiles\autoload\acp.vim	/^function s:feedPopup()$/;"	f
filter	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:filter(expr, string)$/;"	f
finishPopup	C:\programs\gvim\vimfiles\autoload\acp.vim	/^function s:finishPopup(fGroup1)$/;"	f
fixindent	C:\programs\gvim\vimfiles\plugin\surround.vim	/^function! s:fixindent(str,spc)$/;"	f
fnamecanonize	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:fnamecanonize(fname, mods)$/;"	f
fnames	C:\programs\gvim\vimfiles\plugin\project.vim	/^                let fnames=Project_GetAllFnames(a:recurse, line('.'), ' ')$/;"	v
foldStrings	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:foldStrings(tree)$/;"	f
forInit	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:forInit()$/;"	f
forUpdate	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:forUpdate()$/;"	f
formalParameter	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:formalParameter()$/;"	f
formalParameters	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:formalParameters()$/;"	f
formatItemUsingCache	C:\programs\gvim\vimfiles\autoload\fuf\mrufile.vim	/^function s:formatItemUsingCache(item)$/;"	f
fuf#bookmark#createHandler	C:\programs\gvim\vimfiles\autoload\fuf\bookmark.vim	/^function fuf#bookmark#createHandler(base)$/;"	f
fuf#bookmark#getSwitchOrder	C:\programs\gvim\vimfiles\autoload\fuf\bookmark.vim	/^function fuf#bookmark#getSwitchOrder()$/;"	f
fuf#bookmark#onInit	C:\programs\gvim\vimfiles\autoload\fuf\bookmark.vim	/^function fuf#bookmark#onInit()$/;"	f
fuf#bookmark#renewCache	C:\programs\gvim\vimfiles\autoload\fuf\bookmark.vim	/^function fuf#bookmark#renewCache()$/;"	f
fuf#bookmark#requiresOnCommandPre	C:\programs\gvim\vimfiles\autoload\fuf\bookmark.vim	/^function fuf#bookmark#requiresOnCommandPre()$/;"	f
fuf#buffer#createHandler	C:\programs\gvim\vimfiles\autoload\fuf\buffer.vim	/^function fuf#buffer#createHandler(base)$/;"	f
fuf#buffer#getSwitchOrder	C:\programs\gvim\vimfiles\autoload\fuf\buffer.vim	/^function fuf#buffer#getSwitchOrder()$/;"	f
fuf#buffer#onInit	C:\programs\gvim\vimfiles\autoload\fuf\buffer.vim	/^function fuf#buffer#onInit()$/;"	f
fuf#buffer#renewCache	C:\programs\gvim\vimfiles\autoload\fuf\buffer.vim	/^function fuf#buffer#renewCache()$/;"	f
fuf#buffer#requiresOnCommandPre	C:\programs\gvim\vimfiles\autoload\fuf\buffer.vim	/^function fuf#buffer#requiresOnCommandPre()$/;"	f
fuf#callbackfile#createHandler	C:\programs\gvim\vimfiles\autoload\fuf\callbackfile.vim	/^function fuf#callbackfile#createHandler(base)$/;"	f
fuf#callbackfile#getSwitchOrder	C:\programs\gvim\vimfiles\autoload\fuf\callbackfile.vim	/^function fuf#callbackfile#getSwitchOrder()$/;"	f
fuf#callbackfile#launch	C:\programs\gvim\vimfiles\autoload\fuf\callbackfile.vim	/^function fuf#callbackfile#launch(initialPattern, partialMatching, prompt, exclude, listener)$/;"	f
fuf#callbackfile#onInit	C:\programs\gvim\vimfiles\autoload\fuf\callbackfile.vim	/^function fuf#callbackfile#onInit()$/;"	f
fuf#callbackfile#renewCache	C:\programs\gvim\vimfiles\autoload\fuf\callbackfile.vim	/^function fuf#callbackfile#renewCache()$/;"	f
fuf#callbackfile#requiresOnCommandPre	C:\programs\gvim\vimfiles\autoload\fuf\callbackfile.vim	/^function fuf#callbackfile#requiresOnCommandPre()$/;"	f
fuf#callbackitem#createHandler	C:\programs\gvim\vimfiles\autoload\fuf\callbackitem.vim	/^function fuf#callbackitem#createHandler(base)$/;"	f
fuf#callbackitem#getSwitchOrder	C:\programs\gvim\vimfiles\autoload\fuf\callbackitem.vim	/^function fuf#callbackitem#getSwitchOrder()$/;"	f
fuf#callbackitem#launch	C:\programs\gvim\vimfiles\autoload\fuf\callbackitem.vim	/^function fuf#callbackitem#launch(initialPattern, partialMatching, prompt, listener, items, forPath)$/;"	f
fuf#callbackitem#onInit	C:\programs\gvim\vimfiles\autoload\fuf\callbackitem.vim	/^function fuf#callbackitem#onInit()$/;"	f
fuf#callbackitem#renewCache	C:\programs\gvim\vimfiles\autoload\fuf\callbackitem.vim	/^function fuf#callbackitem#renewCache()$/;"	f
fuf#callbackitem#requiresOnCommandPre	C:\programs\gvim\vimfiles\autoload\fuf\callbackitem.vim	/^function fuf#callbackitem#requiresOnCommandPre()$/;"	f
fuf#changelist#createHandler	C:\programs\gvim\vimfiles\autoload\fuf\changelist.vim	/^function fuf#changelist#createHandler(base)$/;"	f
fuf#changelist#getSwitchOrder	C:\programs\gvim\vimfiles\autoload\fuf\changelist.vim	/^function fuf#changelist#getSwitchOrder()$/;"	f
fuf#changelist#onInit	C:\programs\gvim\vimfiles\autoload\fuf\changelist.vim	/^function fuf#changelist#onInit()$/;"	f
fuf#changelist#renewCache	C:\programs\gvim\vimfiles\autoload\fuf\changelist.vim	/^function fuf#changelist#renewCache()$/;"	f
fuf#changelist#requiresOnCommandPre	C:\programs\gvim\vimfiles\autoload\fuf\changelist.vim	/^function fuf#changelist#requiresOnCommandPre()$/;"	f
fuf#compareRanks	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function fuf#compareRanks(i1, i2)$/;"	f
fuf#concat	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function fuf#concat(items)$/;"	f
fuf#defineKeyMappingInHandler	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function fuf#defineKeyMappingInHandler(key, func)$/;"	f
fuf#defineLaunchCommand	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function fuf#defineLaunchCommand(CmdName, modeName, prefixInitialPattern)$/;"	f
fuf#dir#createHandler	C:\programs\gvim\vimfiles\autoload\fuf\dir.vim	/^function fuf#dir#createHandler(base)$/;"	f
fuf#dir#getSwitchOrder	C:\programs\gvim\vimfiles\autoload\fuf\dir.vim	/^function fuf#dir#getSwitchOrder()$/;"	f
fuf#dir#onInit	C:\programs\gvim\vimfiles\autoload\fuf\dir.vim	/^function fuf#dir#onInit()$/;"	f
fuf#dir#renewCache	C:\programs\gvim\vimfiles\autoload\fuf\dir.vim	/^function fuf#dir#renewCache()$/;"	f
fuf#dir#requiresOnCommandPre	C:\programs\gvim\vimfiles\autoload\fuf\dir.vim	/^function fuf#dir#requiresOnCommandPre()$/;"	f
fuf#echoWithHl	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function fuf#echoWithHl(msg, hl)$/;"	f
fuf#editInfoFile	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function fuf#editInfoFile()$/;"	f
fuf#enumExpandedDirsEntries	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function fuf#enumExpandedDirsEntries(dir, exclude)$/;"	f
fuf#expandTailDotSequenceToParentDir	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function fuf#expandTailDotSequenceToParentDir(pattern)$/;"	f
fuf#file#createHandler	C:\programs\gvim\vimfiles\autoload\fuf\file.vim	/^function fuf#file#createHandler(base)$/;"	f
fuf#file#getSwitchOrder	C:\programs\gvim\vimfiles\autoload\fuf\file.vim	/^function fuf#file#getSwitchOrder()$/;"	f
fuf#file#onInit	C:\programs\gvim\vimfiles\autoload\fuf\file.vim	/^function fuf#file#onInit()$/;"	f
fuf#file#renewCache	C:\programs\gvim\vimfiles\autoload\fuf\file.vim	/^function fuf#file#renewCache()$/;"	f
fuf#file#requiresOnCommandPre	C:\programs\gvim\vimfiles\autoload\fuf\file.vim	/^function fuf#file#requiresOnCommandPre()$/;"	f
fuf#filterMatchesAndMapToSetRanks	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function fuf#filterMatchesAndMapToSetRanks(items, patternSet, stats)$/;"	f
fuf#filterWithLimit	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function fuf#filterWithLimit(items, expr, limit)$/;"	f
fuf#getCurrentTagFiles	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function fuf#getCurrentTagFiles()$/;"	f
fuf#getRunningHandler	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function fuf#getRunningHandler()$/;"	f
fuf#givencmd#createHandler	C:\programs\gvim\vimfiles\autoload\fuf\givencmd.vim	/^function fuf#givencmd#createHandler(base)$/;"	f
fuf#givencmd#getSwitchOrder	C:\programs\gvim\vimfiles\autoload\fuf\givencmd.vim	/^function fuf#givencmd#getSwitchOrder()$/;"	f
fuf#givencmd#launch	C:\programs\gvim\vimfiles\autoload\fuf\givencmd.vim	/^function fuf#givencmd#launch(initialPattern, partialMatching, prompt, items)$/;"	f
fuf#givencmd#onInit	C:\programs\gvim\vimfiles\autoload\fuf\givencmd.vim	/^function fuf#givencmd#onInit()$/;"	f
fuf#givencmd#renewCache	C:\programs\gvim\vimfiles\autoload\fuf\givencmd.vim	/^function fuf#givencmd#renewCache()$/;"	f
fuf#givencmd#requiresOnCommandPre	C:\programs\gvim\vimfiles\autoload\fuf\givencmd.vim	/^function fuf#givencmd#requiresOnCommandPre()$/;"	f
fuf#givendir#createHandler	C:\programs\gvim\vimfiles\autoload\fuf\givendir.vim	/^function fuf#givendir#createHandler(base)$/;"	f
fuf#givendir#getSwitchOrder	C:\programs\gvim\vimfiles\autoload\fuf\givendir.vim	/^function fuf#givendir#getSwitchOrder()$/;"	f
fuf#givendir#launch	C:\programs\gvim\vimfiles\autoload\fuf\givendir.vim	/^function fuf#givendir#launch(initialPattern, partialMatching, prompt, items)$/;"	f
fuf#givendir#onInit	C:\programs\gvim\vimfiles\autoload\fuf\givendir.vim	/^function fuf#givendir#onInit()$/;"	f
fuf#givendir#renewCache	C:\programs\gvim\vimfiles\autoload\fuf\givendir.vim	/^function fuf#givendir#renewCache()$/;"	f
fuf#givendir#requiresOnCommandPre	C:\programs\gvim\vimfiles\autoload\fuf\givendir.vim	/^function fuf#givendir#requiresOnCommandPre()$/;"	f
fuf#givenfile#createHandler	C:\programs\gvim\vimfiles\autoload\fuf\givenfile.vim	/^function fuf#givenfile#createHandler(base)$/;"	f
fuf#givenfile#getSwitchOrder	C:\programs\gvim\vimfiles\autoload\fuf\givenfile.vim	/^function fuf#givenfile#getSwitchOrder()$/;"	f
fuf#givenfile#launch	C:\programs\gvim\vimfiles\autoload\fuf\givenfile.vim	/^function fuf#givenfile#launch(initialPattern, partialMatching, prompt, items)$/;"	f
fuf#givenfile#onInit	C:\programs\gvim\vimfiles\autoload\fuf\givenfile.vim	/^function fuf#givenfile#onInit()$/;"	f
fuf#givenfile#renewCache	C:\programs\gvim\vimfiles\autoload\fuf\givenfile.vim	/^function fuf#givenfile#renewCache()$/;"	f
fuf#givenfile#requiresOnCommandPre	C:\programs\gvim\vimfiles\autoload\fuf\givenfile.vim	/^function fuf#givenfile#requiresOnCommandPre()$/;"	f
fuf#inputHl	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function fuf#inputHl(prompt, text, hl)$/;"	f
fuf#jumplist#createHandler	C:\programs\gvim\vimfiles\autoload\fuf\jumplist.vim	/^function fuf#jumplist#createHandler(base)$/;"	f
fuf#jumplist#getSwitchOrder	C:\programs\gvim\vimfiles\autoload\fuf\jumplist.vim	/^function fuf#jumplist#getSwitchOrder()$/;"	f
fuf#jumplist#onInit	C:\programs\gvim\vimfiles\autoload\fuf\jumplist.vim	/^function fuf#jumplist#onInit()$/;"	f
fuf#jumplist#renewCache	C:\programs\gvim\vimfiles\autoload\fuf\jumplist.vim	/^function fuf#jumplist#renewCache()$/;"	f
fuf#jumplist#requiresOnCommandPre	C:\programs\gvim\vimfiles\autoload\fuf\jumplist.vim	/^function fuf#jumplist#requiresOnCommandPre()$/;"	f
fuf#launch	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function fuf#launch(modeName, initialPattern, partialMatching)$/;"	f
fuf#loadInfoFile	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function fuf#loadInfoFile(modeName)$/;"	f
fuf#makeNonPathItem	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function fuf#makeNonPathItem(word, menu)$/;"	f
fuf#makePathItem	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function fuf#makePathItem(fname, menu, appendsDirSuffix)$/;"	f
fuf#mapToSetAbbrWithSnippedWordAsPath	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function fuf#mapToSetAbbrWithSnippedWordAsPath(items)$/;"	f
fuf#mapToSetSerialIndex	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function fuf#mapToSetSerialIndex(in, offset)$/;"	f
fuf#mrucmd#createHandler	C:\programs\gvim\vimfiles\autoload\fuf\mrucmd.vim	/^function fuf#mrucmd#createHandler(base)$/;"	f
fuf#mrucmd#getSwitchOrder	C:\programs\gvim\vimfiles\autoload\fuf\mrucmd.vim	/^function fuf#mrucmd#getSwitchOrder()$/;"	f
fuf#mrucmd#onCommandPre	C:\programs\gvim\vimfiles\autoload\fuf\mrucmd.vim	/^function fuf#mrucmd#onCommandPre(cmd)$/;"	f
fuf#mrucmd#onInit	C:\programs\gvim\vimfiles\autoload\fuf\mrucmd.vim	/^function fuf#mrucmd#onInit()$/;"	f
fuf#mrucmd#renewCache	C:\programs\gvim\vimfiles\autoload\fuf\mrucmd.vim	/^function fuf#mrucmd#renewCache()$/;"	f
fuf#mrucmd#requiresOnCommandPre	C:\programs\gvim\vimfiles\autoload\fuf\mrucmd.vim	/^function fuf#mrucmd#requiresOnCommandPre()$/;"	f
fuf#mrufile#createHandler	C:\programs\gvim\vimfiles\autoload\fuf\mrufile.vim	/^function fuf#mrufile#createHandler(base)$/;"	f
fuf#mrufile#getSwitchOrder	C:\programs\gvim\vimfiles\autoload\fuf\mrufile.vim	/^function fuf#mrufile#getSwitchOrder()$/;"	f
fuf#mrufile#onInit	C:\programs\gvim\vimfiles\autoload\fuf\mrufile.vim	/^function fuf#mrufile#onInit()$/;"	f
fuf#mrufile#renewCache	C:\programs\gvim\vimfiles\autoload\fuf\mrufile.vim	/^function fuf#mrufile#renewCache()$/;"	f
fuf#mrufile#requiresOnCommandPre	C:\programs\gvim\vimfiles\autoload\fuf\mrufile.vim	/^function fuf#mrufile#requiresOnCommandPre()$/;"	f
fuf#onComplete	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function fuf#onComplete(findstart, base)$/;"	f
fuf#openBuffer	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function fuf#openBuffer(bufNr, mode, reuse)$/;"	f
fuf#openFile	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function fuf#openFile(path, mode, reuse)$/;"	f
fuf#openTag	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function fuf#openTag(tag, mode)$/;"	f
fuf#prejump	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function fuf#prejump(mode)$/;"	f
fuf#quickfix#createHandler	C:\programs\gvim\vimfiles\autoload\fuf\quickfix.vim	/^function fuf#quickfix#createHandler(base)$/;"	f
fuf#quickfix#getSwitchOrder	C:\programs\gvim\vimfiles\autoload\fuf\quickfix.vim	/^function fuf#quickfix#getSwitchOrder()$/;"	f
fuf#quickfix#onInit	C:\programs\gvim\vimfiles\autoload\fuf\quickfix.vim	/^function fuf#quickfix#onInit()$/;"	f
fuf#quickfix#renewCache	C:\programs\gvim\vimfiles\autoload\fuf\quickfix.vim	/^function fuf#quickfix#renewCache()$/;"	f
fuf#quickfix#requiresOnCommandPre	C:\programs\gvim\vimfiles\autoload\fuf\quickfix.vim	/^function fuf#quickfix#requiresOnCommandPre()$/;"	f
fuf#saveInfoFile	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function fuf#saveInfoFile(modeName, info)$/;"	f
fuf#setAbbrWithFormattedWord	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function fuf#setAbbrWithFormattedWord(item)$/;"	f
fuf#splitPath	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function fuf#splitPath(path)$/;"	f
fuf#suffixNumber	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function fuf#suffixNumber(str)$/;"	f
fuf#tag#createHandler	C:\programs\gvim\vimfiles\autoload\fuf\tag.vim	/^function fuf#tag#createHandler(base)$/;"	f
fuf#tag#getSwitchOrder	C:\programs\gvim\vimfiles\autoload\fuf\tag.vim	/^function fuf#tag#getSwitchOrder()$/;"	f
fuf#tag#onInit	C:\programs\gvim\vimfiles\autoload\fuf\tag.vim	/^function fuf#tag#onInit()$/;"	f
fuf#tag#renewCache	C:\programs\gvim\vimfiles\autoload\fuf\tag.vim	/^function fuf#tag#renewCache()$/;"	f
fuf#tag#requiresOnCommandPre	C:\programs\gvim\vimfiles\autoload\fuf\tag.vim	/^function fuf#tag#requiresOnCommandPre()$/;"	f
fuf#taggedfile#createHandler	C:\programs\gvim\vimfiles\autoload\fuf\taggedfile.vim	/^function fuf#taggedfile#createHandler(base)$/;"	f
fuf#taggedfile#getSwitchOrder	C:\programs\gvim\vimfiles\autoload\fuf\taggedfile.vim	/^function fuf#taggedfile#getSwitchOrder()$/;"	f
fuf#taggedfile#onInit	C:\programs\gvim\vimfiles\autoload\fuf\taggedfile.vim	/^function fuf#taggedfile#onInit()$/;"	f
fuf#taggedfile#renewCache	C:\programs\gvim\vimfiles\autoload\fuf\taggedfile.vim	/^function fuf#taggedfile#renewCache()$/;"	f
fuf#taggedfile#requiresOnCommandPre	C:\programs\gvim\vimfiles\autoload\fuf\taggedfile.vim	/^function fuf#taggedfile#requiresOnCommandPre()$/;"	f
fuf#unique	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function fuf#unique(items)$/;"	f
fuf#updateMruList	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function fuf#updateMruList(mrulist, newItem, maxItem, exclude)$/;"	f
g:Align_xstrlen	C:\programs\gvim\vimfiles\autoload\Align.vim	/^  let g:Align_xstrlen= 0$/;"	v
g:Align_xstrlen	C:\programs\gvim\vimfiles\autoload\Align.vim	/^  let g:Align_xstrlen= 1$/;"	v
g:BufPos_Activate_Buffer	C:\programs\gvim\vimfiles\plugin\bufpos.vim	/^let g:BufPos_Activate_Buffer=0$/;"	v
g:BufReminderRMX_ignoreFilesList	C:\programs\gvim\vimfiles\plugin\bufReminderRemake.vim	/^    let g:BufReminderRMX_ignoreFilesList        = []$/;"	v
g:BuffReminderRMX_Default_SplitMode	C:\programs\gvim\vimfiles\plugin\bufReminderRemake.vim	/^    let g:BuffReminderRMX_Default_SplitMode        = 'split'$/;"	v
g:BuffReminderRMX_Disable_Hidden	C:\programs\gvim\vimfiles\plugin\bufReminderRemake.vim	/^    let g:BuffReminderRMX_Disable_Hidden        = 0$/;"	v
g:BuffReminderRMX_OpenFirstTabByDefault	C:\programs\gvim\vimfiles\plugin\bufReminderRemake.vim	/^    let g:BuffReminderRMX_OpenFirstTabByDefault = 0$/;"	v
g:BuffReminderRMX_ProjectFiles	C:\programs\gvim\vimfiles\plugin\bufReminderRemake.vim	/^    let g:BuffReminderRMX_ProjectFiles        = []$/;"	v
g:BuffReminder_enablePlugin	C:\programs\gvim\vimfiles\plugin\bufReminderRemake.vim	/^let g:BuffReminder_enablePlugin = 1$/;"	v
g:BuffReminder_persistency_file	C:\programs\gvim\vimfiles\plugin\bufReminderRemake.vim	/^    let g:BuffReminder_persistency_file = bifRemiderPersPath . bufRemiderPersFile$/;"	v
g:BuffReminder_skip_NoNameBuffer	C:\programs\gvim\vimfiles\plugin\bufReminderRemake.vim	/^let g:BuffReminder_skip_NoNameBuffer        = 1$/;"	v
g:BufferReminder_removeNoNameBuffer	C:\programs\gvim\vimfiles\plugin\bufpos.vim	/^  let g:BufferReminder_removeNoNameBuffer = 1$/;"	v
g:DirDiffAddArgs	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^    let g:DirDiffAddArgs = ""$/;"	v
g:DirDiffDynamicDiffText	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^    let g:DirDiffDynamicDiffText = 0$/;"	v
g:DirDiffExcludes	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^    let g:DirDiffExcludes = ""$/;"	v
g:DirDiffIgnore	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^    let g:DirDiffIgnore = ""$/;"	v
g:DirDiffIgnoreCase	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^    let g:DirDiffIgnoreCase = 0$/;"	v
g:DirDiffInteractive	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^    let g:DirDiffInteractive = 0$/;"	v
g:DirDiffSort	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^    let g:DirDiffSort = 1$/;"	v
g:DirDiffTextAnd	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^    let g:DirDiffTextAnd = " and "$/;"	v
g:DirDiffTextDiffer	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^    let g:DirDiffTextDiffer = " differ"$/;"	v
g:DirDiffTextFiles	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^    let g:DirDiffTextFiles = "Files "$/;"	v
g:DirDiffTextOnlyIn	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^    let g:DirDiffTextOnlyIn = "Only in "$/;"	v
g:DirDiffWindowSize	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^    let g:DirDiffWindowSize = 14$/;"	v
g:DrChipTopLvlMenu	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^  let g:DrChipTopLvlMenu= "DrChip."$/;"	v
g:FWK_File_prevCD	C:\programs\gvim\vimfiles\plugin\fwk_experemental.vim	/^let g:FWK_File_prevCD = 'hello'$/;"	v
g:FWK_Grep_exclude_dir	C:\programs\gvim\vimfiles\plugin\grep.vim	/^    let g:FWK_Grep_exclude_dir        = ''$/;"	v
g:FWK_Grep_exclude_files	C:\programs\gvim\vimfiles\plugin\grep.vim	/^    let g:FWK_Grep_exclude_files        = ''$/;"	v
g:FWK_Language_French_Mode_Variable	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\french_language_addon.vim	/^let g:FWK_Language_French_Mode_Variable = 0$/;"	v
g:FWK_Note_Calendrier_Dict	C:\programs\gvim\vimfiles\plugin\fwk_notes.vim	/^let g:FWK_Note_Calendrier_Dict =$/;"	v
g:FWK_Note_Mark_Regex_Increment_SymbolDict	C:\programs\gvim\vimfiles\plugin\fwk_notes.vim	/^let g:FWK_Note_Mark_Regex_Increment_SymbolDict =$/;"	v
g:FWK_ScriptVarList	C:\programs\gvim\vimfiles\plugin\fwk_buildrun.vim	/^let g:FWK_ScriptVarList = [$/;"	v
g:FWK_file_ext_dictionary	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^let g:FWK_file_ext_dictionary =$/;"	v
g:FileExplorerWrapperVariable	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^    let g:FileExplorerWrapperVariable = 0 $/;"	v
g:ST_WIN_CMD	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^let g:ST_WIN_CMD = 0 | let g:ST_WIN_SH = 1 | let g:ST_UNIX = 2$/;"	v
g:SuperTabCompletionContexts	C:\programs\gvim\vimfiles\plugin\supertab.vim	/^    let g:SuperTabCompletionContexts = ['s:ContextText']$/;"	v
g:SuperTabContextDefaultCompletionType	C:\programs\gvim\vimfiles\plugin\supertab.vim	/^    let g:SuperTabContextDefaultCompletionType = "<c-p>"$/;"	v
g:SuperTabDefaultCompletionType	C:\programs\gvim\vimfiles\plugin\supertab.vim	/^    let g:SuperTabDefaultCompletionType = "<c-p>"$/;"	v
g:SuperTabLongestHighlight	C:\programs\gvim\vimfiles\plugin\supertab.vim	/^    let g:SuperTabLongestHighlight = 0$/;"	v
g:SuperTabMappingBackward	C:\programs\gvim\vimfiles\plugin\supertab.vim	/^    let g:SuperTabMappingBackward = '<s-tab>'$/;"	v
g:SuperTabMappingForward	C:\programs\gvim\vimfiles\plugin\supertab.vim	/^    let g:SuperTabMappingForward = '<tab>'$/;"	v
g:SuperTabMappingTabLiteral	C:\programs\gvim\vimfiles\plugin\supertab.vim	/^    let g:SuperTabMappingTabLiteral = '<c-tab>'$/;"	v
g:SuperTabMidWordCompletion	C:\programs\gvim\vimfiles\plugin\supertab.vim	/^    let g:SuperTabMidWordCompletion = 1$/;"	v
g:SuperTabRetainCompletionDuration	C:\programs\gvim\vimfiles\plugin\supertab.vim	/^    let g:SuperTabRetainCompletionDuration = 'insert'$/;"	v
g:buf_default_view_pos	C:\programs\gvim\vimfiles\plugin\bufReminderRemake.vim	/^let g:buf_default_view_pos = [1,1,0]$/;"	v
g:buf_info_lst	C:\programs\gvim\vimfiles\plugin\bufReminderRemake.vim	/^let g:buf_info_lst = []$/;"	v
g:colors_name	C:\programs\gvim\vimfiles\colors\desert.vim	/^let g:colors_name="desert" $/;"	v
g:colors_name	C:\programs\gvim\vimfiles\colors\kaltex.vim	/^let g:colors_name = "kaltex"$/;"	v
g:decho_bufenter	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^ let g:decho_bufenter= 0 $/;"	v
g:decho_bufname	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^ let g:decho_bufname= "DBG" $/;"	v
g:decho_winheight	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^ let g:decho_winheight= 5 $/;"	v
g:dechomode	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^ let g:dechomode= s:DECHOWIN $/;"	v
g:dechovarname	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^ let g:dechovarname = "g:dechovar" $/;"	v
g:did_ft	C:\programs\gvim\vimfiles\plugin\snipMate.vim	/^let g:did_ft = {}$/;"	v
g:fwk_bookmarks_enable	C:\programs\gvim\vimfiles\plugin\fwk_marks.vim	/^let g:fwk_bookmarks_enable = 01 " Version $/;"	v
g:fwk_bookmarks_marks_dictionary	C:\programs\gvim\vimfiles\plugin\fwk_marks.vim	/^let g:fwk_bookmarks_marks_dictionary = $/;"	v
g:fwk_notes_notes_directory	C:\programs\gvim\vimfiles\plugin\fwk_notes.vim	/^    let g:fwk_notes_notes_directory = g:relative_path . g:cr_slash . 'notes'$/;"	v
g:fwk_project_addon	C:\programs\gvim\vimfiles\plugin\fwk_project_addon.vim	/^let g:fwk_project_addon = 01 " Version $/;"	v
g:fwk_templates_directory	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^    let g:fwk_templates_directory = g:relative_path . g:cr_slash . 'templates'$/;"	v
g:loaded_Align	C:\programs\gvim\vimfiles\autoload\Align.vim	/^let g:loaded_Align = "v35"$/;"	v
g:loaded_AlignMaps	C:\programs\gvim\vimfiles\autoload\AlignMaps.vim	/^let g:loaded_AlignMaps= "v41"$/;"	v
g:loaded_AlignMapsPlugin	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^let g:loaded_AlignMapsPlugin = "v41"$/;"	v
g:loaded_AlignPlugin	C:\programs\gvim\vimfiles\plugin\AlignPlugin.vim	/^let g:loaded_AlignPlugin = "v35"$/;"	v
g:loaded_Decho	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^let g:loaded_Decho = "v20" $/;"	v
g:loaded_autoload_fuf	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^let g:loaded_autoload_fuf = 1$/;"	v
g:loaded_autoload_fuf_bookmark	C:\programs\gvim\vimfiles\autoload\fuf\bookmark.vim	/^let g:loaded_autoload_fuf_bookmark = 1$/;"	v
g:loaded_autoload_fuf_buffer	C:\programs\gvim\vimfiles\autoload\fuf\buffer.vim	/^let g:loaded_autoload_fuf_buffer = 1$/;"	v
g:loaded_autoload_fuf_callbackfile	C:\programs\gvim\vimfiles\autoload\fuf\callbackfile.vim	/^let g:loaded_autoload_fuf_callbackfile = 1$/;"	v
g:loaded_autoload_fuf_callbackitem	C:\programs\gvim\vimfiles\autoload\fuf\callbackitem.vim	/^let g:loaded_autoload_fuf_callbackitem = 1$/;"	v
g:loaded_autoload_fuf_changelist	C:\programs\gvim\vimfiles\autoload\fuf\changelist.vim	/^let g:loaded_autoload_fuf_changelist = 1$/;"	v
g:loaded_autoload_fuf_dir	C:\programs\gvim\vimfiles\autoload\fuf\dir.vim	/^let g:loaded_autoload_fuf_dir = 1$/;"	v
g:loaded_autoload_fuf_file	C:\programs\gvim\vimfiles\autoload\fuf\file.vim	/^let g:loaded_autoload_fuf_file = 1$/;"	v
g:loaded_autoload_fuf_givencmd	C:\programs\gvim\vimfiles\autoload\fuf\givencmd.vim	/^let g:loaded_autoload_fuf_givencmd = 1$/;"	v
g:loaded_autoload_fuf_givendir	C:\programs\gvim\vimfiles\autoload\fuf\givendir.vim	/^let g:loaded_autoload_fuf_givendir = 1$/;"	v
g:loaded_autoload_fuf_givenfile	C:\programs\gvim\vimfiles\autoload\fuf\givenfile.vim	/^let g:loaded_autoload_fuf_givenfile = 1$/;"	v
g:loaded_autoload_fuf_jumplist	C:\programs\gvim\vimfiles\autoload\fuf\jumplist.vim	/^let g:loaded_autoload_fuf_jumplist = 1$/;"	v
g:loaded_autoload_fuf_mrucmd	C:\programs\gvim\vimfiles\autoload\fuf\mrucmd.vim	/^let g:loaded_autoload_fuf_mrucmd = 1$/;"	v
g:loaded_autoload_fuf_mrufile	C:\programs\gvim\vimfiles\autoload\fuf\mrufile.vim	/^let g:loaded_autoload_fuf_mrufile = 1$/;"	v
g:loaded_autoload_fuf_quickfix	C:\programs\gvim\vimfiles\autoload\fuf\quickfix.vim	/^let g:loaded_autoload_fuf_quickfix = 1$/;"	v
g:loaded_autoload_fuf_tag	C:\programs\gvim\vimfiles\autoload\fuf\tag.vim	/^let g:loaded_autoload_fuf_tag = 1$/;"	v
g:loaded_autoload_fuf_taggedfile	C:\programs\gvim\vimfiles\autoload\fuf\taggedfile.vim	/^let g:loaded_autoload_fuf_taggedfile = 1$/;"	v
g:loaded_autoload_l9	C:\programs\gvim\vimfiles\autoload\l9.vim	/^let g:loaded_autoload_l9 = 1$/;"	v
g:loaded_cecutil	C:\programs\gvim\vimfiles\plugin\cecutil.vim	/^let g:loaded_cecutil = "v18b"$/;"	v
g:loaded_fuf	C:\programs\gvim\vimfiles\plugin\fuf.vim	/^let g:loaded_fuf = 1$/;"	v
g:loaded_javaparser	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^let g:loaded_javaparser = 'v0.67'$/;"	v
g:loaded_surround	C:\programs\gvim\vimfiles\plugin\surround.vim	/^let g:loaded_surround = 1$/;"	v
g:loaded_vimball	C:\programs\gvim\vimfiles\autoload\vimball.vim	/^let g:loaded_vimball = "v25"$/;"	v
g:loaded_vimballPlugin	C:\programs\gvim\vimfiles\plugin\vimballPlugin.vim	/^let g:loaded_vimballPlugin = "v25"$/;"	v
g:lookupfile#lastPattern	C:\programs\gvim\vimfiles\autoload\lookupfile.vim	/^let g:lookupfile#lastPattern = ""$/;"	v
g:lookupfile#lastResults	C:\programs\gvim\vimfiles\autoload\lookupfile.vim	/^let g:lookupfile#lastResults = []$/;"	v
g:lookupfile#lastStatsMsg	C:\programs\gvim\vimfiles\autoload\lookupfile.vim	/^let g:lookupfile#lastStatsMsg = []$/;"	v
g:lookupfile#recentFiles	C:\programs\gvim\vimfiles\autoload\lookupfile.vim	/^let g:lookupfile#recentFiles = []$/;"	v
g:makeArgumentList	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^let g:makeArgumentList = 'exec genutils#MakeArgumentList()'$/;"	v
g:makeArgumentString	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^let g:makeArgumentString = 'exec genutils#MakeArgumentString()'$/;"	v
g:netrw_cygwin	C:\programs\gvim\vimfiles\autoload\vimball.vim	/^    let g:netrw_cygwin= 0$/;"	v
g:netrw_cygwin	C:\programs\gvim\vimfiles\autoload\vimball.vim	/^    let g:netrw_cygwin= 1$/;"	v
g:netrw_cygwin	C:\programs\gvim\vimfiles\autoload\vimball.vim	/^   let g:netrw_cygwin= 0$/;"	v
g:netrw_shq	C:\programs\gvim\vimfiles\autoload\vimball.vim	/^    let g:netrw_shq= "'"$/;"	v
g:netrw_shq	C:\programs\gvim\vimfiles\autoload\vimball.vim	/^    let g:netrw_shq= '"'$/;"	v
g:netrw_shq	C:\programs\gvim\vimfiles\autoload\vimball.vim	/^   let g:netrw_shq= "'"$/;"	v
g:netrw_shq	C:\programs\gvim\vimfiles\autoload\vimball.vim	/^   let g:netrw_shq= &shq$/;"	v
g:netrw_shq	C:\programs\gvim\vimfiles\autoload\vimball.vim	/^  let g:netrw_shq= g:vimball_shq$/;"	v
g:omni#cpp#includes#CACHE_FILE_TIME	C:\programs\gvim\vimfiles\autoload\omni\cpp\includes.vim	/^let g:omni#cpp#includes#CACHE_FILE_TIME = {}$/;"	v
g:omni#cpp#includes#CACHE_INCLUDES	C:\programs\gvim\vimfiles\autoload\omni\cpp\includes.vim	/^let g:omni#cpp#includes#CACHE_INCLUDES = {}$/;"	v
g:omni#cpp#namespaces#CacheResolve	C:\programs\gvim\vimfiles\autoload\omni\cpp\namespaces.vim	/^let g:omni#cpp#namespaces#CacheResolve = {}$/;"	v
g:omni#cpp#namespaces#CacheUsing	C:\programs\gvim\vimfiles\autoload\omni\cpp\namespaces.vim	/^let g:omni#cpp#namespaces#CacheUsing = {}$/;"	v
g:omni#cpp#utils#CACHE_TAG_INHERITS	C:\programs\gvim\vimfiles\autoload\omni\cpp\utils.vim	/^let g:omni#cpp#utils#CACHE_TAG_INHERITS = {}$/;"	v
g:omni#cpp#utils#szFilterGlobalScope	C:\programs\gvim\vimfiles\autoload\omni\cpp\utils.vim	/^let g:omni#cpp#utils#szFilterGlobalScope .= "&& (!has_key(v:val, 'enum') || (has_key(v:val, 'enum') && v:val.enum =~ '^\\\\w\\\\+$')))"$/;"	v
g:omni#cpp#utils#szFilterGlobalScope	C:\programs\gvim\vimfiles\autoload\omni\cpp\utils.vim	/^let g:omni#cpp#utils#szFilterGlobalScope = "(!has_key(v:val, 'class') && !has_key(v:val, 'struct') && !has_key(v:val, 'union') && !has_key(v:val, 'namespace')"$/;"	v
g:onOffTrigger	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^    let g:onOffTrigger = 0 $/;"	v
g:proj_running	C:\programs\gvim\vimfiles\plugin\project.vim	/^        let g:proj_running = bufnr(bufname.'\\>')$/;"	v
g:proj_window_number	C:\programs\gvim\vimfiles\plugin\project.vim	/^  let g:proj_window_number=0$/;"	v
g:regex_pattern_error_hbbl	C:\programs\gvim\vimfiles\plugin\fwk_library.vim	/^    let g:regex_pattern_error_hbbl = "error:\\\\|warning:\\\\|undefined\\ reference\\\\|(Permission\\ denied)"$/;"	v
g:scmDiffRev	C:\programs\gvim\vimfiles\plugin\scmdiff.vim	/^let g:scmDiffRev = ''$/;"	v
g:vimball_path_escape	C:\programs\gvim\vimfiles\autoload\vimball.vim	/^  let g:vimball_path_escape= ' ;#%'$/;"	v
genutils#AddNotifyWindowClose	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#AddNotifyWindowClose(windowTitle, functionName)$/;"	f
genutils#AddToFCShellPre	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#AddToFCShellPre(funcName)$/;"	f
genutils#AlignWordWithWordInPreviousLine	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#AlignWordWithWordInPreviousLine()$/;"	f
genutils#ArrayVarExists	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#ArrayVarExists(varName, index)$/;"	f
genutils#BinInsertSort	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#BinInsertSort(cmp, direction) range$/;"	f
genutils#BinInsertSort2	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#BinInsertSort2(start, end, cmp, direction, accessor, mover, context)$/;"	f
genutils#BinSearchForInsert	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#BinSearchForInsert(start, end, line, cmp, direction)$/;"	f
genutils#BinSearchForInsert2	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#BinSearchForInsert2(start, end, line, cmp, direction,$/;"	f
genutils#BinSearchList	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#BinSearchList(list, start, end, item, cmp)$/;"	f
genutils#CenterWordInSpace	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#CenterWordInSpace()$/;"	f
genutils#CheckWindowClose	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#CheckWindowClose()$/;"	f
genutils#CleanDiffOptions	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#CleanDiffOptions()$/;"	f
genutils#CleanupFileName	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#CleanupFileName(fileName)$/;"	f
genutils#CleanupFileName2	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#CleanupFileName2(fileName, win32ProtectedChars)$/;"	f
genutils#ClearAllSigns	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#ClearAllSigns()$/;"	f
genutils#CloseWinNoEa	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#CloseWinNoEa(winnr, force)$/;"	f
genutils#CloseWindow	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#CloseWindow(win, force)$/;"	f
genutils#CmpByLength	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#CmpByLength(line1, line2, ...)$/;"	f
genutils#CmpByLineLengthNname	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#CmpByLineLengthNname(line1, line2, ...)$/;"	f
genutils#CmpByNumber	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#CmpByNumber(line1, line2, ...)$/;"	f
genutils#CmpByString	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#CmpByString(line1, line2, ...)$/;"	f
genutils#CmpByStringIgnoreCase	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#CmpByStringIgnoreCase(line1, line2, ...)$/;"	f
genutils#CmpJavaImports	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#CmpJavaImports(line1, line2, ...)$/;"	f
genutils#CommonPath	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#CommonPath(path1, path2, ...)$/;"	f
genutils#CommonString	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#CommonString(str1, str2)$/;"	f
genutils#CrUnProtectedCharsPattern	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#CrUnProtectedCharsPattern(chars, ...)$/;"	f
genutils#CreateArgString	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#CreateArgString(argList, sep, ...)$/;"	f
genutils#CurLineHasSign	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#CurLineHasSign()$/;"	f
genutils#DeEscape	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#DeEscape(str)$/;"	f
genutils#DebugShowArgs	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#DebugShowArgs(...)$/;"	f
genutils#DefFCShellInstall	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#DefFCShellInstall()$/;"	f
genutils#DefFCShellUninstall	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#DefFCShellUninstall()$/;"	f
genutils#DefFileChangedShell	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#DefFileChangedShell()$/;"	f
genutils#EatChar	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#EatChar(pat)$/;"	f
genutils#Escape	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#Escape(str, chars)$/;"	f
genutils#EscapeCommand	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#EscapeCommand(cmd, args, pipe)$/;"	f
genutils#ExpandStr	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#ExpandStr(str)$/;"	f
genutils#ExtractFuncListing	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#ExtractFuncListing(funcName, hLines, tLines)$/;"	f
genutils#FindBufferForName	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#FindBufferForName(fileName)$/;"	f
genutils#FindWindowForBuffer	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#FindWindowForBuffer(bufferName, checkUnlisted)$/;"	f
genutils#GetBufNameForAu	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#GetBufNameForAu(bufName)$/;"	f
genutils#GetColPosition	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#GetColPosition(id)$/;"	f
genutils#GetLastWinnrInStack	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#GetLastWinnrInStack(dir)$/;"	f
genutils#GetLinePosition	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#GetLinePosition(id)$/;"	f
genutils#GetNextWinnrInStack	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#GetNextWinnrInStack(dir)$/;"	f
genutils#GetPersistentVar	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#GetPersistentVar(pluginName, persistentVar, default)$/;"	f
genutils#GetPreviewWinnr	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#GetPreviewWinnr()$/;"	f
genutils#GetSelectedIndex	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#GetSelectedIndex()$/;"	f
genutils#GetShellEnvType	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#GetShellEnvType()$/;"	f
genutils#GetSpacer	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#GetSpacer(width)$/;"	f
genutils#GetVimCmdOutput	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#GetVimCmdOutput(cmd)$/;"	f
genutils#IsOnlyHorizontalWindow	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#IsOnlyHorizontalWindow()$/;"	f
genutils#IsOnlyVerticalWindow	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#IsOnlyVerticalWindow()$/;"	f
genutils#IsPositionSet	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#IsPositionSet(id)$/;"	f
genutils#MakeArgumentList	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#MakeArgumentList(...)$/;"	f
genutils#MakeArgumentString	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#MakeArgumentString(...)$/;"	f
genutils#MapAppendCascaded	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#MapAppendCascaded(lhs, rhs, mapMode)$/;"	f
genutils#MarkActiveWindow	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#MarkActiveWindow()$/;"	f
genutils#MoveCurLineToWinLine	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#MoveCurLineToWinLine(n)$/;"	f
genutils#MoveCursorToLastInWinStack	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#MoveCursorToLastInWinStack(dir)$/;"	f
genutils#MoveCursorToNextInWinStack	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#MoveCursorToNextInWinStack(dir)$/;"	f
genutils#MoveCursorToWindow	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#MoveCursorToWindow(winno)$/;"	f
genutils#NumberOfWindows	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#NumberOfWindows()$/;"	f
genutils#OnMS	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#OnMS()$/;"	f
genutils#OpenWinNoEa	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#OpenWinNoEa(winOpenCmd)$/;"	f
genutils#OptClearBuffer	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#OptClearBuffer()$/;"	f
genutils#PathIsAbsolute	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#PathIsAbsolute(path)$/;"	f
genutils#PathIsFileNameOnly	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#PathIsFileNameOnly(path)$/;"	f
genutils#PromptForElement	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#PromptForElement(array, default, msg, skip, useDialog,$/;"	f
genutils#PutPersistentVar	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#PutPersistentVar(pluginName, persistentVar, value)$/;"	f
genutils#QSort	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#QSort(cmp, direction) range$/;"	f
genutils#QSort2	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#QSort2(start, end, cmp, direction, accessor, swapper, context)$/;"	f
genutils#QuoteStr	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#QuoteStr(str)$/;"	f
genutils#RelPathFromDir	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#RelPathFromDir(srcDir, tgtFile)$/;"	f
genutils#RelPathFromFile	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#RelPathFromFile(srcFile, tgtFile)$/;"	f
genutils#RemoveFromFCShellPre	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#RemoveFromFCShellPre(funcName)$/;"	f
genutils#RemoveNotifyWindowClose	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#RemoveNotifyWindowClose(windowTitle)$/;"	f
genutils#ResetHardPosition	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#ResetHardPosition(id)$/;"	f
genutils#ResetHardPositionWithContext	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#ResetHardPositionWithContext(id)$/;"	f
genutils#ResetSoftPosition	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#ResetSoftPosition(id)$/;"	f
genutils#ResetWindowSettings	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#ResetWindowSettings()$/;"	f
genutils#ResetWindowSettings2	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#ResetWindowSettings2(id)$/;"	f
genutils#RestoreActiveWindow	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#RestoreActiveWindow()$/;"	f
genutils#RestoreHardPosition	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#RestoreHardPosition(id)$/;"	f
genutils#RestoreHardPositionWithContext	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#RestoreHardPositionWithContext(id)$/;"	f
genutils#RestoreSoftPosition	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#RestoreSoftPosition(id)$/;"	f
genutils#RestoreVisualSelection	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#RestoreVisualSelection(id)$/;"	f
genutils#RestoreWindowSettings	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#RestoreWindowSettings()$/;"	f
genutils#RestoreWindowSettings2	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#RestoreWindowSettings2(id)$/;"	f
genutils#Roman2Decimal	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#Roman2Decimal(str)$/;"	f
genutils#SaveHardPosition	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#SaveHardPosition(id)$/;"	f
genutils#SaveHardPositionWithContext	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#SaveHardPositionWithContext(id)$/;"	f
genutils#SaveSoftPosition	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#SaveSoftPosition(id)$/;"	f
genutils#SaveVisualSelection	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#SaveVisualSelection(id)$/;"	f
genutils#SaveWindowSettings	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#SaveWindowSettings()$/;"	f
genutils#SaveWindowSettings2	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#SaveWindowSettings2(id, overwrite)$/;"	f
genutils#SetupScratchBuffer	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#SetupScratchBuffer()$/;"	f
genutils#ShiftWordInSpace	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#ShiftWordInSpace(dir)$/;"	f
genutils#ShowLinesWithSyntax	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#ShowLinesWithSyntax() range$/;"	f
genutils#SilentDelete	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#SilentDelete(arg1, ...)$/;"	f
genutils#SilentSubstitute	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#SilentSubstitute(pat, cmd)$/;"	f
genutils#UnEscape	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#UnEscape(str, chars)$/;"	f
genutils#UserFileComplete	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#UserFileComplete(ArgLead, CmdLine, CursorPos, smartSlash,$/;"	f
genutils#UserFileExpand	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^function! genutils#UserFileExpand(fileArgs)$/;"	f
getBufIndicator	C:\programs\gvim\vimfiles\autoload\fuf\buffer.vim	/^function s:getBufIndicator(bufNr)$/;"	f
getChangesLines	C:\programs\gvim\vimfiles\autoload\fuf\changelist.vim	/^function s:getChangesLines()$/;"	f
getClassInfo	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    public static String getClassInfo(String className) {$/;"	m	class:Reflection	access:public	signature:(String className)
getCurrentText	C:\programs\gvim\vimfiles\autoload\acp.vim	/^function s:getCurrentText()$/;"	f
getCurrentWord	C:\programs\gvim\vimfiles\autoload\acp.vim	/^function s:getCurrentWord()$/;"	f
getJumpsLines	C:\programs\gvim\vimfiles\autoload\fuf\jumplist.vim	/^function s:getJumpsLines()$/;"	f
getJumpsLines	C:\programs\gvim\vimfiles\autoload\fuf\quickfix.vim	/^function s:getJumpsLines()$/;"	f
getLinePattern	C:\programs\gvim\vimfiles\autoload\fuf\bookmark.vim	/^function s:getLinePattern(lnum)$/;"	f
getMatchingSnipItems	C:\programs\gvim\vimfiles\autoload\acp.vim	/^function s:getMatchingSnipItems(base)$/;"	f
getPackageList	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    private static String getPackageList(String fqn) {$/;"	m	class:Reflection	file:	access:private	signature:(String fqn)
getPackageList	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    public static String getPackageList() {$/;"	m	class:Reflection	access:public	signature:()
getPostText	C:\programs\gvim\vimfiles\autoload\acp.vim	/^function s:getPostText()$/;"	f
getSelectedText	C:\programs\gvim\vimfiles\autoload\fuf\bookmark.vim	/^function s:getSelectedText()$/;"	f
getSnippedHead	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:getSnippedHead(head, baseLen)$/;"	f
getTagList	C:\programs\gvim\vimfiles\autoload\fuf\tag.vim	/^function s:getTagList(tagfile)$/;"	f
getTaggedFileList	C:\programs\gvim\vimfiles\autoload\fuf\taggedfile.vim	/^function s:getTaggedFileList(tagfile)$/;"	f
getWordBoundaries	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:getWordBoundaries(word)$/;"	f
getchar	C:\programs\gvim\vimfiles\plugin\surround.vim	/^function! s:getchar()$/;"	f
gotoMatchEnd	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:gotoMatchEnd(one, another, ...)$/;"	f
gotoSemi	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:gotoSemi()$/;"	f
handleFailedAssersion	C:\programs\gvim\vimfiles\plugin\l9.vim	/^  function s:handleFailedAssersion(expr)$/;"	f
handler.getModeName	C:\programs\gvim\vimfiles\autoload\fuf\bookmark.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	C:\programs\gvim\vimfiles\autoload\fuf\buffer.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	C:\programs\gvim\vimfiles\autoload\fuf\callbackfile.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	C:\programs\gvim\vimfiles\autoload\fuf\callbackitem.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	C:\programs\gvim\vimfiles\autoload\fuf\changelist.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	C:\programs\gvim\vimfiles\autoload\fuf\dir.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	C:\programs\gvim\vimfiles\autoload\fuf\file.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	C:\programs\gvim\vimfiles\autoload\fuf\givencmd.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	C:\programs\gvim\vimfiles\autoload\fuf\givendir.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	C:\programs\gvim\vimfiles\autoload\fuf\givenfile.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	C:\programs\gvim\vimfiles\autoload\fuf\jumplist.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	C:\programs\gvim\vimfiles\autoload\fuf\mrucmd.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	C:\programs\gvim\vimfiles\autoload\fuf\mrufile.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	C:\programs\gvim\vimfiles\autoload\fuf\quickfix.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	C:\programs\gvim\vimfiles\autoload\fuf\tag.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	C:\programs\gvim\vimfiles\autoload\fuf\taggedfile.vim	/^function s:handler.getModeName()$/;"	f
handler.getPrompt	C:\programs\gvim\vimfiles\autoload\fuf\bookmark.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	C:\programs\gvim\vimfiles\autoload\fuf\buffer.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	C:\programs\gvim\vimfiles\autoload\fuf\callbackfile.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	C:\programs\gvim\vimfiles\autoload\fuf\callbackitem.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	C:\programs\gvim\vimfiles\autoload\fuf\changelist.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	C:\programs\gvim\vimfiles\autoload\fuf\dir.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	C:\programs\gvim\vimfiles\autoload\fuf\file.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	C:\programs\gvim\vimfiles\autoload\fuf\givencmd.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	C:\programs\gvim\vimfiles\autoload\fuf\givendir.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	C:\programs\gvim\vimfiles\autoload\fuf\givenfile.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	C:\programs\gvim\vimfiles\autoload\fuf\jumplist.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	C:\programs\gvim\vimfiles\autoload\fuf\mrucmd.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	C:\programs\gvim\vimfiles\autoload\fuf\mrufile.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	C:\programs\gvim\vimfiles\autoload\fuf\quickfix.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	C:\programs\gvim\vimfiles\autoload\fuf\tag.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	C:\programs\gvim\vimfiles\autoload\fuf\taggedfile.vim	/^function s:handler.getPrompt()$/;"	f
handler.onComplete	C:\programs\gvim\vimfiles\autoload\fuf\bookmark.vim	/^function s:handler.onComplete(patternSet)$/;"	f
handler.onComplete	C:\programs\gvim\vimfiles\autoload\fuf\buffer.vim	/^function s:handler.onComplete(patternSet)$/;"	f
handler.onComplete	C:\programs\gvim\vimfiles\autoload\fuf\callbackfile.vim	/^function s:handler.onComplete(patternSet)$/;"	f
handler.onComplete	C:\programs\gvim\vimfiles\autoload\fuf\callbackitem.vim	/^function s:handler.onComplete(patternSet)$/;"	f
handler.onComplete	C:\programs\gvim\vimfiles\autoload\fuf\changelist.vim	/^function s:handler.onComplete(patternSet)$/;"	f
handler.onComplete	C:\programs\gvim\vimfiles\autoload\fuf\dir.vim	/^function s:handler.onComplete(patternSet)$/;"	f
handler.onComplete	C:\programs\gvim\vimfiles\autoload\fuf\file.vim	/^function s:handler.onComplete(patternSet)$/;"	f
handler.onComplete	C:\programs\gvim\vimfiles\autoload\fuf\givencmd.vim	/^function s:handler.onComplete(patternSet)$/;"	f
handler.onComplete	C:\programs\gvim\vimfiles\autoload\fuf\givendir.vim	/^function s:handler.onComplete(patternSet)$/;"	f
handler.onComplete	C:\programs\gvim\vimfiles\autoload\fuf\givenfile.vim	/^function s:handler.onComplete(patternSet)$/;"	f
handler.onComplete	C:\programs\gvim\vimfiles\autoload\fuf\jumplist.vim	/^function s:handler.onComplete(patternSet)$/;"	f
handler.onComplete	C:\programs\gvim\vimfiles\autoload\fuf\mrucmd.vim	/^function s:handler.onComplete(patternSet)$/;"	f
handler.onComplete	C:\programs\gvim\vimfiles\autoload\fuf\mrufile.vim	/^function s:handler.onComplete(patternSet)$/;"	f
handler.onComplete	C:\programs\gvim\vimfiles\autoload\fuf\quickfix.vim	/^function s:handler.onComplete(patternSet)$/;"	f
handler.onComplete	C:\programs\gvim\vimfiles\autoload\fuf\tag.vim	/^function s:handler.onComplete(patternSet)$/;"	f
handler.onComplete	C:\programs\gvim\vimfiles\autoload\fuf\taggedfile.vim	/^function s:handler.onComplete(patternSet)$/;"	f
handler.onModeEnterPost	C:\programs\gvim\vimfiles\autoload\fuf\bookmark.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	C:\programs\gvim\vimfiles\autoload\fuf\buffer.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	C:\programs\gvim\vimfiles\autoload\fuf\callbackfile.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	C:\programs\gvim\vimfiles\autoload\fuf\callbackitem.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	C:\programs\gvim\vimfiles\autoload\fuf\changelist.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	C:\programs\gvim\vimfiles\autoload\fuf\dir.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	C:\programs\gvim\vimfiles\autoload\fuf\file.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	C:\programs\gvim\vimfiles\autoload\fuf\givencmd.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	C:\programs\gvim\vimfiles\autoload\fuf\givendir.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	C:\programs\gvim\vimfiles\autoload\fuf\givenfile.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	C:\programs\gvim\vimfiles\autoload\fuf\jumplist.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	C:\programs\gvim\vimfiles\autoload\fuf\mrucmd.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	C:\programs\gvim\vimfiles\autoload\fuf\mrufile.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	C:\programs\gvim\vimfiles\autoload\fuf\quickfix.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	C:\programs\gvim\vimfiles\autoload\fuf\tag.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	C:\programs\gvim\vimfiles\autoload\fuf\taggedfile.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPre	C:\programs\gvim\vimfiles\autoload\fuf\bookmark.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	C:\programs\gvim\vimfiles\autoload\fuf\buffer.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	C:\programs\gvim\vimfiles\autoload\fuf\callbackfile.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	C:\programs\gvim\vimfiles\autoload\fuf\callbackitem.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	C:\programs\gvim\vimfiles\autoload\fuf\changelist.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	C:\programs\gvim\vimfiles\autoload\fuf\dir.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	C:\programs\gvim\vimfiles\autoload\fuf\file.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	C:\programs\gvim\vimfiles\autoload\fuf\givencmd.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	C:\programs\gvim\vimfiles\autoload\fuf\givendir.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	C:\programs\gvim\vimfiles\autoload\fuf\givenfile.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	C:\programs\gvim\vimfiles\autoload\fuf\jumplist.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	C:\programs\gvim\vimfiles\autoload\fuf\mrucmd.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	C:\programs\gvim\vimfiles\autoload\fuf\mrufile.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	C:\programs\gvim\vimfiles\autoload\fuf\quickfix.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	C:\programs\gvim\vimfiles\autoload\fuf\tag.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	C:\programs\gvim\vimfiles\autoload\fuf\taggedfile.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeLeavePost	C:\programs\gvim\vimfiles\autoload\fuf\bookmark.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	C:\programs\gvim\vimfiles\autoload\fuf\buffer.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	C:\programs\gvim\vimfiles\autoload\fuf\callbackfile.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	C:\programs\gvim\vimfiles\autoload\fuf\callbackitem.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	C:\programs\gvim\vimfiles\autoload\fuf\changelist.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	C:\programs\gvim\vimfiles\autoload\fuf\dir.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	C:\programs\gvim\vimfiles\autoload\fuf\file.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	C:\programs\gvim\vimfiles\autoload\fuf\givencmd.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	C:\programs\gvim\vimfiles\autoload\fuf\givendir.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	C:\programs\gvim\vimfiles\autoload\fuf\givenfile.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	C:\programs\gvim\vimfiles\autoload\fuf\jumplist.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	C:\programs\gvim\vimfiles\autoload\fuf\mrucmd.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	C:\programs\gvim\vimfiles\autoload\fuf\mrufile.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	C:\programs\gvim\vimfiles\autoload\fuf\quickfix.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	C:\programs\gvim\vimfiles\autoload\fuf\tag.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	C:\programs\gvim\vimfiles\autoload\fuf\taggedfile.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onOpen	C:\programs\gvim\vimfiles\autoload\fuf\bookmark.vim	/^function s:handler.onOpen(expr, mode)$/;"	f
handler.onOpen	C:\programs\gvim\vimfiles\autoload\fuf\buffer.vim	/^function s:handler.onOpen(expr, mode)$/;"	f
handler.onOpen	C:\programs\gvim\vimfiles\autoload\fuf\callbackfile.vim	/^function s:handler.onOpen(expr, mode)$/;"	f
handler.onOpen	C:\programs\gvim\vimfiles\autoload\fuf\callbackitem.vim	/^function s:handler.onOpen(expr, mode)$/;"	f
handler.onOpen	C:\programs\gvim\vimfiles\autoload\fuf\changelist.vim	/^function s:handler.onOpen(expr, mode)$/;"	f
handler.onOpen	C:\programs\gvim\vimfiles\autoload\fuf\dir.vim	/^function s:handler.onOpen(expr, mode)$/;"	f
handler.onOpen	C:\programs\gvim\vimfiles\autoload\fuf\file.vim	/^function s:handler.onOpen(expr, mode)$/;"	f
handler.onOpen	C:\programs\gvim\vimfiles\autoload\fuf\givencmd.vim	/^function s:handler.onOpen(expr, mode)$/;"	f
handler.onOpen	C:\programs\gvim\vimfiles\autoload\fuf\givendir.vim	/^function s:handler.onOpen(expr, mode)$/;"	f
handler.onOpen	C:\programs\gvim\vimfiles\autoload\fuf\givenfile.vim	/^function s:handler.onOpen(expr, mode)$/;"	f
handler.onOpen	C:\programs\gvim\vimfiles\autoload\fuf\jumplist.vim	/^function s:handler.onOpen(expr, mode)$/;"	f
handler.onOpen	C:\programs\gvim\vimfiles\autoload\fuf\mrucmd.vim	/^function s:handler.onOpen(expr, mode)$/;"	f
handler.onOpen	C:\programs\gvim\vimfiles\autoload\fuf\mrufile.vim	/^function s:handler.onOpen(expr, mode)$/;"	f
handler.onOpen	C:\programs\gvim\vimfiles\autoload\fuf\quickfix.vim	/^function s:handler.onOpen(expr, mode)$/;"	f
handler.onOpen	C:\programs\gvim\vimfiles\autoload\fuf\tag.vim	/^function s:handler.onOpen(expr, mode)$/;"	f
handler.onOpen	C:\programs\gvim\vimfiles\autoload\fuf\taggedfile.vim	/^function s:handler.onOpen(expr, mode)$/;"	f
handler.targetsPath	C:\programs\gvim\vimfiles\autoload\fuf\bookmark.vim	/^function s:handler.targetsPath()$/;"	f
handler.targetsPath	C:\programs\gvim\vimfiles\autoload\fuf\buffer.vim	/^function s:handler.targetsPath()$/;"	f
handler.targetsPath	C:\programs\gvim\vimfiles\autoload\fuf\callbackfile.vim	/^function s:handler.targetsPath()$/;"	f
handler.targetsPath	C:\programs\gvim\vimfiles\autoload\fuf\callbackitem.vim	/^function s:handler.targetsPath()$/;"	f
handler.targetsPath	C:\programs\gvim\vimfiles\autoload\fuf\changelist.vim	/^function s:handler.targetsPath()$/;"	f
handler.targetsPath	C:\programs\gvim\vimfiles\autoload\fuf\dir.vim	/^function s:handler.targetsPath()$/;"	f
handler.targetsPath	C:\programs\gvim\vimfiles\autoload\fuf\file.vim	/^function s:handler.targetsPath()$/;"	f
handler.targetsPath	C:\programs\gvim\vimfiles\autoload\fuf\givencmd.vim	/^function s:handler.targetsPath()$/;"	f
handler.targetsPath	C:\programs\gvim\vimfiles\autoload\fuf\givendir.vim	/^function s:handler.targetsPath()$/;"	f
handler.targetsPath	C:\programs\gvim\vimfiles\autoload\fuf\givenfile.vim	/^function s:handler.targetsPath()$/;"	f
handler.targetsPath	C:\programs\gvim\vimfiles\autoload\fuf\jumplist.vim	/^function s:handler.targetsPath()$/;"	f
handler.targetsPath	C:\programs\gvim\vimfiles\autoload\fuf\mrucmd.vim	/^function s:handler.targetsPath()$/;"	f
handler.targetsPath	C:\programs\gvim\vimfiles\autoload\fuf\mrufile.vim	/^function s:handler.targetsPath()$/;"	f
handler.targetsPath	C:\programs\gvim\vimfiles\autoload\fuf\quickfix.vim	/^function s:handler.targetsPath()$/;"	f
handler.targetsPath	C:\programs\gvim\vimfiles\autoload\fuf\tag.vim	/^function s:handler.targetsPath()$/;"	f
handler.targetsPath	C:\programs\gvim\vimfiles\autoload\fuf\taggedfile.vim	/^function s:handler.targetsPath()$/;"	f
handlerBase.addStat	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:handlerBase.addStat(pattern, word)$/;"	f
handlerBase.complete	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:handlerBase.complete(findstart, base)$/;"	f
handlerBase.concretize	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:handlerBase.concretize(deriv)$/;"	f
handlerBase.existsPrompt	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:handlerBase.existsPrompt(line)$/;"	f
handlerBase.getFilteredStats	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:handlerBase.getFilteredStats(pattern)$/;"	f
handlerBase.onBs	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:handlerBase.onBs()$/;"	f
handlerBase.onCr	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:handlerBase.onCr(openType, fCheckDir)$/;"	f
handlerBase.onCursorMovedI	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:handlerBase.onCursorMovedI()$/;"	f
handlerBase.onInsertLeave	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:handlerBase.onInsertLeave()$/;"	f
handlerBase.onRecallPattern	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:handlerBase.onRecallPattern(shift)$/;"	f
handlerBase.onSwitchMode	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:handlerBase.onSwitchMode(shift)$/;"	f
handlerBase.removePrompt	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:handlerBase.removePrompt(line)$/;"	f
handlerBase.restorePrompt	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:handlerBase.restorePrompt(line)$/;"	f
help	C:\programs\gvim\vimfiles\plugin\project.vim	/^        cnoremap <buffer> help let g:proj_doinghelp = 1<CR>:help$/;"	m
highlightError	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:highlightError()$/;"	f
highlightPrompt	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:highlightPrompt(prompt)$/;"	f
home	C:\programs\gvim\vimfiles\plugin\project.vim	/^                let home=s:GetHome(info, '')$/;"	v
htClasspath	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static Hashtable htClasspath = new Hashtable();$/;"	f	class:Reflection	access:default
ident	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:ident()$/;"	f
illegal	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:illegal(...)$/;"	f
importDeclaration	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:importDeclaration()$/;"	f
info	C:\programs\gvim\vimfiles\plugin\project.vim	/^                let info=s:RecursivelyConstructDirectives(line('.'))$/;"	v
initMisc	C:\programs\gvim\vimfiles\plugin\fuf.vim	/^function s:initMisc()$/;"	f
initialize	C:\programs\gvim\vimfiles\plugin\fuf.vim	/^function s:initialize()$/;"	f
innerCreator	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:innerCreator(newpos, typeArgs, encl)$/;"	f
inputreplacement	C:\programs\gvim\vimfiles\plugin\surround.vim	/^function! s:inputreplacement()$/;"	f
inputtarget	C:\programs\gvim\vimfiles\plugin\surround.vim	/^function! s:inputtarget()$/;"	f
insert	C:\programs\gvim\vimfiles\plugin\surround.vim	/^function! s:insert(...) " {{{1$/;"	f
interfaceDeclaration	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:interfaceDeclaration(mods, dc)$/;"	f
isBlank	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    private static boolean isBlank(String str) {$/;"	m	class:Reflection	file:	access:private	signature:(String str)
isDigit	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:isDigit(base)$/;"	f
isModifiedSinceLastCall	C:\programs\gvim\vimfiles\autoload\acp.vim	/^function s:isModifiedSinceLastCall()$/;"	f
java_parser#CharAt	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! java_parser#CharAt(line, col)$/;"	f
java_parser#DecodePos	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! java_parser#DecodePos(pos)$/;"	f
java_parser#Exe	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! java_parser#Exe(cmd)$/;"	f
java_parser#FreeParser	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! java_parser#FreeParser()$/;"	f
java_parser#GetLogContent	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! java_parser#GetLogContent()$/;"	f
java_parser#GetLogLevel	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! java_parser#GetLogLevel()$/;"	f
java_parser#GetSnapshot	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! java_parser#GetSnapshot()$/;"	f
java_parser#GotoPosition	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! java_parser#GotoPosition(pos)$/;"	f
java_parser#InitParser	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! java_parser#InitParser(lines, ...)$/;"	f
java_parser#IsStatement	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! java_parser#IsStatement(tree)$/;"	f
java_parser#MakePos	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! java_parser#MakePos(line, col)$/;"	f
java_parser#Restore	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! java_parser#Restore(snapshot)$/;"	f
java_parser#SetLogLevel	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! java_parser#SetLogLevel(level)$/;"	f
java_parser#block	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! java_parser#block()$/;"	f
java_parser#compilationUnit	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! java_parser#compilationUnit()$/;"	f
java_parser#expression	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! java_parser#expression()$/;"	f
java_parser#nextToken	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! java_parser#nextToken()$/;"	f
java_parser#statement	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! java_parser#statement()$/;"	f
java_parser#type2Str	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! java_parser#type2Str(type)$/;"	f
javacomplete#AddClassPath	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! javacomplete#AddClassPath(s)$/;"	f
javacomplete#AddSourcePath	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! javacomplete#AddSourcePath(s)$/;"	f
javacomplete#Complete	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^function! javacomplete#Complete(findstart, base)$/;"	f
javacomplete#CompleteParamsInfo	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! javacomplete#CompleteParamsInfo(findstart, base)$/;"	f
javacomplete#DelClassPath	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! javacomplete#DelClassPath(s)$/;"	f
javacomplete#DelSourcePath	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! javacomplete#DelSourcePath(s)$/;"	f
javacomplete#Exe	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! javacomplete#Exe(cmd)$/;"	f
javacomplete#GetClassPath	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! javacomplete#GetClassPath()$/;"	f
javacomplete#GetClassPathSep	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! javacomplete#GetClassPathSep()$/;"	f
javacomplete#GetCompiler	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! javacomplete#GetCompiler()$/;"	f
javacomplete#GetJVMLauncher	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! javacomplete#GetJVMLauncher()$/;"	f
javacomplete#GetLogContent	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! javacomplete#GetLogContent()$/;"	f
javacomplete#GetLogLevel	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! javacomplete#GetLogLevel()$/;"	f
javacomplete#GetSearchdeclMethod	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! javacomplete#GetSearchdeclMethod()$/;"	f
javacomplete#GetSourcePath	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! javacomplete#GetSourcePath(...)$/;"	f
javacomplete#Searchdecl	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! javacomplete#Searchdecl()$/;"	f
javacomplete#SetClassPath	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! javacomplete#SetClassPath(s)$/;"	f
javacomplete#SetCompiler	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! javacomplete#SetCompiler(compiler)$/;"	f
javacomplete#SetJVMLauncher	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! javacomplete#SetJVMLauncher(interpreter)$/;"	f
javacomplete#SetLogLevel	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! javacomplete#SetLogLevel(level)$/;"	f
javacomplete#SetSearchdeclMethod	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! javacomplete#SetSearchdeclMethod(method)$/;"	f
javacomplete#SetSourcePath	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! javacomplete#SetSourcePath(s)$/;"	f
javacomplete#UseJDK11	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! javacomplete#UseJDK11()$/;"	f
javacomplete#parse	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! javacomplete#parse(...)$/;"	f
jumpToBookmark	C:\programs\gvim\vimfiles\autoload\fuf\bookmark.vim	/^function s:jumpToBookmark(path, mode, pattern, lnum)$/;"	f
k	C:\programs\gvim\vimfiles\plugin\project.vim	/^            let k=k+1$/;"	v
k	C:\programs\gvim\vimfiles\plugin\project.vim	/^        let k=1$/;"	v
l9#async#execute	C:\programs\gvim\vimfiles\autoload\l9\async.vim	/^function l9#async#execute(key, cmd, cwd, input, appends)$/;"	f
l9#async#listActiveWorkers	C:\programs\gvim\vimfiles\autoload\l9\async.vim	/^function l9#async#listActiveWorkers()$/;"	f
l9#async#listWorkers	C:\programs\gvim\vimfiles\autoload\l9\async.vim	/^function l9#async#listWorkers()$/;"	f
l9#async#read	C:\programs\gvim\vimfiles\autoload\l9\async.vim	/^function l9#async#read(key)$/;"	f
l9#completeForInputHl	C:\programs\gvim\vimfiles\autoload\l9.vim	/^function l9#completeForInputHl(lead, line, pos)$/;"	f
l9#concat	C:\programs\gvim\vimfiles\autoload\l9.vim	/^function l9#concat(items)$/;"	f
l9#concatPaths	C:\programs\gvim\vimfiles\autoload\l9.vim	/^function l9#concatPaths(paths)$/;"	f
l9#convertWildcardToRegexp	C:\programs\gvim\vimfiles\autoload\l9.vim	/^function l9#convertWildcardToRegexp(expr)$/;"	f
l9#defineVariableDefault	C:\programs\gvim\vimfiles\autoload\l9.vim	/^function l9#defineVariableDefault(name, default)$/;"	f
l9#deleteAllBuffersExcept	C:\programs\gvim\vimfiles\autoload\l9.vim	/^function l9#deleteAllBuffersExcept(files)$/;"	f
l9#echoHl	C:\programs\gvim\vimfiles\autoload\l9.vim	/^function l9#echoHl(hl, msg, prefix, addingHistory)$/;"	f
l9#filterWithLimit	C:\programs\gvim\vimfiles\autoload\l9.vim	/^function l9#filterWithLimit(items, expr, limit)$/;"	f
l9#getPathSeparator	C:\programs\gvim\vimfiles\autoload\l9.vim	/^function l9#getPathSeparator()$/;"	f
l9#getSelectedText	C:\programs\gvim\vimfiles\autoload\l9.vim	/^function l9#getSelectedText()$/;"	f
l9#getVersion	C:\programs\gvim\vimfiles\autoload\l9.vim	/^function l9#getVersion()$/;"	f
l9#grepBuffers	C:\programs\gvim\vimfiles\autoload\l9.vim	/^function l9#grepBuffers(pattern, bufNrs)$/;"	f
l9#grepFiles	C:\programs\gvim\vimfiles\autoload\l9.vim	/^function l9#grepFiles(pattern, files)$/;"	f
l9#guardScriptLoading	C:\programs\gvim\vimfiles\autoload\l9.vim	/^function l9#guardScriptLoading(path, vimVersion, l9Version, exprs)$/;"	f
l9#hash224	C:\programs\gvim\vimfiles\autoload\l9.vim	/^function l9#hash224(str)$/;"	f
l9#inputHl	C:\programs\gvim\vimfiles\autoload\l9.vim	/^function l9#inputHl(hl, ...)$/;"	f
l9#isCompatible	C:\programs\gvim\vimfiles\autoload\l9.vim	/^function l9#isCompatible(ver)$/;"	f
l9#loadFilesToBuffers	C:\programs\gvim\vimfiles\autoload\l9.vim	/^function l9#loadFilesToBuffers(files)$/;"	f
l9#loadScript	C:\programs\gvim\vimfiles\autoload\l9.vim	/^function l9#loadScript(text)$/;"	f
l9#modifyPathRelativeToDir	C:\programs\gvim\vimfiles\autoload\l9.vim	/^function l9#modifyPathRelativeToDir(path, dir)$/;"	f
l9#moveToBufferWindowInCurrentTabpage	C:\programs\gvim\vimfiles\autoload\l9.vim	/^function l9#moveToBufferWindowInCurrentTabpage(bufNr)$/;"	f
l9#moveToBufferWindowInOtherTabpage	C:\programs\gvim\vimfiles\autoload\l9.vim	/^function l9#moveToBufferWindowInOtherTabpage(bufNr)$/;"	f
l9#notifyBalloonly	C:\programs\gvim\vimfiles\autoload\l9.vim	/^function l9#notifyBalloonly(msg)$/;"	f
l9#notifyExternally	C:\programs\gvim\vimfiles\autoload\l9.vim	/^function l9#notifyExternally(msg)$/;"	f
l9#notifyScreen	C:\programs\gvim\vimfiles\autoload\l9.vim	/^function l9#notifyScreen(msg)$/;"	f
l9#notifyTmux	C:\programs\gvim\vimfiles\autoload\l9.vim	/^function l9#notifyTmux(msg)$/;"	f
l9#placeSign	C:\programs\gvim\vimfiles\autoload\l9.vim	/^function l9#placeSign(linehl, text, texthl, locations)$/;"	f
l9#quickfix#compareEntries	C:\programs\gvim\vimfiles\autoload\l9\quickfix.vim	/^function l9#quickfix#compareEntries(e0, e1)$/;"	f
l9#quickfix#isWindowOpened	C:\programs\gvim\vimfiles\autoload\l9\quickfix.vim	/^function l9#quickfix#isWindowOpened()$/;"	f
l9#quickfix#openIfNotEmpty	C:\programs\gvim\vimfiles\autoload\l9\quickfix.vim	/^function l9#quickfix#openIfNotEmpty(onlyRecognized, holdCursor)$/;"	f
l9#quickfix#placeSign	C:\programs\gvim\vimfiles\autoload\l9\quickfix.vim	/^function l9#quickfix#placeSign()$/;"	f
l9#quickfix#setMakeResult	C:\programs\gvim\vimfiles\autoload\l9\quickfix.vim	/^function l9#quickfix#setMakeResult(lines)$/;"	f
l9#quickfix#sort	C:\programs\gvim\vimfiles\autoload\l9\quickfix.vim	/^function l9#quickfix#sort()$/;"	f
l9#quickfix#toggleWindow	C:\programs\gvim\vimfiles\autoload\l9\quickfix.vim	/^function l9#quickfix#toggleWindow()$/;"	f
l9#readFile	C:\programs\gvim\vimfiles\autoload\l9.vim	/^function l9#readFile(...)$/;"	f
l9#removeIf	C:\programs\gvim\vimfiles\autoload\l9.vim	/^function l9#removeIf(items, expr)$/;"	f
l9#removeLinesBetween	C:\programs\gvim\vimfiles\autoload\l9.vim	/^function l9#removeLinesBetween(lines, begin, end)$/;"	f
l9#shiftWinNextTabpage	C:\programs\gvim\vimfiles\autoload\l9.vim	/^function l9#shiftWinNextTabpage()$/;"	f
l9#shiftWinPrevTabpage	C:\programs\gvim\vimfiles\autoload\l9.vim	/^function l9#shiftWinPrevTabpage()$/;"	f
l9#snipHead	C:\programs\gvim\vimfiles\autoload\l9.vim	/^function l9#snipHead(str, len, mask)$/;"	f
l9#snipMid	C:\programs\gvim\vimfiles\autoload\l9.vim	/^function l9#snipMid(str, len, mask)$/;"	f
l9#snipTail	C:\programs\gvim\vimfiles\autoload\l9.vim	/^function l9#snipTail(str, len, mask)$/;"	f
l9#tempbuffer#close	C:\programs\gvim\vimfiles\autoload\l9\tempbuffer.vim	/^function l9#tempbuffer#close(bufname)$/;"	f
l9#tempbuffer#isOpen	C:\programs\gvim\vimfiles\autoload\l9\tempbuffer.vim	/^function l9#tempbuffer#isOpen(bufname)$/;"	f
l9#tempbuffer#moveTo	C:\programs\gvim\vimfiles\autoload\l9\tempbuffer.vim	/^function l9#tempbuffer#moveTo(bufname)$/;"	f
l9#tempbuffer#openReadOnly	C:\programs\gvim\vimfiles\autoload\l9\tempbuffer.vim	/^function l9#tempbuffer#openReadOnly(bufname, filetype, lines, topleft, vertical, height, listener)$/;"	f
l9#tempbuffer#openScratch	C:\programs\gvim\vimfiles\autoload\l9\tempbuffer.vim	/^function l9#tempbuffer#openScratch(bufname, filetype, lines, topleft, vertical, height, listener)$/;"	f
l9#tempbuffer#openWritable	C:\programs\gvim\vimfiles\autoload\l9\tempbuffer.vim	/^function l9#tempbuffer#openWritable(bufname, filetype, lines, topleft, vertical, height, listener)$/;"	f
l9#tempvariables#end	C:\programs\gvim\vimfiles\autoload\l9\tempvariables.vim	/^function l9#tempvariables#end(group)$/;"	f
l9#tempvariables#getList	C:\programs\gvim\vimfiles\autoload\l9\tempvariables.vim	/^function l9#tempvariables#getList(group)$/;"	f
l9#tempvariables#set	C:\programs\gvim\vimfiles\autoload\l9\tempvariables.vim	/^function l9#tempvariables#set(group, name, value)$/;"	f
l9#tempvariables#setList	C:\programs\gvim\vimfiles\autoload\l9\tempvariables.vim	/^function l9#tempvariables#setList(group, variables)$/;"	f
l9#unique	C:\programs\gvim\vimfiles\autoload\l9.vim	/^function l9#unique(items)$/;"	f
l9#uniqueStably	C:\programs\gvim\vimfiles\autoload\l9.vim	/^function l9#uniqueStably(items)$/;"	f
l9#writeAll	C:\programs\gvim\vimfiles\autoload\l9.vim	/^function l9#writeAll()$/;"	f
l9#writeFile	C:\programs\gvim\vimfiles\autoload\l9.vim	/^function l9#writeFile(...)$/;"	f
l9#zip	C:\programs\gvim\vimfiles\autoload\l9.vim	/^function l9#zip(items)$/;"	f
literal	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:literal(prefix)$/;"	f
loadedScmDiff	C:\programs\gvim\vimfiles\plugin\scmdiff.vim	/^let loadedScmDiff = 1$/;"	v
loaded_genutils	C:\programs\gvim\vimfiles\plugin\genutils.vim	/^let loaded_genutils = 204$/;"	v
loaded_grep	C:\programs\gvim\vimfiles\plugin\grep.vim	/^let loaded_grep = 1$/;"	v
loaded_mru	C:\programs\gvim\vimfiles\plugin\mru.vim	/^let loaded_mru=1$/;"	v
loaded_nerd_comments	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^let loaded_nerd_comments = 1$/;"	v
loaded_project	C:\programs\gvim\vimfiles\plugin\project.vim	/^let loaded_project=1$/;"	v
loaded_snips	C:\programs\gvim\vimfiles\plugin\snipMate.vim	/^let loaded_snips = 1$/;"	v
loaded_taglist	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^            let loaded_taglist = 'no'$/;"	v
loaded_taglist	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^        let loaded_taglist = 'no'$/;"	v
loaded_taglist	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^    let loaded_taglist = 'fast_load_done'$/;"	v
loaded_taglist	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let loaded_taglist = 'available'$/;"	v
lookupfile#AcceptFile	C:\programs\gvim\vimfiles\autoload\lookupfile.vim	/^function! lookupfile#AcceptFile(splitWin, key)$/;"	f
lookupfile#ClearCache	C:\programs\gvim\vimfiles\autoload\lookupfile.vim	/^function! lookupfile#ClearCache()$/;"	f
lookupfile#CloseWindow	C:\programs\gvim\vimfiles\autoload\lookupfile.vim	/^function! lookupfile#CloseWindow()$/;"	f
lookupfile#Complete	C:\programs\gvim\vimfiles\autoload\lookupfile.vim	/^function! lookupfile#Complete(findstart, base)$/;"	f
lookupfile#ExpandCamelCase	C:\programs\gvim\vimfiles\autoload\lookupfile.vim	/^function! lookupfile#ExpandCamelCase(str)$/;"	f
lookupfile#IsPopupHidden	C:\programs\gvim\vimfiles\autoload\lookupfile.vim	/^function! lookupfile#IsPopupHidden()$/;"	f
lookupfile#LookupFile	C:\programs\gvim\vimfiles\autoload\lookupfile.vim	/^function! lookupfile#LookupFile(showingFiller, ...)$/;"	f
lookupfile#OpenWindow	C:\programs\gvim\vimfiles\autoload\lookupfile.vim	/^function! lookupfile#OpenWindow(bang, initPat)$/;"	f
ma	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map ma :SetSuperMark a<CR>$/;"	m
main	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    public static void main(String[] args) {$/;"	m	class:Reflection	access:public	signature:(String[] args)
main_syntax	C:\programs\gvim\vimfiles\syntax\html.vim	/^  let main_syntax = 'html'$/;"	v
makeAdditionalMigemoPattern	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:makeAdditionalMigemoPattern(pattern)$/;"	f
makeCurrentBehaviorSet	C:\programs\gvim\vimfiles\autoload\acp.vim	/^function s:makeCurrentBehaviorSet()$/;"	f
makeDefaultBehavior	C:\programs\gvim\vimfiles\plugin\acp.vim	/^function s:makeDefaultBehavior()$/;"	f
makeFileAbbrInfo	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:makeFileAbbrInfo(item, maxLenStats)$/;"	f
makeFuzzyRegexpPattern	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:makeFuzzyRegexpPattern(pattern)$/;"	f
makeItem	C:\programs\gvim\vimfiles\autoload\fuf\buffer.vim	/^function s:makeItem(nr)$/;"	f
makeItem	C:\programs\gvim\vimfiles\autoload\fuf\changelist.vim	/^function s:makeItem(line)$/;"	f
makeItem	C:\programs\gvim\vimfiles\autoload\fuf\jumplist.vim	/^function s:makeItem(line, bufnrPrev)$/;"	f
makeItem	C:\programs\gvim\vimfiles\autoload\fuf\quickfix.vim	/^function s:makeItem(qfItem)$/;"	f
makeOp	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:makeOp(pos, topOp, od1, od2)$/;"	f
makePartialRegexpPattern	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:makePartialRegexpPattern(pattern)$/;"	f
makePatternSet	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:makePatternSet(patternBase, forPath, partialMatching)$/;"	f
makeRefiningExpr	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:makeRefiningExpr(pattern)$/;"	f
makeSnipmateItem	C:\programs\gvim\vimfiles\autoload\acp.vim	/^function s:makeSnipmateItem(key, snip)$/;"	f
mapForMappingDriven	C:\programs\gvim\vimfiles\autoload\acp.vim	/^function s:mapForMappingDriven()$/;"	f
mb	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map mb :SetSuperMark b<CR>$/;"	m
mc	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map mc :SetSuperMark c<CR>$/;"	m
md	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map md :SetSuperMark d<CR>$/;"	m
me	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map me :SetSuperMark e<CR>$/;"	m
menuRoot	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^        let menuRoot = '&Plugin.&comment'$/;"	v
menuRoot	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^        let menuRoot = '&comment'$/;"	v
menuRoot	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^        let menuRoot = 'comment'$/;"	v
menuRoot	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^    let menuRoot = ""$/;"	v
method2Str	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:method2Str(methoddef)$/;"	f
methodDeclaratorRest	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:methodDeclaratorRest(pos, mods, type, name, typarams, isInterface, isVoid, dc)$/;"	f
methodDeclaratorRest_opt	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:methodDeclaratorRest_opt(pos, mods, type, name, typarams, isInterface, isVoid, dc, str, idx)$/;"	f
mf	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map mf :SetSuperMark f<CR>$/;"	m
mg	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map mg :SetSuperMark g<CR>$/;"	m
mh	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map mh :SetSuperMark h<CR>$/;"	m
mn	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map mn :SetSuperMark n<CR>$/;"	m
modeAndEXPR	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:modeAndEXPR()$/;"	f
modeAndTYPE	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:modeAndTYPE()$/;"	f
modifiersOpt	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:modifiersOpt(...)$/;"	f
moreStatementExpressions	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:moreStatementExpressions(pos, first, stats)$/;"	f
moveToOtherTabPageOpeningBuffer	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:moveToOtherTabPageOpeningBuffer(bufNr)$/;"	f
moveToOtherTabpageOpeningBuffer	C:\programs\gvim\vimfiles\autoload\l9.vim	/^function s:moveToOtherTabpageOpeningBuffer(bufNr)$/;"	f
moveToWindowOfBufferInCurrentTabPage	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:moveToWindowOfBufferInCurrentTabPage(bufNr)$/;"	f
moveToWindowOfBufferInOtherTabPage	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:moveToWindowOfBufferInOtherTabPage(bufNr)$/;"	f
mq	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map mq :SetSuperMark q<CR>$/;"	m
mr	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map mr :SetSuperMark r<CR>$/;"	m
ms	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map ms :SetSuperMark s<CR>$/;"	m
mt	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map mt :SetSuperMark t<CR>$/;"	m
mv	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map mv :SetSuperMark v<CR>$/;"	m
mw	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map mw :SetSuperMark w<CR>$/;"	m
mx	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map mx :SetSuperMark x<CR>$/;"	m
my	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map my :SetSuperMark y<CR>$/;"	m
mz	C:\programs\gvim\vimfiles\vim_extention\vimrc_config\marks.vim	/^map mz :SetSuperMark z<CR>$/;"	m
nextToken	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:nextToken()$/;"	f
omni#common#debug#End	C:\programs\gvim\vimfiles\autoload\omni\common\debug.vim	/^function! omni#common#debug#End()$/;"	f
omni#common#debug#Start	C:\programs\gvim\vimfiles\autoload\omni\common\debug.vim	/^function! omni#common#debug#Start()$/;"	f
omni#common#debug#Trace	C:\programs\gvim\vimfiles\autoload\omni\common\debug.vim	/^function! omni#common#debug#Trace(szFuncName, ...)$/;"	f
omni#common#utils#CompareNumber	C:\programs\gvim\vimfiles\autoload\omni\common\utils.vim	/^function! omni#common#utils#CompareNumber(i1, i2)$/;"	f
omni#common#utils#GetWordUnderCursor	C:\programs\gvim\vimfiles\autoload\omni\common\utils.vim	/^function! omni#common#utils#GetWordUnderCursor()$/;"	f
omni#common#utils#TagList	C:\programs\gvim\vimfiles\autoload\omni\common\utils.vim	/^function! omni#common#utils#TagList(szTagQuery)$/;"	f
omni#common#utils#TagListNoThrow	C:\programs\gvim\vimfiles\autoload\omni\common\utils.vim	/^function! omni#common#utils#TagListNoThrow(szTagQuery)$/;"	f
omni#cpp#complete#Init	C:\programs\gvim\vimfiles\autoload\omni\cpp\complete.vim	/^function! omni#cpp#complete#Init()$/;"	f
omni#cpp#complete#Main	C:\programs\gvim\vimfiles\autoload\omni\cpp\complete.vim	/^function! omni#cpp#complete#Main(findstart, base)$/;"	f
omni#cpp#includes#Display	C:\programs\gvim\vimfiles\autoload\omni\cpp\includes.vim	/^function! omni#cpp#includes#Display()$/;"	f
omni#cpp#includes#GetList	C:\programs\gvim\vimfiles\autoload\omni\cpp\includes.vim	/^function! omni#cpp#includes#GetList(...)$/;"	f
omni#cpp#items#Get	C:\programs\gvim\vimfiles\autoload\omni\cpp\items.vim	/^function! omni#cpp#items#Get(tokens, ...)$/;"	f
omni#cpp#items#ResolveItemsTypeInfo	C:\programs\gvim\vimfiles\autoload\omni\cpp\items.vim	/^function! omni#cpp#items#ResolveItemsTypeInfo(contextStack, items)$/;"	f
omni#cpp#maycomplete#Arrow	C:\programs\gvim\vimfiles\autoload\omni\cpp\maycomplete.vim	/^function! omni#cpp#maycomplete#Arrow()$/;"	f
omni#cpp#maycomplete#Complete	C:\programs\gvim\vimfiles\autoload\omni\cpp\maycomplete.vim	/^function! omni#cpp#maycomplete#Complete()$/;"	f
omni#cpp#maycomplete#Dot	C:\programs\gvim\vimfiles\autoload\omni\cpp\maycomplete.vim	/^function! omni#cpp#maycomplete#Dot()$/;"	f
omni#cpp#maycomplete#Scope	C:\programs\gvim\vimfiles\autoload\omni\cpp\maycomplete.vim	/^function! omni#cpp#maycomplete#Scope()$/;"	f
omni#cpp#namespaces#GetContexts	C:\programs\gvim\vimfiles\autoload\omni\cpp\namespaces.vim	/^function! omni#cpp#namespaces#GetContexts()$/;"	f
omni#cpp#namespaces#GetListFromCurrentBuffer	C:\programs\gvim\vimfiles\autoload\omni\cpp\namespaces.vim	/^function! omni#cpp#namespaces#GetListFromCurrentBuffer(...)$/;"	f
omni#cpp#namespaces#GetMapFromBuffer	C:\programs\gvim\vimfiles\autoload\omni\cpp\namespaces.vim	/^function! omni#cpp#namespaces#GetMapFromBuffer(szFilePath, ...)$/;"	f
omni#cpp#namespaces#GetMapFromCurrentBuffer	C:\programs\gvim\vimfiles\autoload\omni\cpp\namespaces.vim	/^function! omni#cpp#namespaces#GetMapFromCurrentBuffer()$/;"	f
omni#cpp#namespaces#GetUsingNamespaces	C:\programs\gvim\vimfiles\autoload\omni\cpp\namespaces.vim	/^function! omni#cpp#namespaces#GetUsingNamespaces()$/;"	f
omni#cpp#namespaces#ResolveAlias	C:\programs\gvim\vimfiles\autoload\omni\cpp\namespaces.vim	/^function! omni#cpp#namespaces#ResolveAlias(mapNamespaceAlias, szNamespace)$/;"	f
omni#cpp#namespaces#ResolveAll	C:\programs\gvim\vimfiles\autoload\omni\cpp\namespaces.vim	/^function! omni#cpp#namespaces#ResolveAll(namespacesUsed)$/;"	f
omni#cpp#settings#Init	C:\programs\gvim\vimfiles\autoload\omni\cpp\settings.vim	/^function! omni#cpp#settings#Init()$/;"	f
omni#cpp#tokenizer#Tokenize	C:\programs\gvim\vimfiles\autoload\omni\cpp\tokenizer.vim	/^function! omni#cpp#tokenizer#Tokenize(szCode)$/;"	f
omni#cpp#utils#BuildParenthesisGroups	C:\programs\gvim\vimfiles\autoload\omni\cpp\utils.vim	/^function! omni#cpp#utils#BuildParenthesisGroups(tokens)$/;"	f
omni#cpp#utils#CreateTypeInfo	C:\programs\gvim\vimfiles\autoload\omni\cpp\utils.vim	/^function! omni#cpp#utils#CreateTypeInfo(param)$/;"	f
omni#cpp#utils#ExtractCmdFromTagItem	C:\programs\gvim\vimfiles\autoload\omni\cpp\utils.vim	/^function! omni#cpp#utils#ExtractCmdFromTagItem(tagItem)$/;"	f
omni#cpp#utils#ExtractScope	C:\programs\gvim\vimfiles\autoload\omni\cpp\utils.vim	/^function! omni#cpp#utils#ExtractScope(tagItem)$/;"	f
omni#cpp#utils#ExtractTypeInfoFromTag	C:\programs\gvim\vimfiles\autoload\omni\cpp\utils.vim	/^function! omni#cpp#utils#ExtractTypeInfoFromTag(tagItem)$/;"	f
omni#cpp#utils#ExtractTypeInfoFromTokens	C:\programs\gvim\vimfiles\autoload\omni\cpp\utils.vim	/^function! omni#cpp#utils#ExtractTypeInfoFromTokens(tokens)$/;"	f
omni#cpp#utils#GetCastType	C:\programs\gvim\vimfiles\autoload\omni\cpp\utils.vim	/^function! omni#cpp#utils#GetCastType(tokens)$/;"	f
omni#cpp#utils#GetClassInheritanceList	C:\programs\gvim\vimfiles\autoload\omni\cpp\utils.vim	/^function! omni#cpp#utils#GetClassInheritanceList(namespaces, typeInfo)$/;"	f
omni#cpp#utils#GetCode	C:\programs\gvim\vimfiles\autoload\omni\cpp\utils.vim	/^function! omni#cpp#utils#GetCode(posStart, posEnd)$/;"	f
omni#cpp#utils#GetCodeFromLine	C:\programs\gvim\vimfiles\autoload\omni\cpp\utils.vim	/^function! omni#cpp#utils#GetCodeFromLine(szSingleLine)$/;"	f
omni#cpp#utils#GetPreviewWindowStringFromTagItem	C:\programs\gvim\vimfiles\autoload\omni\cpp\utils.vim	/^function! omni#cpp#utils#GetPreviewWindowStringFromTagItem(tagItem)$/;"	f
omni#cpp#utils#GetResolvedTagItem	C:\programs\gvim\vimfiles\autoload\omni\cpp\utils.vim	/^function! omni#cpp#utils#GetResolvedTagItem(namespaces, typeInfo)$/;"	f
omni#cpp#utils#GetResolvedTags	C:\programs\gvim\vimfiles\autoload\omni\cpp\utils.vim	/^function! omni#cpp#utils#GetResolvedTags(namespaces, typeInfo)$/;"	f
omni#cpp#utils#GetTypeInfoString	C:\programs\gvim\vimfiles\autoload\omni\cpp\utils.vim	/^function! omni#cpp#utils#GetTypeInfoString(typeInfo)$/;"	f
omni#cpp#utils#IsCursorInCommentOrString	C:\programs\gvim\vimfiles\autoload\omni\cpp\utils.vim	/^function! omni#cpp#utils#IsCursorInCommentOrString()$/;"	f
omni#cpp#utils#IsTypeInfoValid	C:\programs\gvim\vimfiles\autoload\omni\cpp\utils.vim	/^function! omni#cpp#utils#IsTypeInfoValid(typeInfo)$/;"	f
omni#cpp#utils#ResolveFilePath	C:\programs\gvim\vimfiles\autoload\omni\cpp\utils.vim	/^function! omni#cpp#utils#ResolveFilePath(szFile)$/;"	f
omni#cpp#utils#SimplifyParenthesis	C:\programs\gvim\vimfiles\autoload\omni\cpp\utils.vim	/^function! omni#cpp#utils#SimplifyParenthesis(tokens)$/;"	f
omni#cpp#utils#SimplifyScope	C:\programs\gvim\vimfiles\autoload\omni\cpp\utils.vim	/^function! omni#cpp#utils#SimplifyScope(szScope)$/;"	f
omni#cpp#utils#TokenizeCurrentInstruction	C:\programs\gvim\vimfiles\autoload\omni\cpp\utils.vim	/^function! omni#cpp#utils#TokenizeCurrentInstruction(...)$/;"	f
omni#cpp#utils#TokenizeCurrentInstructionUntilWord	C:\programs\gvim\vimfiles\autoload\omni\cpp\utils.vim	/^function! omni#cpp#utils#TokenizeCurrentInstructionUntilWord()$/;"	f
omni#cpp#utils#expIgnoreComments	C:\programs\gvim\vimfiles\autoload\omni\cpp\utils.vim	/^let omni#cpp#utils#expIgnoreComments = 'getline(".") =~ g:omni#cpp#utils#reIgnoreComment'$/;"	v
omni#cpp#utils#reIgnoreComment	C:\programs\gvim\vimfiles\autoload\omni\cpp\utils.vim	/^let omni#cpp#utils#reIgnoreComment = escape('\\\/\\\/\\|\\\/\\*\\|\\*\\\/', '*\/\\')$/;"	v
omni#cpp#utils#szEscapedCharacters	C:\programs\gvim\vimfiles\autoload\omni\cpp\utils.vim	/^let omni#cpp#utils#szEscapedCharacters = ' %#'$/;"	v
onBufDelete	C:\programs\gvim\vimfiles\autoload\l9\tempbuffer.vim	/^function s:onBufDelete(bufname)$/;"	f
onBufEnter	C:\programs\gvim\vimfiles\plugin\fuf.vim	/^function s:onBufEnter()$/;"	f
onBufWriteCmd	C:\programs\gvim\vimfiles\autoload\l9\tempbuffer.vim	/^function s:onBufWriteCmd(bufname)$/;"	f
onBufWriteCmdInfoFile	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:onBufWriteCmdInfoFile()$/;"	f
onBufWritePost	C:\programs\gvim\vimfiles\plugin\fuf.vim	/^function s:onBufWritePost()$/;"	f
onCommandPre	C:\programs\gvim\vimfiles\plugin\fuf.vim	/^function s:onCommandPre()$/;"	f
opPrec	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:opPrec(tag)$/;"	f
openFufBuffer	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:openFufBuffer()$/;"	f
opfunc	C:\programs\gvim\vimfiles\plugin\surround.vim	/^function! s:opfunc(type,...) " {{{1$/;"	f
opfunc2	C:\programs\gvim\vimfiles\plugin\surround.vim	/^function! s:opfunc2(arg)$/;"	f
optFinal	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:optFinal(flags)$/;"	f
optFinalParameter	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:optFinalParameter()$/;"	f
optag	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:optag(token)$/;"	f
os	C:\programs\gvim\vimfiles\autoload\l9\async.py	/^import os$/;"	i
output	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    static void output(String s) {$/;"	m	class:Reflection	access:default	signature:(String s)
parExpression	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:parExpression()$/;"	f
parseChangesLine	C:\programs\gvim\vimfiles\autoload\fuf\changelist.vim	/^function s:parseChangesLine(line)$/;"	f
parseJumpsLine	C:\programs\gvim\vimfiles\autoload\fuf\jumplist.vim	/^function s:parseJumpsLine(line, bufnrPrev)$/;"	f
parseJumpsLine	C:\programs\gvim\vimfiles\autoload\fuf\quickfix.vim	/^function s:parseJumpsLine(line)$/;"	f
prec	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:prec(token)$/;"	f
print_active_worker_keys	C:\programs\gvim\vimfiles\autoload\l9\async.py	/^    def print_active_worker_keys(self):$/;"	m	class:Asyncer	access:public
print_output	C:\programs\gvim\vimfiles\autoload\l9\async.py	/^    def print_output(self, var_key):$/;"	m	class:Asyncer	access:public
print_worker_keys	C:\programs\gvim\vimfiles\autoload\l9\async.py	/^    def print_worker_keys(self):$/;"	m	class:Asyncer	access:public
process	C:\programs\gvim\vimfiles\plugin\surround.vim	/^function! s:process(string)$/;"	f
put	C:\programs\gvim\vimfiles\autoload\l9\async.py	/^    def put(self, executor):$/;"	m	class:Worker	access:public
putClassInfo	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    private static void putClassInfo(Hashtable map, Class clazz) {$/;"	m	class:Reflection	file:	access:private	signature:(Hashtable map, Class clazz)
putItem	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    public static void putItem(Hashtable map, String parent, String child, int index) {$/;"	m	class:Reflection	access:public	signature:(Hashtable map, String parent, String child, int index)
putPackageInfo	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    private static void putPackageInfo(Hashtable map, String name) {$/;"	m	class:Reflection	file:	access:private	signature:(Hashtable map, String name)
python_highlight_builtins	C:\programs\gvim\vimfiles\syntax\python.vim	/^  let python_highlight_builtins = 1$/;"	v
python_highlight_exceptions	C:\programs\gvim\vimfiles\syntax\python.vim	/^  let python_highlight_exceptions = 1$/;"	v
python_highlight_numbers	C:\programs\gvim\vimfiles\syntax\python.vim	/^  let python_highlight_numbers = 1$/;"	v
python_highlight_space_errors	C:\programs\gvim\vimfiles\syntax\python.vim	/^  let python_highlight_space_errors = 1$/;"	v
qualident	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:qualident()$/;"	f
record_output	C:\programs\gvim\vimfiles\autoload\l9\async.py	/^    def record_output(self, line):$/;"	m	class:Worker	access:public
redraw	C:\programs\gvim\vimfiles\plugin\surround.vim	/^function! s:redraw()$/;"	f
reindent	C:\programs\gvim\vimfiles\plugin\surround.vim	/^function! s:reindent() " {{{1$/;"	f
removeItemFromCache	C:\programs\gvim\vimfiles\autoload\fuf\mrufile.vim	/^function s:removeItemFromCache(word)$/;"	f
renewCachesOfAllModes	C:\programs\gvim\vimfiles\plugin\fuf.vim	/^function s:renewCachesOfAllModes()$/;"	f
repeat	C:\programs\gvim\vimfiles\plugin\surround.vim	/^function! s:repeat(str,count)$/;"	f
restoreTemporaryGlobalOptions	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:restoreTemporaryGlobalOptions()$/;"	f
retval	C:\programs\gvim\vimfiles\plugin\project.vim	/^        let retval=b:fnamelist$/;"	v
run	C:\programs\gvim\vimfiles\autoload\l9\async.py	/^    def run(self):$/;"	m	class:Worker	access:public
s	C:\programs\gvim\vimfiles\plugin\surround.vim	/^            vmap  s    <Plug>Vsurround$/;"	m
s:ABBR_SNIP_MASK	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^let s:ABBR_SNIP_MASK = '...'$/;"	v
s:ARRAY_TYPE_INFO	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let s:ARRAY_TYPE_INFO = {'tag': 'CLASSDEF', 'name': '[', 'ctors': [], $/;"	v
s:ARRAY_TYPE_MEMBERS	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let s:ARRAY_TYPE_MEMBERS = [$/;"	v
s:ASYNC_PY_PATH	C:\programs\gvim\vimfiles\autoload\l9\async.vim	/^let s:ASYNC_PY_PATH = fnamemodify(expand('<sfile>:p:h'), ':p') . 'async.py'$/;"	v
s:C	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^let s:C = 100$/;"	v
s:CACHE_DEBUG_TRACE	C:\programs\gvim\vimfiles\autoload\omni\common\debug.vim	/^let s:CACHE_DEBUG_TRACE = []$/;"	v
s:CACHE_OVERLOADED_FUNCTIONS	C:\programs\gvim\vimfiles\autoload\omni\cpp\complete.vim	/^let s:CACHE_OVERLOADED_FUNCTIONS = {}$/;"	v
s:CACHE_TAG_ENV	C:\programs\gvim\vimfiles\autoload\omni\cpp\complete.vim	/^let s:CACHE_TAG_ENV = ''$/;"	v
s:CACHE_TAG_FILES	C:\programs\gvim\vimfiles\autoload\omni\cpp\complete.vim	/^let s:CACHE_TAG_FILES = {}$/;"	v
s:CACHE_TAG_POPUP_ITEMS	C:\programs\gvim\vimfiles\autoload\omni\cpp\complete.vim	/^let s:CACHE_TAG_POPUP_ITEMS = {}$/;"	v
s:CONTEXT_AFTER_DOT	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let s:CONTEXT_AFTER_DOT		= 1$/;"	v
s:CONTEXT_IMPORT	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let s:CONTEXT_IMPORT		= 3$/;"	v
s:CONTEXT_IMPORT_STATIC	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let s:CONTEXT_IMPORT_STATIC	= 4$/;"	v
s:CONTEXT_METHOD_PARAM	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let s:CONTEXT_METHOD_PARAM	= 2$/;"	v
s:CONTEXT_NEED_TYPE	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let s:CONTEXT_NEED_TYPE		= 7 $/;"	v
s:CONTEXT_OTHER	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let s:CONTEXT_OTHER 		= 0$/;"	v
s:CONTEXT_PACKAGE_DECL	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let s:CONTEXT_PACKAGE_DECL	= 6 $/;"	v
s:D	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^let s:D = 500$/;"	v
s:DECHOMSG	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^ let s:DECHOMSG = 2 $/;"	v
s:DECHOREM	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^ let s:DECHOREM = 4 $/;"	v
s:DECHOTAB	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^ let s:DECHOTAB = 5 $/;"	v
s:DECHOVAR	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^ let s:DECHOVAR = 3 $/;"	v
s:DECHOWIN	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^ let s:DECHOWIN = 1 $/;"	v
s:DirDiffALine	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^let s:DirDiffALine = 1$/;"	v
s:DirDiffBLine	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^let s:DirDiffBLine = 2$/;"	v
s:DirDiffCopyCmd	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^    let s:DirDiffCopyCmd = ""$/;"	v
s:DirDiffCopyCmd	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^    let s:DirDiffCopyCmd = "copy"$/;"	v
s:DirDiffCopyCmd	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^    let s:DirDiffCopyCmd = "cp"$/;"	v
s:DirDiffCopyDirCmd	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^    let s:DirDiffCopyDirCmd = "cp"$/;"	v
s:DirDiffCopyDirCmd	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^    let s:DirDiffCopyDirCmd = "xcopy"$/;"	v
s:DirDiffCopyDirFlags	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^    let s:DirDiffCopyDirFlags = "-rf"$/;"	v
s:DirDiffCopyDirFlags	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^    let s:DirDiffCopyDirFlags = "\/e \/i \/q"$/;"	v
s:DirDiffCopyFlags	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^    let s:DirDiffCopyFlags = ""$/;"	v
s:DirDiffCopyInteractiveFlag	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^    let s:DirDiffCopyInteractiveFlag = "-i"$/;"	v
s:DirDiffCopyInteractiveFlag	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^    let s:DirDiffCopyInteractiveFlag = "\/-y"$/;"	v
s:DirDiffDeleteCmd	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^    let s:DirDiffDeleteCmd = ""$/;"	v
s:DirDiffDeleteCmd	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^    let s:DirDiffDeleteCmd = "del"$/;"	v
s:DirDiffDeleteCmd	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^    let s:DirDiffDeleteCmd = "rm"$/;"	v
s:DirDiffDeleteDirCmd	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^    let s:DirDiffDeleteDirCmd = "rd"$/;"	v
s:DirDiffDeleteDirCmd	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^    let s:DirDiffDeleteDirCmd = "rm"$/;"	v
s:DirDiffDeleteDirFlags	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^    let s:DirDiffDeleteDirFlags = "-rf"$/;"	v
s:DirDiffDeleteDirFlags	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^    let s:DirDiffDeleteDirFlags = "\/s"$/;"	v
s:DirDiffDeleteDirQuietFlag	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^    let s:DirDiffDeleteDirQuietFlag = "\/q"$/;"	v
s:DirDiffDeleteFlags	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^    let s:DirDiffDeleteFlags = ""$/;"	v
s:DirDiffDeleteFlags	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^    let s:DirDiffDeleteFlags = "\/s \/q"$/;"	v
s:DirDiffDeleteInteractiveFlag	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^    let s:DirDiffDeleteInteractiveFlag = "-i"$/;"	v
s:DirDiffDeleteInteractiveFlag	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^    let s:DirDiffDeleteInteractiveFlag = "\/p"$/;"	v
s:DirDiffFirstDiffLine	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^let s:DirDiffFirstDiffLine = 6$/;"	v
s:DirDiffMakeDirCmd	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^    let s:DirDiffMakeDirCmd  = "!mkdir "$/;"	v
s:EOI	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^let s:EOI = 'eName	|| Type[]$/;"	v
s:ERROR	C:\programs\gvim\vimfiles\autoload\vimball.vim	/^ let s:ERROR   = 2$/;"	v
s:EXPR	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^let s:EXPR = 1$/;"	v
s:EXPR_OR_TYPE	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^let s:EXPR_OR_TYPE = 3$/;"	v
s:EXPR_OR_TYPE_OR_NOPARAMS	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^let s:EXPR_OR_TYPE_OR_NOPARAMS = 7$/;"	v
s:FILE_SEP	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^  let s:FILE_SEP	= '\\'$/;"	v
s:FILE_SEP	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let s:FILE_SEP	= '\/'$/;"	v
s:I	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^let s:I = 1$/;"	v
s:INFO_FILE_VERSION_LINE	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^let s:INFO_FILE_VERSION_LINE = "VERSION\\t300"$/;"	v
s:JSP_BUILTIN_OBJECTS	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let s:JSP_BUILTIN_OBJECTS = {'session':	'javax.servlet.http.HttpSession',$/;"	v
s:KEYWORDS	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let s:KEYWORDS		= s:PRIMITIVE_TYPES + s:KEYWORDS_MODS + s:KEYWORDS_TYPE + ['super', 'this', 'void'] + ['assert', 'break', 'case', 'catch', 'const', 'continue', 'default', 'do', 'else', 'extends', 'finally', 'for', 'goto', 'if', 'implements', 'import', 'instanceof', 'interface', 'new', 'package', 'return', 'switch', 'throw', 'throws', 'try', 'while', 'true', 'false', 'null']$/;"	v
s:KEYWORDS_MODS	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let s:KEYWORDS_MODS	= ['public', 'private', 'protected', 'static', 'final', 'synchronized', 'volatile', 'transient', 'native', 'strictfp', 'abstract']$/;"	v
s:KEYWORDS_TYPE	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let s:KEYWORDS_TYPE	= ['class', 'interface', 'enum']$/;"	v
s:L	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^let s:L = 50$/;"	v
s:L9_VERSION_CURRENT	C:\programs\gvim\vimfiles\autoload\l9.vim	/^let s:L9_VERSION_CURRENT  = 101$/;"	v
s:L9_VERSION_PASSABLE	C:\programs\gvim\vimfiles\autoload\l9.vim	/^let s:L9_VERSION_PASSABLE = 101$/;"	v
s:M	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^let s:M = 1000$/;"	v
s:MODE_NAME	C:\programs\gvim\vimfiles\autoload\fuf\bookmark.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	C:\programs\gvim\vimfiles\autoload\fuf\buffer.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	C:\programs\gvim\vimfiles\autoload\fuf\callbackfile.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	C:\programs\gvim\vimfiles\autoload\fuf\callbackitem.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	C:\programs\gvim\vimfiles\autoload\fuf\changelist.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	C:\programs\gvim\vimfiles\autoload\fuf\dir.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	C:\programs\gvim\vimfiles\autoload\fuf\file.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	C:\programs\gvim\vimfiles\autoload\fuf\givencmd.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	C:\programs\gvim\vimfiles\autoload\fuf\givendir.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	C:\programs\gvim\vimfiles\autoload\fuf\givenfile.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	C:\programs\gvim\vimfiles\autoload\fuf\jumplist.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	C:\programs\gvim\vimfiles\autoload\fuf\mrucmd.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	C:\programs\gvim\vimfiles\autoload\fuf\mrufile.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	C:\programs\gvim\vimfiles\autoload\fuf\quickfix.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	C:\programs\gvim\vimfiles\autoload\fuf\tag.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	C:\programs\gvim\vimfiles\autoload\fuf\taggedfile.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MapToken2Tag	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^let s:MapToken2Tag = {'BARBAR': 'OR', 'AMPAMP': 'AND', 'BAR': 'BITOR', 'BAREQ': 'BITOR_ASG', 'CARET': 'BITXOR', 'CARETEQ': 'BITXOR_ASG', 'AMP': 'BITAND', 'AMPEQ': 'BITAND_ASG', 'EQEQ': 'EQ', 'BANGEQ': 'NE', 'LT': 'LT', 'GT': 'GT', 'LTEQ': 'LE', 'GTEQ': 'GE', 'LTLT': 'SL', 'LTLTEQ': 'SL_ASG', 'GTGT': 'SR', 'GTGTEQ': 'SR_ASG', 'GTGTGT': 'USR', 'GTGTGTEQ': 'USR_ASG', 'PLUS': 'PLUS', 'PLUSEQ': 'PLUS_ASG', 'SUB': 'MINUS', 'SUBEQ': 'MINUS_ASG', 'STAR': 'MUL', 'STAREQ': 'MUL_ASG', 'SLASH': 'DIV', 'SLASHEQ': 'DIV_ASG', 'PERCENT': 'MOD', 'PERCENTEQ': 'MOD_ASG', 'INSTANCEOF': 'TYPETEST'}$/;"	v
s:NERDFileNameEscape	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^let s:NERDFileNameEscape="[]#*$%'\\" ?`!&();<>\\\\"$/;"	v
s:NOPARAMS	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^let s:NOPARAMS = 4$/;"	v
s:OPEN_TYPE_CURRENT	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^let s:OPEN_TYPE_CURRENT = 1$/;"	v
s:OPEN_TYPE_DELETE	C:\programs\gvim\vimfiles\autoload\fuf\bookmark.vim	/^let s:OPEN_TYPE_DELETE = -1$/;"	v
s:OPEN_TYPE_SPLIT	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^let s:OPEN_TYPE_SPLIT   = 2$/;"	v
s:OPEN_TYPE_TAB	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^let s:OPEN_TYPE_TAB     = 4$/;"	v
s:OPEN_TYPE_VSPLIT	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^let s:OPEN_TYPE_VSPLIT  = 3$/;"	v
s:OmniCpp_ShowAccess	C:\programs\gvim\vimfiles\autoload\omni\cpp\complete.vim	/^let s:OmniCpp_ShowAccess = g:OmniCpp_ShowAccess$/;"	v
s:OmniCpp_ShowPrototypeInAbbr	C:\programs\gvim\vimfiles\autoload\omni\cpp\complete.vim	/^let s:OmniCpp_ShowPrototypeInAbbr = g:OmniCpp_ShowPrototypeInAbbr$/;"	v
s:OmniCpp_ShowScopeInAbbr	C:\programs\gvim\vimfiles\autoload\omni\cpp\complete.vim	/^let s:OmniCpp_ShowScopeInAbbr = g:OmniCpp_ShowScopeInAbbr$/;"	v
s:PATH_SEP	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^  let s:PATH_SEP	= ';'$/;"	v
s:PATH_SEP	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let s:PATH_SEP	= ':'$/;"	v
s:PATH_SEPARATOR	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^let s:PATH_SEPARATOR = (!&shellslash && (has('win32') || has('win64')) ? '\\' : '\/')$/;"	v
s:PRIMITIVE_TYPES	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let s:PRIMITIVE_TYPES	= ['boolean', 'byte', 'char', 'int', 'short', 'long', 'float', 'double']$/;"	v
s:PRIMITIVE_TYPE_INFO	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let s:PRIMITIVE_TYPE_INFO = {'tag': 'CLASSDEF', 'name': '!', 'fields': [{'n': 'class','m': '1','t': 'Class'}]}$/;"	v
s:PROTOTYPE	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^let s:PROTOTYPE = {'s:options': {}, 'b:buf': '', 'b:buflen': 0, 'b:lines': [], 'b:idxes': [0], 'b:bp': -1, 'b:ch': '', 'b:line': 0, 'b:col': 0, 'b:pos': 0, 'b:endPos': 0, 'b:prevEndPos': 0, 'b:errPos': -1, 'b:errorEndPos': -1, 'b:sbuf': '', 'b:name': '', 'b:token': '', 'b:docComment': '', 'b:radix': 0, 'b:unicodeConversionBp': -1, 'b:scanStrategy': 0, 'b:allowGenerics': 1, 'b:allowVarargs': 1, 'b:allowAsserts': 1, 'b:allowEnums': 1, 'b:allowForeach': 1, 'b:allowStaticImport': 1, 'b:allowAnnotations': 1, 'b:keepDocComments': 1, 'b:mode': 0, 'b:lastmode': 0, 'b:log': [], 'b:et_perf': '', 'b:et_nextToken_count': 0}$/;"	v
s:RE_ARRAY_ACCESS	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let s:RE_ARRAY_ACCESS	= '^\\s*\\(' . s:RE_IDENTIFIER . '\\)\\s*\\(\\[.*\\]\\)\\+\\s*$'$/;"	v
s:RE_ARRAY_TYPE	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let s:RE_ARRAY_TYPE	= '^\\s*\\(' .s:RE_QUALID . '\\)\\(' . s:RE_BRACKETS . '\\+\\)\\s*$'$/;"	v
s:RE_BRACKETS	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let s:RE_BRACKETS	= '\\%(\\s*\\[\\s*\\]\\)'$/;"	v
s:RE_CASTING	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let s:RE_CASTING	= '^\\s*(\\(' .s:RE_QUALID. '\\))\\s*\\(' . s:RE_IDENTIFIER . '\\)\\>'$/;"	v
s:RE_FORMAL_PARAM	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^let s:RE_FORMAL_PARAM		= '\\(final\\s*\\)\\='. s:RE_TYPE . '\\s\\+' . s:RE_VAR_DECL_ID$/;"	v
s:RE_FORMAL_PARAM2	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^let s:RE_FORMAL_PARAM2		= '^\\s*\\(final\\s*\\)\\=\\('. s:RE_TYPE . '\\)\\s\\+\\(' . s:RE_IDENTIFIER . '\\)' . s:RE_BRACKETS . '*'$/;"	v
s:RE_FORMAL_PARAM_LIST	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^let s:RE_FORMAL_PARAM_LIST	= s:RE_FORMAL_PARAM . '\\(\\s*,\\s*' . s:RE_FORMAL_PARAM . '\\)*'$/;"	v
s:RE_IDENTIFIER	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let s:RE_IDENTIFIER	= '[a-zA-Z_$][a-zA-Z0-9_$]*'$/;"	v
s:RE_KEYWORDS	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let s:RE_KEYWORDS	= '\\<\\%(' . join(s:KEYWORDS, '\\|') . '\\)\\>'$/;"	v
s:RE_MEMBER_HEADER	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^let s:RE_MEMBER_HEADER		= '\\s*\\(\\%(' .s:RE_MEMBER_MODS. '\\s\\+\\)\\+\\)\\(' .s:RE_IDENTIFIER. '\\%(\\s*\\.\\s*' .s:RE_IDENTIFIER. '\\)*\\%(\\s*\\[\\s*\\]\\)*\\)\\s\\+\\(' .s:RE_IDENTIFIER. '\\)'$/;"	v
s:RE_MEMBER_MODS	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^let s:RE_MEMBER_MODS		= '\\%(PUBLIC\\|PROTECTED\\|PRIVATE\\|ABSTRACT\\|STATIC\\|FINAL\\|TRANSIENT\\|VOLATILE\\|SYNCHRONIZED\\|NATIVE\\|STRICTFP\\)'$/;"	v
s:RE_QUALID	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let s:RE_QUALID		= s:RE_IDENTIFIER. '\\%(\\s*\\.\\s*' .s:RE_IDENTIFIER. '\\)*'$/;"	v
s:RE_REFERENCE_TYPE	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let s:RE_REFERENCE_TYPE	= s:RE_QUALID . s:RE_BRACKETS . '*'$/;"	v
s:RE_SELECT_OR_ACCESS	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let s:RE_SELECT_OR_ACCESS	= '^\\s*\\(' . s:RE_IDENTIFIER . '\\)\\s*\\(\\[.*\\]\\)\\=\\s*$'$/;"	v
s:RE_THROWS	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^let s:RE_THROWS			= 'throws\\s\\+' . s:RE_TYPE_NAME . '\\(\\s*,\\s*' . s:RE_TYPE_NAME . '\\)*'$/;"	v
s:RE_TYPE	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^let s:RE_TYPE			= s:RE_REFERENCE_TYPE		" PrimitiveType || ReferenceType$/;"	v
s:RE_TYPE	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let s:RE_TYPE		= s:RE_REFERENCE_TYPE$/;"	v
s:RE_TYPE_ARGUMENT	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let s:RE_TYPE_ARGUMENT	= '\\%(?\\s\\+\\%(extends\\|super\\)\\s\\+\\)\\=' . s:RE_TYPE$/;"	v
s:RE_TYPE_ARGUMENTS	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let s:RE_TYPE_ARGUMENTS	= '<' . s:RE_TYPE_ARGUMENT . '\\%(\\s*,\\s*' . s:RE_TYPE_ARGUMENT . '\\)*>'$/;"	v
s:RE_TYPE_DECL	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let s:RE_TYPE_DECL	= '\\<\\C\\(\\%(' .s:RE_TYPE_MODS. '\\s\\+\\)*\\)' .s:RE_TYPE_DECL_HEAD. '\\(' .s:RE_IDENTIFIER. '\\)[< \\t\\n\\r]'$/;"	v
s:RE_TYPE_DECL_HEAD	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let s:RE_TYPE_DECL_HEAD	= '\\(class\\|interface\\|enum\\)[ \\t\\n\\r]\\+'$/;"	v
s:RE_TYPE_MODS	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let s:RE_TYPE_MODS	= '\\%(public\\|protected\\|private\\|abstract\\|static\\|final\\|strictfp\\)'$/;"	v
s:RE_TYPE_PARAMS	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^let s:RE_TYPE_PARAMS		= ''$/;"	v
s:RE_TYPE_VARIABLE	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^let s:RE_TYPE_VARIABLE		= s:RE_IDENTIFIER$/;"	v
s:RE_TYPE_WITH_ARGUMENTS	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let s:RE_TYPE_WITH_ARGUMENTS	= s:RE_TYPE_WITH_ARGUMENTS_I . '\\%(\\s*' . s:RE_TYPE_WITH_ARGUMENTS_I . '\\)*'$/;"	v
s:RE_TYPE_WITH_ARGUMENTS_I	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let s:RE_TYPE_WITH_ARGUMENTS_I	= s:RE_IDENTIFIER . '\\s*' . s:RE_TYPE_ARGUMENTS$/;"	v
s:RE_VAR_DECL_ID	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^let s:RE_VAR_DECL_ID		= s:RE_IDENTIFIER . s:RE_BRACKETS . '*'$/;"	v
s:TEMP_VARIABLES_GROUP0	C:\programs\gvim\vimfiles\autoload\acp.vim	/^let s:TEMP_VARIABLES_GROUP0 = "AutoComplPop0"$/;"	v
s:TEMP_VARIABLES_GROUP1	C:\programs\gvim\vimfiles\autoload\acp.vim	/^let s:TEMP_VARIABLES_GROUP1 = "AutoComplPop1"$/;"	v
s:TTree	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^let s:TTree = {'tag': '', 'pos': 0}	" Root class for AST nodes.$/;"	v
s:TV_CMP_POS	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let s:TV_CMP_POS = 'a:tree.pos <= a:param.pos && a:param.pos <= get(a:tree, "endpos", -1)'$/;"	v
s:TV_CMP_POS_BODY	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let s:TV_CMP_POS_BODY = 'has_key(a:tree, "body") && a:tree.body.pos <= a:param.pos && a:param.pos <= get(a:tree.body, "endpos", -1)'$/;"	v
s:TYPE	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^let s:TYPE = 2$/;"	v
s:TYPEARG	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^let s:TYPEARG = 8$/;"	v
s:TYPEARG_OR_NOPARAMS	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^let s:TYPEARG_OR_NOPARAMS = 12$/;"	v
s:Tlist_Skip_Refresh	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:Tlist_Skip_Refresh = 0$/;"	v
s:TreeVisitor	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let s:TreeVisitor = {'visit': function('s:visitTree'),$/;"	v
s:UNPROTECTED_CHAR_PRFX	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^let s:UNPROTECTED_CHAR_PRFX = '\\%(\\%([^\\\\]\\|^\\)\\\\\\%(\\\\\\\\\\)*\\)\\@<!' " Doesn't eat slashes.$/;"	v
s:USAGE	C:\programs\gvim\vimfiles\autoload\vimball.vim	/^ let s:USAGE   = 0$/;"	v
s:V	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^let s:V = 5$/;"	v
s:VERSION_FACTOR	C:\programs\gvim\vimfiles\autoload\l9.vim	/^let s:VERSION_FACTOR = str2float('0.01')$/;"	v
s:WARNING	C:\programs\gvim\vimfiles\autoload\vimball.vim	/^ let s:WARNING = 1$/;"	v
s:X	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^let s:X = 10$/;"	v
s:bMayComplete	C:\programs\gvim\vimfiles\autoload\omni\cpp\complete.vim	/^let s:bMayComplete = 0$/;"	v
s:behavsCurrent	C:\programs\gvim\vimfiles\autoload\acp.vim	/^let s:behavsCurrent = []$/;"	v
s:bufNrFuf	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^let s:bufNrFuf = -1$/;"	v
s:bufTimes	C:\programs\gvim\vimfiles\autoload\fuf\buffer.vim	/^let s:bufTimes = {}$/;"	v
s:cache	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let s:cache = {}	" FQN -> member list, e.g. {'java.lang.StringBuffer': classinfo, 'java.util': packageinfo, '\/dir\/TopLevelClass.java': compilationUnit}$/;"	v
s:cpo_save	C:\programs\gvim\vimfiles\ftplugin\conf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	C:\programs\gvim\vimfiles\plugin\grep.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	C:\programs\gvim\vimfiles\plugin\mru.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	C:\programs\gvim\vimfiles\plugin\surround.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:cpo_save = &cpo$/;"	v
s:cppKeyword	C:\programs\gvim\vimfiles\autoload\omni\cpp\tokenizer.vim	/^let s:cppKeyword = ['asm', 'auto', 'bool', 'break', 'case', 'catch', 'char', 'class', 'const', 'const_cast', 'continue', 'default', 'delete', 'do', 'double', 'dynamic_cast', 'else', 'enum', 'explicit', 'export', 'extern', 'false', 'float', 'for', 'friend', 'goto', 'if', 'inline', 'int', 'long', 'mutable', 'namespace', 'new', 'operator', 'private', 'protected', 'public', 'register', 'reinterpret_cast', 'return', 'short', 'signed', 'sizeof', 'static', 'static_cast', 'struct', 'switch', 'template', 'this', 'throw', 'true', 'try', 'typedef', 'typeid', 'typename', 'union', 'unsigned', 'using', 'virtual', 'void', 'volatile', 'wchar_t', 'while', 'and', 'and_eq', 'bitand', 'bitor', 'compl', 'not', 'not_eq', 'or', 'or_eq', 'xor', 'xor_eq']$/;"	v
s:cppOperatorPunctuator	C:\programs\gvim\vimfiles\autoload\omni\cpp\tokenizer.vim	/^let s:cppOperatorPunctuator = ['->*', '->', '--', '-=', '-', '!=', '!', '##', '#', '%:%:', '%=', '%>', '%:', '%', '&&', '&=', '&', '(', ')', '*=', '*', ',', '...', '.*', '.', '\/=', '\/', '::', ':>', ':', ';', '?', '[', ']', '^=', '^', '{', '||', '|=', '|', '}', '~', '++', '+=', '+', '<<=', '<%', '<:', '<<', '<=', '<', '==', '=', '>>=', '>>', '>=', '>']$/;"	v
s:dataMap	C:\programs\gvim\vimfiles\autoload\l9\tempbuffer.vim	/^let s:dataMap = {}$/;"	v
s:decho_depth	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^ let s:decho_depth  = 0 $/;"	v
s:defFCShellInstalled	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^let s:defFCShellInstalled = 0$/;"	v
s:delimiterMap	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^let s:delimiterMap = {$/;"	v
s:did_snip_helper	C:\programs\gvim\vimfiles\ftplugin\html_snip_helper.vim	/^let s:did_snip_helper = 1$/;"	v
s:did_snips_mappings	C:\programs\gvim\vimfiles\after\plugin\snipMate.vim	/^let s:did_snips_mappings = 1$/;"	v
s:doing_indent_inits	C:\programs\gvim\vimfiles\indent\php.vim	/^let s:doing_indent_inits = 1$/;"	v
s:emapleader	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^  let s:emapleader= escape(s:mapleader,'\\ ')$/;"	v
s:esc_filename_chars	C:\programs\gvim\vimfiles\plugin\mru.vim	/^let s:esc_filename_chars = ' *?[{`$%#"|!<>();&' . "'\\t\\n"$/;"	v
s:fcShellPreFuncs	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^  let s:fcShellPreFuncs = {}$/;"	v
s:fg_hlname	C:\programs\gvim\vimfiles\syntax\Decho.vim	/^  let s:fg_hlname= synIDattr(synIDtrans(s:id_hlname),"fg")$/;"	v
s:files	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let s:files = {}	" srouce file path -> properties, e.g. {filekey: {'unit': compilationUnit, 'changedtick': tick, }}$/;"	v
s:firstmenu	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^ let s:firstmenu= 1$/;"	v
s:handler	C:\programs\gvim\vimfiles\autoload\fuf\bookmark.vim	/^let s:handler = {}$/;"	v
s:handler	C:\programs\gvim\vimfiles\autoload\fuf\buffer.vim	/^let s:handler = {}$/;"	v
s:handler	C:\programs\gvim\vimfiles\autoload\fuf\callbackfile.vim	/^let s:handler = {}$/;"	v
s:handler	C:\programs\gvim\vimfiles\autoload\fuf\callbackitem.vim	/^let s:handler = {}$/;"	v
s:handler	C:\programs\gvim\vimfiles\autoload\fuf\changelist.vim	/^let s:handler = {}$/;"	v
s:handler	C:\programs\gvim\vimfiles\autoload\fuf\dir.vim	/^let s:handler = {}$/;"	v
s:handler	C:\programs\gvim\vimfiles\autoload\fuf\file.vim	/^let s:handler = {}$/;"	v
s:handler	C:\programs\gvim\vimfiles\autoload\fuf\givencmd.vim	/^let s:handler = {}$/;"	v
s:handler	C:\programs\gvim\vimfiles\autoload\fuf\givendir.vim	/^let s:handler = {}$/;"	v
s:handler	C:\programs\gvim\vimfiles\autoload\fuf\givenfile.vim	/^let s:handler = {}$/;"	v
s:handler	C:\programs\gvim\vimfiles\autoload\fuf\jumplist.vim	/^let s:handler = {}$/;"	v
s:handler	C:\programs\gvim\vimfiles\autoload\fuf\mrucmd.vim	/^let s:handler = {}$/;"	v
s:handler	C:\programs\gvim\vimfiles\autoload\fuf\mrufile.vim	/^let s:handler = {}$/;"	v
s:handler	C:\programs\gvim\vimfiles\autoload\fuf\quickfix.vim	/^let s:handler = {}$/;"	v
s:handler	C:\programs\gvim\vimfiles\autoload\fuf\tag.vim	/^let s:handler = {}$/;"	v
s:handler	C:\programs\gvim\vimfiles\autoload\fuf\taggedfile.vim	/^let s:handler = {}$/;"	v
s:handlerBase	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^let s:handlerBase = {}$/;"	v
s:hasPreviewWindow	C:\programs\gvim\vimfiles\autoload\omni\cpp\complete.vim	/^let s:hasPreviewWindow = match(&completeopt, 'preview')>=0$/;"	v
s:hasPreviewWindowOld	C:\programs\gvim\vimfiles\autoload\omni\cpp\complete.vim	/^let s:hasPreviewWindowOld = s:hasPreviewWindow$/;"	v
s:history	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^let s:history = {}	" $/;"	v
s:iBehavs	C:\programs\gvim\vimfiles\autoload\acp.vim	/^let s:iBehavs = 0$/;"	v
s:id_hlname	C:\programs\gvim\vimfiles\syntax\Decho.vim	/^  let s:id_hlname= hlID("Warning")$/;"	v
s:keepcpo	C:\programs\gvim\vimfiles\autoload\Align.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	C:\programs\gvim\vimfiles\autoload\AlignMaps.vim	/^let s:keepcpo         = &cpo$/;"	v
s:keepcpo	C:\programs\gvim\vimfiles\autoload\vimball.vim	/^let s:keepcpo        = &cpo$/;"	v
s:keepcpo	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^let s:keepcpo                = &cpo$/;"	v
s:keepcpo	C:\programs\gvim\vimfiles\plugin\AlignPlugin.vim	/^let s:keepcpo            = &cpo$/;"	v
s:keepcpo	C:\programs\gvim\vimfiles\plugin\Decho.vim	/^let s:keepcpo      = &cpo $/;"	v
s:keepcpo	C:\programs\gvim\vimfiles\plugin\cecutil.vim	/^let s:keepcpo        = &cpo$/;"	v
s:keepcpo	C:\programs\gvim\vimfiles\plugin\vimballPlugin.vim	/^let s:keepcpo              = &cpo$/;"	v
s:lenSpaceStr	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^let s:lenSpaceStr = strlen(s:spaceStr)$/;"	v
s:lockCount	C:\programs\gvim\vimfiles\autoload\acp.vim	/^let s:lockCount = 0$/;"	v
s:makeArgumentList	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^let s:makeArgumentList = ''$/;"	v
s:makeArgumentString	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^let s:makeArgumentString = ''$/;"	v
s:mapleader	C:\programs\gvim\vimfiles\plugin\AlignMapsPlugin.vim	/^  let s:mapleader = exists("g:mapleader")? g:mapleader : '\\'$/;"	v
s:menu_char_prefix	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:menu_char_prefix =$/;"	v
s:modes	C:\programs\gvim\vimfiles\plugin\supertab.vim	/^  let s:modes = '\/^E\/^Y\/^L\/^N\/^K\/^T\/^I\/^]\/^F\/^D\/^V\/^P\/^U\/^O\/s'$/;"	v
s:modes	C:\programs\gvim\vimfiles\plugin\supertab.vim	/^  let s:modes = s:modes . '\/n\/p'$/;"	v
s:modifier	C:\programs\gvim\vimfiles\plugin\cecutil.vim	/^ let s:modifier= "sil "$/;"	v
s:modifier	C:\programs\gvim\vimfiles\plugin\cecutil.vim	/^ let s:modifier= "sil keepj "$/;"	v
s:modifier_keywords	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^let s:modifier_keywords = ['strictfp', 'abstract', 'interface', 'native', 'transient', 'volatile', 'synchronized', 'final', 'static', 'protected', 'private', 'public']$/;"	v
s:mru_list_locked	C:\programs\gvim\vimfiles\plugin\mru.vim	/^let s:mru_list_locked = 0$/;"	v
s:myBufNum	C:\programs\gvim\vimfiles\autoload\lookupfile.vim	/^  let s:myBufNum = -1$/;"	v
s:mySNR	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^let s:mySNR = ''$/;"	v
s:notifyWindow	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^let s:notifyWindow = {}$/;"	v
s:opprecedences	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^let s:opprecedences = {'notExpression': -1, 'noPrec': 0,       'assignPrec': 1, 'assignopPrec': 2, 'condPrec': 3, 'orPrec': 4, 'andPrec': 5, 'bitorPrec': 6, 'bitxorPrec': 7, 'bitandPrec': 8, 'eqPrec': 9, 'ordPrec': 10, 'shiftPrec': 11, 'addPrec': 12, 'mulPrec': 13, 'prefixPrec': 14, 'postfixPrec': 15, 'precCount': 16}$/;"	v
s:origMap	C:\programs\gvim\vimfiles\autoload\l9\tempvariables.vim	/^let s:origMap = {}$/;"	v
s:originalGlobalOptions	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^let s:originalGlobalOptions = {}$/;"	v
s:popupIsHidden	C:\programs\gvim\vimfiles\autoload\lookupfile.vim	/^  let s:popupIsHidden = 0$/;"	v
s:popupItemResultList	C:\programs\gvim\vimfiles\autoload\omni\cpp\complete.vim	/^let s:popupItemResultList = []$/;"	v
s:reCComment	C:\programs\gvim\vimfiles\autoload\omni\cpp\tokenizer.vim	/^let s:reCComment = '\\\/\\*\\|\\*\\\/'$/;"	v
s:reComment	C:\programs\gvim\vimfiles\autoload\omni\cpp\tokenizer.vim	/^let s:reComment = s:reCComment.'\\|'.s:reCppComment$/;"	v
s:reCppComment	C:\programs\gvim\vimfiles\autoload\omni\cpp\tokenizer.vim	/^let s:reCppComment = '\\\/\\\/'$/;"	v
s:reCppKeyword	C:\programs\gvim\vimfiles\autoload\omni\cpp\tokenizer.vim	/^let s:reCppKeyword = '\\C\\<'.join(s:cppKeyword, '\\>\\|\\<').'\\>'$/;"	v
s:reCppOperatorOrPunctuator	C:\programs\gvim\vimfiles\autoload\omni\cpp\tokenizer.vim	/^let s:reCppOperatorOrPunctuator = escape(join(s:cppOperatorPunctuator, '\\|'), '*.\/^~[]')$/;"	v
s:reIncludeFilePart	C:\programs\gvim\vimfiles\autoload\omni\cpp\includes.vim	/^let s:reIncludeFilePart = '\\(<\\|"\\)\\(\\f\\|\\s\\)\\+\\(>\\|"\\)'$/;"	v
s:rePreprocIncludeFile	C:\programs\gvim\vimfiles\autoload\omni\cpp\includes.vim	/^let s:rePreprocIncludeFile = s:rePreprocIncludePart . s:reIncludeFilePart$/;"	v
s:rePreprocIncludePart	C:\programs\gvim\vimfiles\autoload\omni\cpp\includes.vim	/^let s:rePreprocIncludePart = '\\C#\\s*include\\s*'$/;"	v
s:save_cpo	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	C:\programs\gvim\vimfiles\autoload\lookupfile.vim	/^let s:save_cpo = &cpo$/;"	v
s:selection	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^let s:selection = -1$/;"	v
s:sep	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^    let s:sep = ""$/;"	v
s:sep	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^    let s:sep = "\/"$/;"	v
s:sep	C:\programs\gvim\vimfiles\plugin\DirDiff.vim	/^    let s:sep = "\\\\"$/;"	v
s:snipItems	C:\programs\gvim\vimfiles\autoload\acp.vim	/^let s:snipItems = {}$/;"	v
s:snippets	C:\programs\gvim\vimfiles\plugin\snipMate.vim	/^let s:snippets = {} | let s:multi_snips = {}$/;"	v
s:spaceStr	C:\programs\gvim\vimfiles\plugin\NERD_commenter.vim	/^let s:spaceStr = ' '$/;"	v
s:spacer	C:\programs\gvim\vimfiles\autoload\genutils.vim	/^let s:spacer= "                                                               ".$/;"	v
s:szCurrentWorkingDir	C:\programs\gvim\vimfiles\autoload\omni\cpp\complete.vim	/^let s:szCurrentWorkingDir = getcwd()$/;"	v
s:tabHelp	C:\programs\gvim\vimfiles\plugin\supertab.vim	/^  let s:tabHelp =$/;"	v
s:timerData	C:\programs\gvim\vimfiles\plugin\l9.vim	/^  let s:timerData = []$/;"	v
s:timerTagMaxLen	C:\programs\gvim\vimfiles\plugin\l9.vim	/^  let s:timerTagMaxLen = 0$/;"	v
s:tlist_app_name	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_app_name = "none"$/;"	v
s:tlist_brief_help	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_brief_help = 1$/;"	v
s:tlist_cur_file_idx	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_cur_file_idx = -1$/;"	v
s:tlist_debug	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_debug = 0$/;"	v
s:tlist_debug_file	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_debug_file = ''$/;"	v
s:tlist_def_asm_settings	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_def_asm_settings = 'asm;d:define;l:label;m:macro;t:type'$/;"	v
s:tlist_def_aspperl_settings	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_def_aspperl_settings = 'asp;f:function;s:sub;v:variable'$/;"	v
s:tlist_def_aspvbs_settings	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_def_aspvbs_settings = 'asp;f:function;s:sub;v:variable'$/;"	v
s:tlist_def_awk_settings	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_def_awk_settings = 'awk;f:function'$/;"	v
s:tlist_def_beta_settings	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_def_beta_settings = 'beta;f:fragment;s:slot;v:pattern'$/;"	v
s:tlist_def_c_settings	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_def_c_settings = 'c;d:macro;g:enum;s:struct;u:union;t:typedef;' .$/;"	v
s:tlist_def_cobol_settings	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_def_cobol_settings = 'cobol;d:data;f:file;g:group;p:paragraph;' .$/;"	v
s:tlist_def_cpp_settings	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_def_cpp_settings = 'c++;n:namespace;v:variable;d:macro;t:typedef;' .$/;"	v
s:tlist_def_cs_settings	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_def_cs_settings = 'c#;d:macro;t:typedef;n:namespace;c:class;' .$/;"	v
s:tlist_def_csh_settings	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_def_csh_settings = 'sh;f:function'$/;"	v
s:tlist_def_eiffel_settings	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_def_eiffel_settings = 'eiffel;c:class;f:feature'$/;"	v
s:tlist_def_erlang_settings	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_def_erlang_settings = 'erlang;d:macro;r:record;m:module;f:function'$/;"	v
s:tlist_def_expect_settings	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_def_expect_settings = 'tcl;c:class;f:method;p:procedure'$/;"	v
s:tlist_def_fortran_settings	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_def_fortran_settings = 'fortran;p:program;b:block data;' .$/;"	v
s:tlist_def_html_settings	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_def_html_settings = 'html;a:anchor;f:javascript function'$/;"	v
s:tlist_def_java_settings	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_def_java_settings = 'java;p:package;c:class;i:interface;' .$/;"	v
s:tlist_def_javascript_settings	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_def_javascript_settings = 'javascript;f:function'$/;"	v
s:tlist_def_lisp_settings	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_def_lisp_settings = 'lisp;f:function'$/;"	v
s:tlist_def_lua_settings	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_def_lua_settings = 'lua;f:function'$/;"	v
s:tlist_def_make_settings	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_def_make_settings = 'make;m:macro'$/;"	v
s:tlist_def_pascal_settings	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_def_pascal_settings = 'pascal;f:function;p:procedure'$/;"	v
s:tlist_def_perl_settings	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_def_perl_settings = 'perl;c:constant;l:label;p:package;s:subroutine'$/;"	v
s:tlist_def_php_settings	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_def_php_settings = 'php;c:class;d:constant;v:variable;f:function'$/;"	v
s:tlist_def_python_settings	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_def_python_settings = 'python;c:class;m:member;f:function'$/;"	v
s:tlist_def_rexx_settings	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_def_rexx_settings = 'rexx;s:subroutine'$/;"	v
s:tlist_def_ruby_settings	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_def_ruby_settings = 'ruby;c:class;f:method;F:function;' .$/;"	v
s:tlist_def_scheme_settings	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_def_scheme_settings = 'scheme;s:set;f:function'$/;"	v
s:tlist_def_sh_settings	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_def_sh_settings = 'sh;f:function'$/;"	v
s:tlist_def_slang_settings	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_def_slang_settings = 'slang;n:namespace;f:function'$/;"	v
s:tlist_def_sml_settings	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_def_sml_settings = 'sml;e:exception;c:functor;s:signature;' .$/;"	v
s:tlist_def_sql_settings	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_def_sql_settings = 'sql;c:cursor;F:field;P:package;r:record;' .$/;"	v
s:tlist_def_tcl_settings	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_def_tcl_settings = 'tcl;c:class;f:method;m:method;p:procedure'$/;"	v
s:tlist_def_vera_settings	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_def_vera_settings = 'vera;c:class;d:macro;e:enumerator;' .$/;"	v
s:tlist_def_verilog_settings	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_def_verilog_settings = 'verilog;m:module;c:constant;P:parameter;' .$/;"	v
s:tlist_def_vim_settings	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_def_vim_settings = 'vim;a:autocmds;v:variable;f:function'$/;"	v
s:tlist_def_yacc_settings	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_def_yacc_settings = 'yacc;l:label'$/;"	v
s:tlist_def_zsh_settings	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_def_zsh_settings = 'sh;f:function'$/;"	v
s:tlist_file_count	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_file_count = 0$/;"	v
s:tlist_file_lnum_idx_cache	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_file_lnum_idx_cache = -1$/;"	v
s:tlist_file_name_idx_cache	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_file_name_idx_cache = -1$/;"	v
s:tlist_file_names	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_file_names=''$/;"	v
s:tlist_ftype_count	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_ftype_count = 0$/;"	v
s:tlist_menu_empty	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_menu_empty = 1$/;"	v
s:tlist_msg	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^    let s:tlist_msg = ''$/;"	v
s:tlist_removed_flist	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_removed_flist = ""$/;"	v
s:tlist_sid	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^    let s:tlist_sid = substitute(maparg('<SID>xx'), '<SNR>\\(\\d\\+_\\)xx$',$/;"	v
s:tlist_win_maximized	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_win_maximized = 0$/;"	v
s:tlist_winsize_chgd	C:\programs\gvim\vimfiles\plugin\taglist.vim	/^let s:tlist_winsize_chgd = -1$/;"	v
s:types	C:\programs\gvim\vimfiles\plugin\supertab.vim	/^  let s:types = s:types . "np"$/;"	v
s:types	C:\programs\gvim\vimfiles\plugin\supertab.vim	/^  let s:types =$/;"	v
s:windowName	C:\programs\gvim\vimfiles\autoload\lookupfile.vim	/^  let s:windowName = '[Lookup File]'$/;"	v
scanChar	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:scanChar()$/;"	f
scanComment	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:scanComment()$/;"	f
scanDocComment	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:scanDocComment()$/;"	f
scanDoubleQuote	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:scanDoubleQuote()$/;"	f
scanFraction	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:scanFraction()$/;"	f
scanFractionAndSuffix	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:scanFractionAndSuffix()$/;"	f
scanHexExponentAndSuffix	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:scanHexExponentAndSuffix()$/;"	f
scanHexFractionAndSuffix	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:scanHexFractionAndSuffix(seendigit)$/;"	f
scanIdent	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:scanIdent()$/;"	f
scanIdent_old	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:scanIdent_old()$/;"	f
scanLitChar	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:scanLitChar()$/;"	f
scanNumber	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:scanNumber(radix)$/;"	f
scanOperator	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:scanOperator()$/;"	f
scanSingleQuote	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:scanSingleQuote()$/;"	f
scmDiff	C:\programs\gvim\vimfiles\plugin\scmdiff.vim	/^function! s:scmDiff(...)$/;"	f
scmRefresh	C:\programs\gvim\vimfiles\plugin\scmdiff.vim	/^function! s:scmRefresh()$/;"	f
scmToggle	C:\programs\gvim\vimfiles\plugin\scmdiff.vim	/^function! s:scmToggle()$/;"	f
scoreBoundaryMatching	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:scoreBoundaryMatching(word, patternPartial, patternFuzzy)$/;"	f
scoreSequentialMatching	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:scoreSequentialMatching(word, patternPartial)$/;"	f
serializeInfoMap	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:serializeInfoMap(infoMap)$/;"	f
setAbbrWithFileAbbrData	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:setAbbrWithFileAbbrData(item, snippedHeads)$/;"	f
setCompletefunc	C:\programs\gvim\vimfiles\autoload\acp.vim	/^function s:setCompletefunc()$/;"	f
setErrorEndPos	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:setErrorEndPos(errPos)$/;"	f
setLocalOptionsForFufBuffer	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:setLocalOptionsForFufBuffer()$/;"	f
setRanks	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:setRanks(item, patternPartial, patternFuzzy, boundaryMatching, stats)$/;"	f
setTemporaryGlobalOption	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:setTemporaryGlobalOption(name, value)$/;"	f
skip	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:skip(stopAtImport, stopAtMemberDecl, stopAtIdentifier, stopAtStatement)$/;"	f
skipComment	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:skipComment()$/;"	f
snipHead	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:snipHead(str, len, mask)$/;"	f
snipMate#expandSnip	C:\programs\gvim\vimfiles\autoload\snipMate.vim	/^fun snipMate#expandSnip(snip, col)$/;"	f
snipMate#jumpTabStop	C:\programs\gvim\vimfiles\autoload\snipMate.vim	/^fun snipMate#jumpTabStop(backwards)$/;"	f
snipMid	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:snipMid(str, len, mask)$/;"	f
snipTail	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:snipTail(str, len, mask)$/;"	f
snippets_dir	C:\programs\gvim\vimfiles\plugin\snipMate.vim	/^	let snippets_dir = substitute(globpath(&rtp, 'snippets\/'), "\\n", ',', 'g')$/;"	v
statement	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:statement()$/;"	f
subprocess	C:\programs\gvim\vimfiles\autoload\l9\async.py	/^import subprocess$/;"	i
superSuffix	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:superSuffix(typeArgs, t)$/;"	f
switchBlockStatementGroups	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:switchBlockStatementGroups()$/;"	f
term	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:term(...)$/;"	f
term1	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:term1()$/;"	f
term1Rest	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:term1Rest(t)$/;"	f
term2	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:term2()$/;"	f
term2Rest	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:term2Rest(t, minprec)$/;"	f
term3	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:term3()$/;"	f
termRest	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:termRest(t)$/;"	f
threading	C:\programs\gvim\vimfiles\autoload\l9\async.py	/^import threading$/;"	i
timerBegin	C:\programs\gvim\vimfiles\plugin\l9.vim	/^  function s:timerBegin(tag)$/;"	f
timerDump	C:\programs\gvim\vimfiles\plugin\l9.vim	/^  function s:timerDump()$/;"	f
timerStop	C:\programs\gvim\vimfiles\plugin\l9.vim	/^  function s:timerStop()$/;"	f
token2string	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:token2string(token)$/;"	f
type	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:type()$/;"	f
typeArgument	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:typeArgument()$/;"	f
typeArguments	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:typeArguments(...)$/;"	f
typeArgumentsOpt	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:typeArgumentsOpt(...)$/;"	f
typeArgumentsOpt2	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:typeArgumentsOpt2(t)$/;"	f
typeDeclaration	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:typeDeclaration(mods)$/;"	f
typeList	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:typeList()$/;"	f
typeParameter	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:typeParameter()$/;"	f
typeParametersOpt	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:typeParametersOpt()$/;"	f
typetag	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:typetag(token)$/;"	f
unmapForMappingDriven	C:\programs\gvim\vimfiles\autoload\acp.vim	/^function s:unmapForMappingDriven()$/;"	f
unoptag	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:unoptag(token)$/;"	f
updateBufTimes	C:\programs\gvim\vimfiles\autoload\fuf\buffer.vim	/^function s:updateBufTimes()$/;"	f
updateInfo	C:\programs\gvim\vimfiles\autoload\fuf\mrucmd.vim	/^function s:updateInfo(cmd)$/;"	f
updateInfo	C:\programs\gvim\vimfiles\autoload\fuf\mrufile.vim	/^function s:updateInfo()$/;"	f
usage	C:\programs\gvim\vimfiles\autoload\Reflection.java	/^    private static void usage() {$/;"	m	class:Reflection	file:	access:private	signature:()
vardef2Str	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:vardef2Str(vardef)$/;"	f
variableDeclarator	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:variableDeclarator(mods, type, reqInit, dc)$/;"	f
variableDeclaratorId	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:variableDeclaratorId(mods, type)$/;"	f
variableDeclaratorRest	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:variableDeclaratorRest(pos, mods, type, name, reqInit, dc)$/;"	f
variableDeclarators	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:variableDeclarators(mods, type, vdefs)$/;"	f
variableDeclaratorsRest	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:variableDeclaratorsRest(pos, mods, type, name, reqInit, dc, vdefs)$/;"	f
variableInitializer	C:\programs\gvim\vimfiles\autoload\java_parser.vim	/^fu! s:variableInitializer()$/;"	f
vim	C:\programs\gvim\vimfiles\autoload\l9\async.py	/^import vim$/;"	i
vimball#Decompress	C:\programs\gvim\vimfiles\autoload\vimball.vim	/^fun! vimball#Decompress(fname)$/;"	f
vimball#MkVimball	C:\programs\gvim\vimfiles\autoload\vimball.vim	/^fun! vimball#MkVimball(line1,line2,writelevel,...) range$/;"	f
vimball#RmVimball	C:\programs\gvim\vimfiles\autoload\vimball.vim	/^fun! vimball#RmVimball(...)$/;"	f
vimball#ShowMesg	C:\programs\gvim\vimfiles\autoload\vimball.vim	/^fun! vimball#ShowMesg(level,msg)$/;"	f
vimball#Vimball	C:\programs\gvim\vimfiles\autoload\vimball.vim	/^fun! vimball#Vimball(really,...)$/;"	f
visitTree	C:\programs\gvim\vimfiles\autoload\javacomplete.vim	/^fu! s:visitTree(tree, param) dict$/;"	f
w	C:\programs\gvim\vimfiles\syntax\.colorss.vim	/^  let w = expand('<cword>')$/;"	v
warnOldInfoFile	C:\programs\gvim\vimfiles\autoload\fuf.vim	/^function s:warnOldInfoFile()$/;"	f
with_statement	C:\programs\gvim\vimfiles\autoload\l9\async.py	/^from __future__ import with_statement$/;"	i
wrap	C:\programs\gvim\vimfiles\plugin\surround.vim	/^function! s:wrap(string,char,type,...)$/;"	f
wrapreg	C:\programs\gvim\vimfiles\plugin\surround.vim	/^function! s:wrapreg(reg,char,...)$/;"	f
xml	C:\programs\gvim\vimfiles\ftplugin\xml.vim	/^augroup xml$/;"	a
yS	C:\programs\gvim\vimfiles\plugin\surround.vim	/^    nmap          yS   <Plug>YSurround$/;"	m
ySS	C:\programs\gvim\vimfiles\plugin\surround.vim	/^    nmap          ySS  <Plug>YSsurround$/;"	m
ySs	C:\programs\gvim\vimfiles\plugin\surround.vim	/^    nmap          ySs  <Plug>YSsurround$/;"	m
ys	C:\programs\gvim\vimfiles\plugin\surround.vim	/^    nmap          ys   <Plug>Ysurround$/;"	m
yss	C:\programs\gvim\vimfiles\plugin\surround.vim	/^    nmap          yss  <Plug>Yssurround$/;"	m
