"DEPRICATED ?
"commented 30.06.2010
"map `q :wincmd h<CR><UP><CR>
"map `a :wincmd h<CR><DOWN><CR>
"map `w :wincmd l<CR><UP><CR>
"map `s :wincmd l<CR><DOWN><CR>


"nmap <C-F6> :delmarks ABCDEFGHIJKLMNOPQRSTUVWXYZ <cr>          " C+F6 - delete all marks 
"vmap <C-F6> <esc>:delmarks ABCDEFGHIJKLMNOPQRSTUVWXYZ<cr>      " C+F6 - delete all marks 
"imap <C-F6> <esc><esc>:delmarks ABCDEFGHIJKLMNOPQRSTUVWXYZ<cr> " C+F6 - delete all marks 

" \ct ctags . directory recursivly
"map \ct :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>
"map \ct :!ctags -R --fields=+iaS --extra=+q .<CR>
"map \ct :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q -I <CR> 
"I - mean list of files


"DEPRICATED
"au FileChangedShell * call FCSHandler(expand("<afile>:p"))


"NOT RESET REDO LIST, THIS FEATURE WORK LITTLE BIT STRAGE,
"FOR EXAMPLE, VIM RELOAD FILES TIME AFTER TIME WITHOUT CHANGES, BUT HE ADD IT
"TO REDO LIST, WHAT TO DO?

"au FileChangedShell * Reload
"command! -bang Reload call ReloadFile(<bang>0)
"function! ReloadFile(is_force_pos)
  "" save the current cursor position
  "let position = getpos(".")
  "" delete all lines
  "%d
  "" read the file back into the buffer
  "r
  "" remove the superfluous line
  "1d
  "" restore the cursor position if a:is_force_pos
  ""if a:is_force_pos
    "call setpos(".", position)
  ""endif
"endfunc


"augroup AutoDiffUpdate
  "au!
  "autocmd InsertLeave * if &diff | diffupdate | let b:old_changedtick
"= b:changedtick | endif
  "autocmd CursorHold *
        "\ if &diff &&
        "\    (!exists('b:old_changedtick') || b:old_changedtick !=
"b:changedtick) |
        "\   let b:old_changedtick = b:changedtick | diffupdate |
        "\ endif
"augroup END

" Highlight all instances of word under cursor, when idle.
" Useful when studying strange source code.
" Type z/ to toggle highlighting on/off.
"nnoremap z/ :if AutoHighlightToggle()<Bar>set hls<Bar>endif<CR>
"function! AutoHighlightToggle()
  "let @/ = ''
  "if exists('#auto_highlight')
    "au! auto_highlight
    "augroup! auto_highlight
    "setl updatetime=4000
    "echo 'Highlight current word: off'
    "return 0
  "else
    "augroup auto_highlight
      "au!
      "au CursorHold * let @/ = '\<'.expand('<cword>').'\>'
    "augroup end
    "setl updatetime=200
    "echo 'Highlight current word: ON'
    "return 1
  "endif
"endfunction

"vmap <C-Left> :call FWK_Mettre_Les_Lines_inV('left')<CR>

""mettre sur la direction gauche et droite
"func FWK_Mettre_Les_Lines_inV(direction)
    "echo a:direction
    ""put 

"endfunc

"le Projet besoins functions

