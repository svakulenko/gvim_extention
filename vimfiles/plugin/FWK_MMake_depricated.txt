if v:version < 701 
	finish 
else
 
 
"Useful information 
"------------------------------------- 
"MMakeBuild {arg} - command to set project marker, if {arg} not set, current file will be set like project marker 
"MMakeRun   {arg} - command to set binary marker,  if {arg} not set, current file will be set like binary marker 
 
 
 
"//--------------------------------------------------------------------------------- 
if !exists('g:MMake_SettingsFile')  
 
    let l:loadFile = "mmake_settings.cfg" 
 
    if has('unix') || has('macunix') 
        let g:MMake_SettingsFile = $HOME . "/" . l:loadFile 
    else 
        let g:MMake_SettingsFile = $VIM .  "/" . l:loadFile 
        if has('win32') 
            if $USERPROFILE != '' 
                let g:MMake_SettingsFile = $USERPROFILE . "\\" . l:loadFile 
            endif 
        endif 
    endif 
endif 
 
"if !exists('makeprg')  
    ""set makeprg=make 
    ""set makeprg=bjam  
"endif 
 
 
 
"//--------------------------------------------------------------------------------- 
  let g:MMake_BuildVar = "" 
"//--------------------------------------------------------------------------------- 
  let g:MMake_RunVar   = "" 
"//--------------------------------------------------------------------------------- 
  let g:MMaker_Cache_Index = 0 
"//--------------------------------------------------------------------------------- 
  let g:MMaker_Cache_LastLine = -1 
"//--------------------------------------------------------------------------------- 
 
 
"//--------------------------------------------------------------------------------- 
func s:MMake_BuildFunc(...) 
 
    if a:0 == 1 && a:1 == "" 
       "exe "lcd %:p:h" 
       let g:MMake_BuildVar = fnamemodify(bufname("%"), ':p') 
   elseif a:0 == 1 && a:1 != "" 
       let g:MMake_BuildVar = fnamemodify(a:1, ':p') 
   elseif a:0 > 1 
       echo "MMake: too mutch arguments" 
   endif 
 
endfunc 
 
 
"//--------------------------------------------------------------------------------- 
func s:MMake_RunFunc(...) 
 
    if a:0 == 1 && a:1 == "" 
       "exe "lcd %:p:h" 
       let g:MMake_RunVar = fnamemodify(bufname("%"), ':p') 
   elseif a:0 == 1 && a:1 != "" 
       let g:MMake_RunVar = fnamemodify(a:1, ':p') 
   elseif a:0 > 1 
       echo "MMake: too mutch arguments" 
   endif 
 
endfunc 
 
"//--------------------------------------------------------------------------------- 
func MMake_MakeFunc() 
 
    if g:MMake_BuildVar != "" 
        let localPathFile = fnamemodify(bufname("%"), ":p") 
        exe "lcd " . fnamemodify(g:MMake_BuildVar, ":p:h") 
        exe "make!" 
        let g:MMaker_Cache_Index    = 0 
        let g:MMaker_Cache_LastLine = 0 
        exe "lcd " . fnamemodify(localPathFile, ":h") 
        call MMake_QuickFixErrorHandler() 
 
    else 
        echo "variable MMake_BuildVar not set" 
    endif 
 
endfunc 
 
"//--------------------------------------------------------------------------------- 
func MMake_RunFunc() 
    if g:MMake_RunVar != "" 
        exe "!" . g:MMake_RunVar 
    else 
        echo "variable MMake_RunVar not set" 
    endif 
endfunc 
 
"//--------------------------------------------------------------------------------- 
func MMake_ReadSettingsHDD() 
 
    if filereadable(g:MMake_SettingsFile) == 1      
 
    let mListRead =  readfile( g:MMake_SettingsFile)  
 
    for item in mListRead 
 
        "find projectFile pattern 
        if     match(item,"projectFile") >= 0 
            "get string after '=' and numbers of spaces  
            let g:MMake_BuildVar = substitute(item,".*=[\ ]*", "","") 
 
        elseif match(item,"executeBinary") >= 0 
            let g:MMake_RunVar = substitute(item,".*=[\ ]*", "","") 
 
        endif 
 
        if g:MMake_BuildVar != "" && g:MMake_RunVar != "" 
            break 
        endif 
 
    endfor 
 
    call delete(g:MMake_SettingsFile)  
 
    else 
        echo "MMake_ReadSettingsHDD: skip read configuration" 
    endif 
 
endfunc 
 
"//--------------------------------------------------------------------------------- 
func MMake_WriteSettingsHDD() 
 
    let l:mList = [] 
    call add(l:mList, MMake_Version()) 
    call add(l:mList, "projectFile   = " . g:MMake_BuildVar) 
    call add(l:mList, "executeBinary = " . g:MMake_RunVar) 
 
    if len (l:mList) > 0 
        call writefile(l:mList, g:MMake_SettingsFile)  
    else 
        echo "MMake_WriteSettingsHDD: there is no information to write" 
    endif 
 
endfunc 
 
"//--------------------------------------------------------------------------------- 
func MMake_Version() 
        let l:reminderVersion = " V.0.3 " 
        let l:informationString = "## MMake Pro" . l:reminderVersion . strftime("%d.%m.%Y %X")   
        return l:informationString 
endfunc 
 
"//--------------------------------------------------------------------------------- 
"get templates and copy them to some location
"//--------------------------------------------------------------------------------- 
function MMake_GetTemplate(loadTemplateFileName, saveFileName)  

    if FWK_copyTemplate(a:loadTemplateFileName, a:saveFileName, {}) == 0
        exe "OpenTabsSilent " . a:saveFileName 
    endif

endfunction  
 
function MMake_GoToProject() 
    exe "OpenTabsSilent " .  g:MMake_BuildVar 
endfunc 
 
 
"//--------------------------------------------------------------------------------- 
"QuickFix window handler 
"//--------------------------------------------------------------------------------- 
function MMake_QuickFixOpenCloseWindow() 
 
    let l:it = 0 
    let l:itEnd = last_buffer_nr() 
 
    while  l:it != l:itEnd 
 
        if getbufvar(l:it,"&filetype") == "qf" 
 
            exe "bd " . l:it 
            break 
             
        endif 
        let l:it = l:it + 1 
 
    endwhile 
 
    if l:it == l:itEnd 
        :copen 
        call search("error:\\|warning:")
    else
        echohl Question | echo "no warning|error found" | echohl Non 
        call input("press any key ... ") 
    endif 
 
endfunc 
 
"//--------------------------------------------------------------------------------- 
function MMake_QuickFixGetFilters() 
 
    let l:filterName = $VIM .  "/vim_extention/filters/" . "filterWarnings.flt" 
    if filereadable(l:filterName) == 1      
        return readfile(l:filterName) 
    else 
        echo "MMake_QuickFixGetFilters: filter file " . l:filterName . " is not readable" 
        return [] 
    endif 
 
endfunc 
 
"//--------------------------------------------------------------------------------- 
function MMake_QuickFixBuffer(it, itEnd) 
 
    let l:it = a:it 
    while  l:it < a:itEnd 
 
        if getbufvar(l:it,"&filetype") == "qf" 
            return getbufline(l:it, 1, "$") 
        endif 
 
        let l:it = l:it + 1 
    endwhile 
 
    echo "MMake_QuickFixBuffer: there is no quickbuf" 
    return [] 
 
endfunc 
 
"//--------------------------------------------------------------------------------- 
function MMake_QuickFixChkFilters(itemChk ) 
 
    let l:modLine = substitute ( substitute (a:itemChk, ".*\\","",""), "[\ ]","","g") 
    for it in g:MMake_lFilter 
 
        if it == "" 
            continue 
        endif 
 
    let l:itMode = substitute ( substitute (it, ".*\\","",""), "[\ ]","","g") 
 
        "echo "Chk =\"" . l:modLine . "\"" 
        "echo "it  =\"" . l:itMode . "\"" 
        "echo "len(Chk/It) =\"" . strlen(l:modLine) . "|" . strlen(l:itMode) . "\"" 
 
        if ( l:modLine == itMode) 
            "echo "found filter: " .  it 
            return -1 
        else  
            "echo "not found filter" 
        endif 
 
    endfor 
 
    "echo "filter not found (ok) " 
    return 1 
 
endfunc 
 
function MMake_getErrorListSignatures() 
 
    return [ 'error: ', 'warning: ', ' undefined reference ', 'No such file or directory' ] 
endfunct 
"//--------------------------------------------------------------------------------- 
function MMake_QuickFixFindError( indStart ) 
    "echo "cache index on enter " . a:indStart 
    let l:lErrorsSignatures = MMake_getErrorListSignatures() 
 
    if a:indStart == 0 
        let l:boolOneMoreCycle = 1 
    else 
        let l:boolOneMoreCycle = 0 
    endif 
 
    let l:boolOpen = 0 
 
    exe "copen" 
    let g:MMake_lFilter = MMake_QuickFixGetFilters() 
    let g:MMake_lQuickB = MMake_QuickFixBuffer(1, (last_buffer_nr()+1) ) 
    exe "cclose" 
 
    let l:indStart = a:indStart 
    let l:indEnd   = len(g:MMake_lQuickB) 
 
    if len(g:MMake_lFilter) != 0 && l:indEnd != 0 && g:MMake_lQuickB[0] != '' 
 
            while l:indStart < l:indEnd 
 
                for errMatch in l:lErrorsSignatures 
 
                if match(g:MMake_lQuickB[l:indStart],errMatch) != -1 
 
                    let l:stringToOpen = split( g:MMake_lQuickB[l:indStart] ) 
                    let l:stringToOpen = split(l:stringToOpen[0],'|') 
                    "echo l:stringToOpen 
                    "echo "pos(Bef/Aft) = (" . g:MMaker_Cache_LastLine . "|" . l:stringToOpen[1] .")" 
                    if g:MMaker_Cache_LastLine != l:stringToOpen[1] 
 
                        if MMake_QuickFixChkFilters(g:MMake_lQuickB[l:indStart]) == 1 
 
                            let l:var = fnamemodify(bufname("%"), ':p') 
                            let l:var2= fnamemodify(l:stringToOpen[0], ':p') 
                            "echo "file to open: " . l:var2 
                            "echo "cur buffer  : " . l:var 
                            if l:var != l:var2 
                                exe "OpenTabsSilent " . l:var2 
                                "echo "val " . g:MMake_lQuickB[l:indStart] 
 
                            "else 
                                "echo "same file,skip" 
                            endif 
                                exe ":" . l:stringToOpen[1] 
                                let g:MMaker_Cache_LastLine = line(".") 
                                let l:boolOpen = 1 
                                "echo g:MMake_lQuickB[l:indStart] 
                                echohl WarningMsg | echo g:MMake_lQuickB[l:indStart] | echohl Non 
                                call input("press any key ... ") 
 
                        "else 
                            "echo "else l:boolOpen is 0" 
                        endif 
 
                    "else 
                        "echo "same position, skip ... " 
                    endif 
 
                endif 
            endfor 
 
                let l:indStart = l:indStart + 1 
 
                if l:indStart     ==  (l:indEnd-1) && l:boolOpen 
                    return 0 
 
                elseif l:indStart  <   l:indEnd    && l:boolOpen 
                    return l:indStart 
 
                elseif l:indStart  == (l:indEnd-1) && !l:boolOneMoreCycle 
                    let l:indStart = 0 
                    let l:boolOneMoreCycle = 1 
 
                endif 
 
            endwhile 
 
            echohl Question | echo "MMake_QuickFixFindError: no warnings and errors found" | echohl Non 
    else 
        echo "MMake_QuickFixFindError: filter or quickbuf is empty" 
    endif 
 
endfunc  
"//--------------------------------------------------------------------------------- 
"QuickFix window handler 
"//--------------------------------------------------------------------------------- 
function MMake_QuickFixErrorHandler() 
        let g:MMaker_Cache_Index = MMake_QuickFixFindError (g:MMaker_Cache_Index) 
endfunc 
 
"//--------------------------------------------------------------------------------- 
function MMake_echoHandler(message) 
    echo a:message 
endfunc 
 
 
"""""""""""""""""""'  
"trigger COPEN/CCL command (quick fix window operations, open if closed, close  
"if opened)  
""""""""""""""""""""  
"//---------------------------------------------------------------------------------  
function! PpdfunctionQuick ()  
 
    let l:iFirst = 0  
    let l:iLast = bufnr($)  
    let l:LetsOpenCWindow = 1  
    while l:iFirst != (l:iLast+1)  
 
        if getbufvar(l:iFirst, "&filetype") == "qf"  
            let l:LetsOpenCWindow = 0  
            break  
        endif  
 
        let l:iFirst = l:iFirst + 1  
    endwhile  
 
 
    "echo l:LetsOpenCWindow  
    if l:LetsOpenCWindow == 1  
        exec "copen"  
    else  
        exec "ccl"  
    endif  
 
endfunction  
"//---------------------------------------------------------------------------------  
 
 
"//--------------------------------------------------------------------------------- 
command! -n=? -complete=file MMakeBuild :call s:MMake_BuildFunc('<args>') 
command! -n=? -complete=file MMakeRun   :call s:MMake_RunFunc('<args>') 
"//--------------------------------------------------------------------------------- 
 
autocmd VimLeavePre *        call MMake_WriteSettingsHDD()  
autocmd VimEnter    *        call MMake_ReadSettingsHDD() 
 
 
endif 
